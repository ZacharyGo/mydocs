/* Copyright (c) 2009, 2021, Oracle and/or its affiliates.*/
/* All rights reserved.*/

/**
 * Client behavior implementation to show the suggestedItems in a dropdown for
 * the Global Search field.
 * This implementation heavily borrowed from &lt;af:autoSuggestBehavior/> 
 * (AdfAutoSuggestBehavior.js).
 */

/**
 * Suggest behavior to show search suggestions.
 * @param formFactor mobile or desktop.
 * @param typeDelay number of milliseconds to delay after keypress before 
 * request for suggestion is sent to server.
 * @param minCharCount minimum characters the user needs to type before the 
 * searchSuggest kicks in.  Before this number top suggestions (if configured) are shown.
 * @param maxSuggestedItems the maximum number of suggested items to show.
 * @param searchFieldMinSearchLength min length before the search field is considered 
 * searchable, pressing enter before this will result in a error to the user.
 * @param submitOnEnterComponentId component id for enter submit component.
 * @param submitKeywordsOnSelection do we submit keywords using submitOnEnterComponentId
 * on selection.
 * @param inlineSuggestionComponentId if type = inline, specifying the id to place markup.
 * @param topSuggestions do we show top selections on click into the field.
 * @param postSelectionFocusComponentId component to focus in after selection,
 * may be null.
 * @param serverStateExists does server state alreeady exist for this source of
 * suggestions.  Governs whether we show messages.
 * @param adfPopupId adf popup to use if suggestions are to be shown inline in an
 * existing adf popup.
 * @param adfMessageComponentId if type == inline specifies a component to show
 * a "search for 'linda'" style message.
 * @param textSelection how is text selection handled in the inputText field.
 * @param mlsMessages Map of MLS messages.
 * @param groupMetadata group Metadata, in order.  JSON format.
 */
function FndSearchSuggestBehavior(formFactor,
                                  typeDelay, minCharCount,
                                  maxSuggestedItems, searchFieldMinSearchLength,
                                  submitOnEnterComponentId,
                                  submitKeywordsOnSelection,
                                  inlineSuggestionComponentId, 
                                  inlineReplaceComponentId,
                                  topSuggestions,
                                  postSelectionFocusComponentId,
                                  serverStateExists,
                                  adfPopupId,
                                  adfMessageComponentId,
                                  adfShowComponentIds,
                                  textSelection, 
                                  mlsMessages,
                                  groupMetadata,
                                  RESTClientToken,
                                  synonymsEnabled, synonymLang, 
                                  synonymContextCode, synonymObjectType, synonymDataUrl,
                                  immediateSelection)
{
  this.Init(formFactor, typeDelay, minCharCount, maxSuggestedItems, searchFieldMinSearchLength,
            submitOnEnterComponentId, submitKeywordsOnSelection,
            inlineSuggestionComponentId, inlineReplaceComponentId,
            topSuggestions, postSelectionFocusComponentId,
            serverStateExists,
            adfPopupId, adfMessageComponentId, adfShowComponentIds,
            textSelection, 
            mlsMessages,
            groupMetadata,
            RESTClientToken,
            synonymsEnabled, synonymLang,
            synonymContextCode, synonymObjectType, synonymDataUrl,
            immediateSelection);
}

FndSearchSuggestBehavior.InitClass = function()
{
  this._ELLIPSIS = "...";
  this._POPUP_PANEL_ID = "_fndSuggest"
  this._SELECTED_STYLE_CLASS = "p_AFSelected";
  this._HOVER_STYLE_CLASS = "fndGlobalSearchPersonalizeHover";
  this._BUSY_STYLE_CLASS = "fndSpinner";
  this._ITEM_VALUE_ATTR = "_fndSuggestValue";
  this._ITEM_DISPLAY_VALUE_ATTR = "_fndSuggestDisplayValue";
  this._ITEM_AUTOCOMPLETE_ATTR = "_fndAutocomplete";
  this._ITEM_HAS_QUICK_ACTIONS_ATTR = "_fndHasQuickActions";
  this._IS_DESKTOP_QUICK_ACTIONS_LIST = "_listIsDesktopQuickActions";  // advertise the right side list as quick actions.
  this._ITEM_VALUE_SUBMIT_ATTR = "_fndSuggestValueSubmit";
  this._ITEM_INDEX_ATTR = "_fndSuggestIndex";
  this._ITEM_VALUE_PLACE_IN_FIELD_ATTR = "_fndSuggestPlaceItemInField";
  this._ITEM_VALUE_PLACE_ID_IN_FIELD_ATTR = "_fndSuggestPlaceItemIdInField";
  this._ITEM_SUGGEST_ON_SELECTED_ITEM_ATTR = "_fndSuggestOnSelectedItem";
  this._ITEM_GROUP_NAME_ATTR = "_fndSuggestGroupName";
  this._ITEM_IS_SEARCH_FOR_LINK_ATTR = "_fndSuggestSearchForLink";
  this._ITEM_IS_CLICKABLE_HEADER_ATTR = "_fndSuggestClickableHeader";
  this._MOBILE_QUICK_ACTION_ATTR = "_fndMobileQuickAction";
  this._SELECTED_ITEM_INDEX = "_fndSuggestSelected";  // index on ul representing selected li.
  this._KEYBOARD_NAVIGATION_PERFORMED = "_fndKeyboardNavigationPerformed";
  this._SUGGEST_ITEMS_ID = "_fndSuggestPopup";
  this._POPUP_CONTAINER_DIV_ID = "_fndSuggestContainer";
  this._DEFAULT_BULLET = "images/applcore/uishell/globalSearch/t.gif";
  this._SELECT_AUTOCOMPLETE = "images/applcore/uishell/globalSearch/func_boxarrowout_16_act.png";
  this._QA_PARENT_DIV = "_QA_PARENT_DIV";

  this._SUGGEST_INLINE_CONTAINER_STYLE = "FndSearchSuggestItemsContainerInline";
  this._SUGGEST_POPUP_CONTAINER_STYLE = "FndSearchSuggestItemsContainerPopup";
  this._SUGGEST_CONTAINER_STYLE_NO_QA = "FndSearchSuggestSuggestContainerNoQuickActions";
  this._SUGGEST_CONTAINER_STYLE_WITH_QA = "FndSearchSuggestSuggestContainerWithQuickActions";
  this._SUGGEST_LIST_STYLE = "FndSearchSuggestSuggestList";
  this._QUICK_ACTIONS_CONTAINER_STYLE = "FndSearchSuggestQuickActionsContainer";
  this._QUICK_ACTIONS_LIST_STYLE = "FndSearchSuggestQuickActionsList";
  
  this._SUGGESTED_ITEM_LI_STYLE = "FndSearchSuggestLIItem";
  this._SUGGESTED_ITEM_LI_DESKTOP_PARENT_STYLE = "FndSearchSuggestLIItemDesktopParent";
  this._SUGGESTED_ITEM_LI_DESKTOP_PARENT_ARROW_STYLE = "FndSearchSuggestLIItemDesktopParentArrow";
  this._SUGGESTED_ITEM_MOBILE_QA_STYLE = "FndSearchSuggestMobileQuickActionLIItem";
  this._SUGGESTED_ITEM_STYLE = "FndSearchSuggestItem";
  this._NO_SUGGESTIONS_STYLE = "FndSearchSuggestNoItem";
  this._SUGGESTED_ITEM_IMAGE_CONTAINER_STYLE = "FndSearchSuggestItemImageContainer";
  this._SUGGESTED_ITEM_TEXT_CONTAINER_STYLE = "FndSearchSuggestItemTextContainer";
  this._SUGGESTED_ITEM_COUNT_CONTAINER_STYLE = "FndSearchSuggestItemCountContainer";
  this._SUGGESTED_ITEM_IMAGE_STYLE = "FndSearchSuggestItemImage";
  this._SUGGESTED_ITEM_GROUP_STYLE = "FndSearchSuggestGroup";
  this._SUGGESTED_ITEM_GROUP_HEADING_STYLE = "FndSearchSuggestGroupHeading";
  this._SUGGESTED_ITEM_GROUP_HEADING_SR_STYLE = "FndSearchSuggestGroupHeadingSR";
  this._SUGGESTED_ITEM_HILIGHT_STYLE = "FndSearchSuggestItemHilight";
  this._SUGGESTED_ITEM_NORMAL_STYLE = "FndSearchSuggestItemNormal";
  this._SUGGESTED_DESCRIPTION_HILIGHT_STYLE = "FndSearchSuggestDescriptionHilight";
  this._SUGGESTED_DESCRIPTION_NORMAL_STYLE = "FndSearchSuggestDescriptionNormal";
  this._SUGGESTED_ITEM_COUNT_STYLE = "FndSearchSuggestItemCount";
  this._SUGGESTED_ITEM_AUTOCOMPLETE_STYLE = "FndSearchSuggestAutocompleteCount";
  this._MORE_ITEMS_STYLE = "FndSearchSuggestMoreItems";
  this._HEADER_IMG_STYLE = "FndSearchSuggestHeaderImage";
  this._DESKTOP_SHOW_QUICK_ACTION_STYLE = "FndSearchSuggestDesktopQuickActionShow";
  this._MOBILE_SHOW_QUICK_ACTION_STYLE = "FndSearchSuggestMobileQuickActionShow";
  this._MOBILE_HIDE_QUICK_ACTION_STYLE = "FndSearchSuggestMobileQuickActionHide";
  this._SEARCH_FOR_MESSAGE_STYLE = "FndSearchForLink";
  this._PROGRESS_TEXT_ITEM_STYLE = "fndGlobalSearchProgressText";
  this._PROGRESS_IMAGE_ITEM_STYLE = "fndGlobalSearchProgressImage";
  this._DEFAULT_SVG_STYLE = "svg-func svg-navmenu size24";
  this._SUGGESTED_ITEM_TYPE_AUTOCOMPLETE = "autocomplete";
  this._SUGGESTED_ITEM_TYPE_SYNONYM = "synonym";
  
  this._PAGE_ITEMS_CACHE_NAME = "fndSearchSuggestBehaviorPAGECache";
  // The root level cache name for localStorage.
  this._SYNONYMS_CACHE_NAME = "fndSynonymsCache";
}

AdfObject.createSubclass(FndSearchSuggestBehavior, AdfClientBehavior);

FndSearchSuggestBehavior.prototype.Init = function(formFactor,
                                                   typeDelay, minCharCount,
                                                   maxSuggestedItems, searchFieldMinSearchLength,
                                                   submitOnEnterComponentId, 
                                                   submitKeywordsOnSelection,
                                                   inlineSuggestionComponentId,
                                                   inlineReplaceComponentId,
                                                   topSuggestions,
                                                   postSelectionFocusComponentId,
                                                   serverStateExists,
                                                   adfPopupId,
                                                   adfMessageComponentId,
                                                   adfShowComponentIds,
                                                   textSelection,
                                                   mlsMessages,
                                                   groupMetadata,
                                                   RESTClientToken,
                                                   synonymsEnabled, synonymLang,
                                                   synonymContextCode, synonymObjectType, synonymDataUrl,
                                                   immediateSelection)
{
  FndSearchSuggestBehavior.superclass.Init.call(this);
  this._formFactor = formFactor;
  this._typeDelay = typeDelay;
  this._minCharCount = minCharCount;
  this._maxSuggestedItems = maxSuggestedItems;
  this._searchFieldMinSearchLength = searchFieldMinSearchLength;
  this._submitOnEnterComponentId = submitOnEnterComponentId;
  this._submitKeywordsOnSelection = submitKeywordsOnSelection;
  this._inlineSuggestionComponentId = inlineSuggestionComponentId;
  this._inlineReplaceComponentId = inlineReplaceComponentId;
  this._postSelectionFocusComponentId = postSelectionFocusComponentId;
  this._useGeneratedSuggestPopup = false;
  this._topSuggestions = topSuggestions;
  this._showTopSuggestionsLoadingMessage = false;
  this._initializedServer = false;
  this._serverStateExists = serverStateExists;
  if (serverStateExists || this._topSuggestions)
  {
    // do not sent an initialize event if it has already been done, or if top
    // suggestions are on (in which case a top and init event would get sent 
    // at about the same time which is non-performant).
    this._initializedServer = true;
  }
  
  if (inlineSuggestionComponentId == "")
  {
    this._useGeneratedSuggestPopup = true;
  }
    
  // The ADF popup hosting inline suggestions.
  if (adfPopupId && adfPopupId != "")
  {
    this._adfPopupId = adfPopupId;
    // The following attributes will be generated and removed dynamically as the 
    // adf popup is shown/hidden and are used to track the dismisal behavior.
    // this._adfPopup - the jsf popup component itself.
    // this._adfSearchFieldClientId - full search field client id.
    // this._adfPopupRootPanelId 
    // this._adfRootPanelClientId
    // this._adfPopupMousedownCallback
    // this._adfPopupKeyupCallback
  }
  if (adfMessageComponentId && adfMessageComponentId != "")
  {
    this._adfMessageComponentId = adfMessageComponentId;
  }
  
  if (adfShowComponentIds && adfShowComponentIds != "")
  {
    this._adfShowComponentIds = adfShowComponentIds;
  }
  
  this._textSelection = textSelection;
  this._mlsMessages = mlsMessages;
  // guard hilighting so the user can select text once in the field.
  this._hasHilightedSearchText = false;
  
  this._groupMetadata = groupMetadata;
  
  // If a single group is seleced, this is it's group name.
  this._singleSelectedGroupName = null;
  
  // Auth token to be sent with REST calls.
  this._RESTClientToken = RESTClientToken;
  this._synonymsEnabled = synonymsEnabled;
  this._synonymDataUrl = synonymDataUrl;
  // flip this to show synonyms in the UI.
  this._showSynonyms = false;
  // The current synonym Context for synonym Cache.
  this._synonymContext = {"contextCode": synonymContextCode || "",
                          "objectType": synonymObjectType || "",
                          "language": synonymLang};
  this._immediateSelection = immediateSelection;
  this._personalizeSelectedByKeyboard = false;
}

FndSearchSuggestBehavior.prototype.initialize = function(component)
{
  component.addEventListener(AdfUIInputEvent.KEY_UP_EVENT_TYPE, this._fireKeyUp, this);
  component.addEventListener(AdfUIInputEvent.KEY_DOWN_EVENT_TYPE, this._fireKeyDown, this);
  component.addEventListener(AdfUIInputEvent.MOUSE_DOWN_EVENT_TYPE, this._fireMouseDownInPopup, this);
  component.addEventListener(AdfUIInputEvent.BLUR_EVENT_TYPE, this._fireBlur, this);
  component.addEventListener(AdfUIInputEvent.FOCUS_EVENT_TYPE, this._fireFocus, this);
  component.addEventListener(AdfUIInputEvent.CLICK_EVENT_TYPE, this._fireClick, this);
  // This is browser auto complete.
  this._auto_complete_disabled = false;
  this._searchFieldClientId = component.getClientId();
  this._document = window.document;
  
  // Caches.  There are three caches and they are processed in order of specificity:
  // - blurCache,
  // - fieldCache,
  // - pageCache.
  //
  // The blur cache is a cache for items current only until the user leaves the 
  // search field.  Each cached item is a single suggest group keyed on the group 
  // name and typed character(s).  If top suggestions is on, top suggestion cached 
  // items do not depend on the number of characters.  The number of entries in this
  // cache is likely to be small (<= maxSuggestedItems) as it will be filtered
  // on the server.
  this._blurCache = {};
  // The field cache is for entries relevant only for the current search field
  // (as compared to the global cache).  Each cached item is a single suggest group 
  // keyed on the group name.  The number of entries in this cache is likely to
  // be larger (possibly > maxSuggestedItems) as there will be no filtering done on 
  // on the server.  It may contain top items, filterable items etc and will need
  // filtering on the client.
  this._fieldCache = {};
  // The page cache (for which we have no variable) is stored on the AdfPage object
  // and is common across search fields. The number of entries in this cache is likely to
  // be larger (possibly > maxSuggestedItems) as there will be no filtering done on 
  // on the server.  It may contain top items, filterable items etc and will need
  // filtering on the client. 

  // quick actions cache.  Cache of <groupName>_<item> -> Array of child items.
  this._quickActionsCache = {};
  
  // The cache of synonyms and autocomplete words at a per searchSuggestBehavior 
  // (per field) level.
  // This cache has at most 3 levels:
  // level 0: the most general (global), 
  // level 1: contextCode striping,
  // level 2: contextCode/objectType striping.
  // Each level will contain a mapping:
  // {
  //  "cacheKey": "cacheKey:cc:ot"  to determine if the contect is changed.
  //  "synonyms": {"word", ["synonym1", "synonym2", ...],
  //  "autocomplete": [{}, {}, {"wo":["word", "wood", ...]}, {"wor": ["world"]}, ...]
  // };
  this._synonymCache = [null, null, null];
  
  AdfPage.PAGE.scheduleTimer(this, this._initARIA, component, 0);
  
  // If there are groups configured by rest, agressivly fetch them now.
  this._fetchRestGroupsIfNeeded();
}

/*
 * Initialize aria attributes on the search field.  This is done in a callback as 
 * field will not be available during construction time.
 * @param component component ssb is registered on.
 */
FndSearchSuggestBehavior.prototype._initARIA = function(component)
{
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component);
  contentNode.setAttribute("role", "combobox");
  contentNode.setAttribute("aria-autocomplete", "list");
  if (this._adfPopupId)
  {
    var index = this._searchFieldClientId.lastIndexOf(":");
    var s = this._searchFieldClientId.substring(0, index);
    contentNode.setAttribute("aria-owns", s + ":" + this._adfPopupId + "::content");
  }
  else
  {
    contentNode.setAttribute("aria-owns", AdfRichUIPeer.createSubId(this._searchFieldClientId, FndSearchSuggestBehavior._SUGGEST_ITEMS_ID));
  }
}


/**
 * Get a mls message for the mlsKey.  These messages are transported on construction
 * of the Behavior.
 * @param mlsKey key to lookup map of messages.
 */
FndSearchSuggestBehavior.prototype._getMlsString = function(mlsKey)
{
  var ret = this._mlsMessages[mlsKey];
  if (typeof ret == "undefined")
  {
    ret = "*** No message found for key: " + mlsKey;
  }
  
  return ret;
};

/**
 * Get the cache key for BLUR items, logic ensures top items are cached together.
 * @param groupName code name of group.
 * @param submittedValue value in text field.
 */
FndSearchSuggestBehavior.prototype._getBLURCacheKey = function(groupName, submittedValue)
{
  var cacheKey = groupName.toUpperCase();
  if (submittedValue.length >= this._minCharCount)
  {
    cacheKey = cacheKey.concat(":").concat(submittedValue); 
  }
  return cacheKey;
}

FndSearchSuggestBehavior.prototype._addToBLURCache = function(groupName, submittedValue, suggestedItems)
{
  var cacheKey = this._getBLURCacheKey (groupName, submittedValue);
  this._blurCache[cacheKey] = suggestedItems;
};

FndSearchSuggestBehavior.prototype._getFromBLURCache = function(groupName, submittedValue)
{
  var cacheKey = this._getBLURCacheKey(groupName, submittedValue);

  return this._blurCache[cacheKey];
};

FndSearchSuggestBehavior.prototype._clearBLURCache = function()
{
  this._blurCache = {};
  this._singleSelectedGroupName = null;
};

FndSearchSuggestBehavior.prototype._addToFIELDCache = function(groupName, suggestedItems)
{
  this._fieldCache[groupName.toUpperCase()] = suggestedItems;
};

FndSearchSuggestBehavior.prototype._getFromFIELDCache = function(groupName)
{
  return this._fieldCache[groupName.toUpperCase()];
};

FndSearchSuggestBehavior._getPAGECache = function()
{
  var page = AdfPage.PAGE;
  var ret = page.getPageProperty(FndSearchSuggestBehavior._PAGE_ITEMS_CACHE_NAME);
  if (typeof ret === "undefined")
  {
    ret = {};
    page.setPageProperty(FndSearchSuggestBehavior._PAGE_ITEMS_CACHE_NAME, ret);
  }
  return ret;
};

FndSearchSuggestBehavior._addToPAGECache = function(groupName, suggestedItems)
{
  var cache = FndSearchSuggestBehavior._getPAGECache();
  cache[groupName.toUpperCase()] = suggestedItems;
};

FndSearchSuggestBehavior._getFromPAGECache = function(groupName)
{
  var cache = FndSearchSuggestBehavior._getPAGECache();
  return cache[groupName.toUpperCase()];
};

/**
 * Look to see if there are any groups with Rest endpoints, and if there are,
 * and there is not data for them already (and a fetch is not in flight), queue the
 * rest calls.
 */
FndSearchSuggestBehavior.prototype._fetchRestGroupsIfNeeded = function()
{
  for (var index = 0; index < this._groupMetadata.length; index++)
  {
    var group = this._groupMetadata[index];
    
    var groupName = group.name;
    if (this._isDataInAnyCache('', groupName))
    {
      continue;
    }
    if (group.restMetadata && !group.dataCurrentlyFetching)
    {
      // schedule rest calls, but not all at once.
      AdfPage.PAGE.scheduleTimer(this, this._fetchRestSuggestGroupItems, group, (10 * (index + 1)));
      // this._fetchRestSuggestGroupItems(group);
    }
  }
  
};

FndSearchSuggestBehavior.prototype._fetchRestSuggestGroupItems = function(group)
{
  // flag that we are in a fetch to stop double fetch.
  group.dataCurrentlyFetching = true;
  AdfObject.ensureClassInitialization(AdfRestDataService);
  AdfObject.ensureClassInitialization(FndSecureRestXhrFactory);
  var options = {};
  var endpoint = group.restMetadata.restURL;

  options[AdfRestDataService.PRIORITIZE] = true;
  options[AdfRestDataService.SUCCESS_CALLBACK_KEY] = this.createCallback(this._restGroupFetchComplete);
  options[AdfRestDataService.ERROR_CALLBACK_KEY] = this.createCallback(this._restGroupFetchFailed);
  options[AdfRestDataService.CLIENT_ID_KEY] = this._searchFieldClientId;
  options['groupName'] = group.name;

  var ds = AdfPage.PAGE.getRestDataService();
  // Authorization header needed for session added via callback in FndSecureRestXhrFactory.
  try {
    ds.queueRequest(endpoint, options);
  } catch(exe) {
    AdfLogger.LOGGER.severe("Exception ocurred while queueing Rest group request.", exe);
  }
};

FndSearchSuggestBehavior.prototype._restGroupFetchComplete = function(response, options) 
{
  if (response)
  {
    if (typeof response === 'string')
    {
      // in ie, comes back as a string, not a parsed object.
      response = JSON.parse(response);
    }
    var groupName = options.groupName;
    var items = response.items;
    if (!groupName || ! items)
    {
      AdfLogger.LOGGER.info("Suggest Group REST call returned without a name, or items.");
      return;
    }
    var group = this._getGroupMetatdataByGroupName(groupName);
    if (!group)
    {
      AdfLogger.LOGGER.info("Suggest Group REST call returned with name: " + groupName + ", but this is not a valid group.");
      return;
    }

    var convertedData = this._convertFromADFRest(group, items);
    var cacheDirective = group.cacheDirective;
    if ("PAGE" === cacheDirective)
    {
      FndSearchSuggestBehavior._addToPAGECache(groupName, convertedData);
    } 
    else if ("FIELD" === cacheDirective)
    {
      this._addToFIELDCache(groupName, convertedData);
    }
    delete group.dataCurrentlyFetching;
  }
  else
  {
    AdfLogger.LOGGER.info("Suggest Group REST call returned with no data.  It is possible that the data is malformed.");
  }
};

FndSearchSuggestBehavior.prototype._restGroupFetchFailed = function(statusCode, response, options)
{
  AdfLogger.LOGGER.info("Suggest Group REST call failed with statusCode: " + statusCode);
};

/**
 * Convert data in the ADF REST format into our internal format.
 * REST format is essentially items array:
 * "items" : [ {
    "Empno" : 7839,
    "Ename" : "KING",
    "Job" : "PRESIDENT",
    "Mgr" : null
  }, {
    "Empno" : 7566,
    "Ename" : "JONES",
    "Job" : "MANAGER",
    "Mgr" : 7839
  } ]
}

 * @param group group metadata.
 * @param items JSON structure.
 */
FndSearchSuggestBehavior.prototype._convertFromADFRest = function(group, items)
{
  var ret = [];
  var start = new Date().getTime();
  try
  {
    var mappings = group.restMetadata.attributeNameMapping;
    for (var index = 0; index < items.length; index++)
    {
      var item = items[index];
      var retObj = {};
      // suggestedItem = item.n;
      // suggestedId = item.i;
      // suggestedCount = item.c;
      // suggestedUrl = item.u;
      // suggestedIconUrl = item.iu;
      // suggestionType = item.st;
      // suggestedItemType = item.t;
      // suggestedDescription = item.d;
      // hasQuickActions = item.qa;
      // textAttrName is the only required attribute.
      var canAdd = this._mapAttr(item, mappings.textAttrName, retObj, "n");
      if (canAdd)
      {
        this._mapAttr(item, mappings.idAttrName, retObj, "i");
        this._mapAttr(item, mappings.countAttrName, retObj, "c");
        this._mapAttr(item, mappings.urlAttrName, retObj, "u");
        this._mapAttr(item, mappings.iconUrlAttrName, retObj, "iu");
        this._mapAttr(item, mappings.suggestionTypeAttrName, retObj, "st");
        // do not map suggestedItemType.
        this._mapAttr(item, mappings.descriptionAttrName, retObj, "d");
        this._mapAttr(item, mappings.detailItemsAttrName, retObj, "qa");
  
        ret.push(retObj);
      }
    }
    var end = new Date().getTime();
    var durn = end - start;
    AdfLogger.LOGGER.info("Time to process " + items.length + " REST suggestions: " + durn + " mSecs.");

  } catch(exe) {
    AdfLogger.LOGGER.severe("Exception ocurred while building autocomplete indexes.", exe);
  }
  
  return ret;
};

/**
 * Add an Attribute from 'fromObj' to 'toObj', adjusting the name from 'fromName' to 'toName'.
 * @param fromObj required source object.
 * @param fromName name of source attribute.  May be null, if so there is nothing to do.
 * @param toObj required destination object.
 * @param toName required destination attribute name.
 * @return true if an attribute was mapped.
 */
FndSearchSuggestBehavior.prototype._mapAttr = function(fromObj, fromName, toObj, toName)
{
  var ret = false;
  if (fromName)
  {
    var value = fromObj[fromName];
    if (value) 
    {
      toObj[toName] = value;
      ret = true;
    }
  }
  
  return ret;
};


FndSearchSuggestBehavior.prototype._getDefaultAutocompleteIndexes = function()
{
  return [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}];
};

/**
 * Generate an autocomplete index, that is an Array of string prefixes for the passed 
 * synonyms
 * @param synonyms a mapping of word -> [synonym1, synonym2, ...]
 * @return an autocomplete index of the form [{}, {}, {}, ...] where each bucket contains
 * a number of mappings whose prefix length is the array position, for example in 
 * bucket index 2 ther may be a mapping such as "wo":["word", world"...]
 */
FndSearchSuggestBehavior.prototype._generateAutocompleteIndexes = function(synonyms)
{
  // loop through the words and add to maps based on number of prefix characters.
  var ret = this._getDefaultAutocompleteIndexes();
  var len = ret.length;
  try {
    for (var word in synonyms)
    {
      for (var i = 2; i < len; i++)
      {
        this._addToAutocompleteMap(word, i, ret[i]);
      }
    }
    // Now trim the maps down a bit, there is no reason to have all these mappings 
    // if we only show the first few.  Do not worry about mapping of less than 2
    // chars, there are too many values.
    for (var j = 0; j < len; j++)
    {
      var map = ret[j];
      for (var prefix in map)
      {
        var mappings = map[prefix];
        mappings.sort();
        if (mappings.length > this._maxSuggestedItems) 
        {
          // FndSearchSuggestBehavior._log("** trimmed: " + prefix + " down from: " + mappings.length);
          mappings.length = this._maxSuggestedItems;
        }
      }
    }
  } catch(exe) {
    AdfLogger.LOGGER.severe("Exception ocurred while building autocomplete indexes.", exe);
  }
  return ret;
};

/**
 * Add to autocompleteIndex a mapping for the substring of word of given length
 * to a list of words that have this substring.  For example "word", 2 -> "wo":["word", world"...]
 * given "world" has already been added.
 * @param word a string to add a mapping to.
 * @param length the length of word to consider.
 * @param autocompleteIndex an Object to add a mapping for the substring of word
 * to a list of words that have this substring.
 */
FndSearchSuggestBehavior.prototype._addToAutocompleteMap = function(word, length, autocompleteIndex)
{
  var wordLen = word.length;
  if (wordLen > length) 
  {
    var prefix = word.substr(0, length);
    var words = autocompleteIndex[prefix];
    try {
      if (words)
      {
        if (words.push)
        {
          words.push(word);
        }
      }
      else
      {
        words = [word];
        autocompleteIndex[prefix] = words;
      }
    } catch(exe) {
      AdfLogger.LOGGER.severe("Exception ocurred while building autocomplete indexes.", exe);
    }
  }
};

/**
 * Get the synonym Context in use.
 * @return synonymContext.
 */
FndSearchSuggestBehavior.prototype._getSynonymContext = function()
{
  return this._synonymContext;
};

/**
 * Delete all synonyms from the persistent synonyms cache on the local browser.
 */
FndSearchSuggestBehavior.deleteSynonymsCache = function(componentId)
{
  var keysToRemove = [];
  for (var i = 0; i < localStorage.length; i++) 
  {
    var key = localStorage.key(i);
    if (key.indexOf(FndSearchSuggestBehavior._SYNONYMS_CACHE_NAME) == 0)
    {
      keysToRemove.push(key);
    }
  }
  for (var j = 0; j < keysToRemove.length; j++)
  {
    localStorage.removeItem(keysToRemove[j]);
  }
  this._allSynonyms = null;
};

/**
 * Derive and return a cache key for persistent storage of the synonyms cache
 * into localStorage.
 * @param synonymContext a synonymContext object directly from the synonyms Web Service.
 * @return a String representation of synonymContext.
 */
FndSearchSuggestBehavior.prototype._getSynonymsCacheKey = function(synonymContext)
{
  var cacheKey = FndSearchSuggestBehavior._SYNONYMS_CACHE_NAME + ":" + 
                 synonymContext.language + ":" +
                 synonymContext.contextCode + ":" + 
                 synonymContext.objectType;

  return cacheKey;
};

/**
 * Derive and return a cache level for the synonymContext.
 * @param synonymContext a synonymContext object directly from the synonyms Web Service.
 * @return an integer number starting at 0.
 */
FndSearchSuggestBehavior.prototype._getSynonymsCacheLevel = function(synonymContext)
{
  var ret = 0;
  if (synonymContext.contextCode)
  {
    ret = 1;
    if (synonymContext.objectType)
    {
      ret = 2;
    }
  }

  return ret;
};

/**
 * Make a new version of synonymContext at the newLevel, assumed to be below the 
 * level synonymContext represents.
 * @param synonymContext a synonymContext object.
 * @param newLevel a number between 0 and 2.
 * @return a new synonymContext object at newLevel.
 */
FndSearchSuggestBehavior.prototype._decreaseSynonymsCacheLevel = function(synonymContext, newLevel)
{
  //  "synonymContext": {
  //    "synonymType": "S",
  //    "contextCode": "HCM1",
  //    "objectType": "Absense",
  //    "language": "US",
  //    "queryDate": "2017-07-20T22:57:09-07:00"
  //  }
  var ret = {"synonymType": synonymContext.synonymType,
             "queryDate": synonymContext.queryDate,
             "language": synonymContext.language,
             "contextCode": "",
             "objectType": ""};
  
  if (newLevel === 1)
  {
    ret.contextCode = synonymContext.contextCode;
  }
  else if (newLevel === 2)
  {
    ret.contextCode = synonymContext.contextCode;
    ret.objectType = synonymContext.objectType;
  }

  return ret;
};

/**
 * Add the raw synonyms from the web service to localStorage, and decode into
 * usable structures for fast lookup.
 */
FndSearchSuggestBehavior.prototype._addToSynonymCacheFromWebService = function(rawSynonyms)
{
  // Expect synonyms to be of the form:
  // {
  //  "synonymContext": {
  //    "synonymType": "S",
  //    "contextCode": "HCM1",
  //    "objectType": "Absense",
  //    "language": "US",
  //    "queryDate": "2017-07-20T22:57:09-07:00"
  //  },
  //  "items": [
  //   {
  //     "synonymCode": "PTO",
  //     "allCombinations": true,
  //     "primarySynonym": "pto",
  //     "synonyms": [
  //       "schedule",
  //       "absence",
  //       "vacation",
  //       "sick",
  //       "flu",
  //       "fever",
  //       "maternity"
  //     ]
  //   },
  //  ...
  //  ]
  try {
    var cacheKey = this._getSynonymsCacheKey(rawSynonyms.synonymContext);
    localStorage.setItem(cacheKey, JSON.stringify(rawSynonyms));
  } catch(exe) {
    // Log this, but continue with locally downloaded synonyms.
    // We loose efficiency, but not functionality.
    AdfLogger.LOGGER.severe("Exception ocurred storing synonyms to local Storage.", exe);
  }
  
  // Generate redundant structures for fast lookup.
  this._cacheSynonyms(rawSynonyms);
};

/**
 * Cache the raw synonyms to the per-searchSuggest instance cache.
 * @param rawSynonyms from web Service or localStorage.
 */
FndSearchSuggestBehavior.prototype._cacheSynonyms = function(rawSynonyms)
{
  var synonymContext = rawSynonyms.synonymContext;
  var cacheLevel = this._getSynonymsCacheLevel(synonymContext);
  var cacheKey = this._getSynonymsCacheKey(synonymContext);
  
  var items = rawSynonyms.items;
  var cacheData = this._generateSynonymCacheLevel(cacheKey, items);
  
  this._synonymCache[cacheLevel] = cacheData;  
};

/**
 * Generate a cache level for synonym and autocomplete data.
 * @param cacheKey denoting the cache key the synonyms are for.  This allows us to 
 * detect key changes.
 * @param items array of synonyms.
 * @return an Object containing a synonyms cache and an autocomplete cache.
 */
FndSearchSuggestBehavior.prototype._generateSynonymCacheLevel = function(cacheKey, items)
{
  //  items an array of the form:
  //  [
  //   {
  //     "synonymCode": "PTO",
  //     "allCombinations": true,
  //     "primarySynonym": "pto",
  //     "synonyms": [
  //       "schedule",
  //       "absence",
  //       "vacation",
  //       "sick",
  //       "flu",
  //       "fever",
  //       "maternity"
  //     ]
  //   },
  //  ...
  //  ]

  var synCache = this._synonymsDefinitionToLookupCache(items);
  var autoCompleteIndexes = this._generateAutocompleteIndexes(synCache);
  
  var ret = {"cacheKey": cacheKey,
             "synonyms": synCache,
             "autocomplete": autoCompleteIndexes };
  return ret;
};

FndSearchSuggestBehavior.prototype._generateEmptySynonymCacheLevel = function()
{
  var ret = {"synonyms": {},
             "autocomplete": this._getDefaultAutocompleteIndexes(),
             "empty": true};
  return ret;
};

/**
 * Turn the downloaded synonyms definition into a quickly lookupable Map.
 * @param items synonym definition array downloaded from server, as stored in localStorage.
 * @return Map of synonyms.
 */
FndSearchSuggestBehavior.prototype._synonymsDefinitionToLookupCache = function(items)
{
  // items is of the form:
  //  [
  //   {
  //     "synonymCode": "PTO",
  //     "allCombinations": true,
  //     "primarySynonym": "pto",
  //     "synonyms": [
  //       "schedule",
  //       "absence",
  //       "vacation",
  //       "sick",
  //       "flu",
  //       "fever",
  //       "maternity"
  //     ]
  //   },
  //  ...
  //  ]
  var synonymMap = {};
  var numEntries = items ? items.length : 0;
  for (var index = 0; index < numEntries; index++)
  {
    var synDefn = items[index];
    var allCombos = synDefn.allCombinations;
    var primarySynonym = synDefn.primarySynonym;
    var synonyms = synDefn.synonyms;
    if (!allCombos)
    {
      synonymMap[primarySynonym] = synonyms;
    }
    else
    {
      var allSynsArr = [primarySynonym].concat(synonyms);
      var len = allSynsArr.length;
      for (var i = 0; i < len; i++)
      {
        // continually pull the first element, then push back on the end, 
        // rotating through entire array.
        var syn = allSynsArr.shift();
        // shallow copy of array
        var syns = allSynsArr.slice();
        synonymMap[syn] = syns;
        allSynsArr.push(syn);
      }
    }
  }
  
  return synonymMap;
};

/**
 * Get the synonym Cache, either from the per instance searchSuggest cache,
 * or if this is not filled, lookup from localStorage.  If this is unset, a Web
 * Service call is initiated, but we do not wait for it and will return an empty
 * structure.
 * @param synonymContext a synonymContext at the appropriate level.
 * @return a synonym cache level for the tip of synonymContext. 
 */
FndSearchSuggestBehavior.prototype._getSynonymCache = function(synonymContext)
{
  var cacheLevel = this._getSynonymsCacheLevel(synonymContext);
  var cacheKey = this._getSynonymsCacheKey(synonymContext);
  var ret = this._synonymCache[cacheLevel];
  if (ret === null || ret.empty)
  {
    // Have the synonyms been downloaded before, but are not yet in our cache.
    var synonymsAsString = localStorage.getItem(cacheKey);
    if (synonymsAsString !== null)
    {
      var synonymsDefn = JSON.parse(synonymsAsString);
      this._cacheSynonyms(synonymsDefn);
      ret = this._synonymCache[cacheLevel];
      
      // Now, it could be the synonyms are out of date, the date string in the
      // synonymContext will allow the web service to determine this; the web 
      // service will return HTTP 204 No Content in this case, otherwise it will 
      // return all data and we will overwrite the cache for the next keypress.
      var storedSynonymContext = synonymsDefn.synonymContext;
      this._fetchSynonyms(storedSynonymContext);
    }
  }
  if (ret === null || cacheKey !== ret.cacheKey)
  {
    // poke an empty level to stop multiple web service requests before the response comes back.
    ret = this._generateEmptySynonymCacheLevel(cacheKey);
    this._synonymCache[cacheLevel] = ret;

    // No synonyms locally, or in session store, or they context has been changed, start a fetch.
    this._fetchSynonyms(synonymContext);
  }
  
  return ret;
};

FndSearchSuggestBehavior.prototype._fetchSynonyms = function(synonymContext)
{
  AdfObject.ensureClassInitialization(AdfRestDataService);
  AdfObject.ensureClassInitialization(FndSecureRestXhrFactory);
  var options = {};
  var endpoint = this._synonymDataUrl;
  if (endpoint === 'localapp')
  {
    // this is convenient for simple apps where the rest endpoint is on the local app.
    var contextRoot = document.location.pathname.split('/')[1];
    endpoint = '/' + contextRoot + '/applcoreApi/v1/searchSynonyms';
  }
  if (!endpoint)
  {
    endpoint = '/fscmRestApi/applcoreApi/v1/searchSynonyms';
  }
  if (synonymContext)
  {
    if (synonymContext.contextCode)
    {
      endpoint = endpoint + "/" + synonymContext.contextCode;
      if (synonymContext.objectType)
      {
        endpoint = endpoint + "/" + synonymContext.objectType;
      }
    }
    if (synonymContext.queryDate)
    {
      endpoint = endpoint + "/" + synonymContext.queryDate;
    }
  }

  options[AdfRestDataService.PRIORITIZE] = true;
  options[AdfRestDataService.SUCCESS_CALLBACK_KEY] = this.createCallback(this._fetchComplete);
  options[AdfRestDataService.ERROR_CALLBACK_KEY] = this.createCallback(this._fetchFailed);
  options[AdfRestDataService.CLIENT_ID_KEY] = this._searchFieldClientId;

  var ds = AdfPage.PAGE.getRestDataService();
  // Authorization header needed for session added via callback in FndSecureRestXhrFactory.
  try {
    ds.queueRequest(endpoint, options);
  } catch(exe) {
    AdfLogger.LOGGER.severe("Exception ocurred while queueing Synonym request.", exe);
  }
};

FndSearchSuggestBehavior.prototype._fetchComplete = function(response, options) 
{
  if (response)
  {
    if (typeof response === 'string')
    {
      // in ie, comes back as a string, not a parsed object.
      response = JSON.parse(response);
    }
    this._addToSynonymCacheFromWebService(response);
  }
};

FndSearchSuggestBehavior.prototype._fetchFailed = function(statusCode, response, options)
{
  AdfLogger.LOGGER.info("Synonym REST call failed with statusCode: " + statusCode);
};



FndSearchSuggestBehavior.prototype._getSynonymsFromSynonymCache = function(text)
{
  var ret = [];
  var lowerText = text.toLowerCase();
  var synonymContext = this._getSynonymContext();
  var cacheLevel = this._getSynonymsCacheLevel(synonymContext);
  for (var i = cacheLevel; i >= 0; i--)
  {
    synonymContext = this._decreaseSynonymsCacheLevel(synonymContext, i);
    var cache = this._getSynonymCache(synonymContext);
    var synonyms = cache.synonyms[lowerText] || [];
    
    // de-duplicate synonyms and moreSynonyms and append.
    synonyms = synonyms.filter(function(syn) {return ret.indexOf(syn) < 0;});
    ret = ret.concat(synonyms);
    if (ret.length > this._maxSuggestedItems)
    {
      ret.length = this._maxSuggestedItems;
      break;
    }
  }
  
  return ret;
};

FndSearchSuggestBehavior.prototype._getAutocompleteFromSynonymCache = function(text)
{
  var ret = [];
  var textLen = text.length;
  var lowerText = text.toLowerCase();
  var synonymContext = this._getSynonymContext();
  var cacheLevel = this._getSynonymsCacheLevel(synonymContext);
  for (var i = cacheLevel; i >= 0; i--)
  {
    synonymContext = this._decreaseSynonymsCacheLevel(synonymContext, i);
    var cache = this._getSynonymCache(synonymContext);
    var autocomplete = cache.autocomplete;
    if (autocomplete && textLen < autocomplete.length)
    {
      var autocompleteMap = autocomplete[textLen];
      var autoCompletVals = autocompleteMap[lowerText] || [];
      // de-duplicate synonyms and moreSynonyms and append.
      autoCompletVals = autoCompletVals.filter(function(syn) {return ret.indexOf(syn) < 0;});
      ret = ret.concat(autoCompletVals);
    }
    
    if (ret.length > this._maxSuggestedItems)
    {
      ret.length = this._maxSuggestedItems;
      break;
    }
  }
  
  return ret;
};

/**
 * Get raw suggested items from the cache.
 * @param groupName code name of the group.
 * @param submittedValue the value submitted to get the suggestions.
 * @return unfiltered array of items, null if none found.
 */
FndSearchSuggestBehavior.prototype._getFromCache = function(groupName, submittedValue)
{
  var ret = this._getFromBLURCache(groupName, submittedValue);
  if (ret != null)
  {
    return ret;
  }
  ret = this._getFromFIELDCache(groupName);
  if (ret != null)
  {
    return ret;
  }
  ret = FndSearchSuggestBehavior._getFromPAGECache(groupName);
  return ret;
}


/**
 * Add suggesions to the appropriate cache.
 * @param submittedValue the value submitted to get the suggestions.
 * @param suggestedItemGroups, of the format:
 * {
 *   groupName1: { cacheDirective: FIELD,
 *                 items: [ {item1 content},
 *                          {item2 content},
 *                          ...
 *                          {itemn content}]
 *               },
 *   groupName2: { cacheDirective: FIELD,
 *                 items: [ {item1 content},
 *                          {item2 content},
 *                          ...
 *                          {itemn content}]
 *               }
 * }
 */
FndSearchSuggestBehavior.prototype._addToAppropriateCache = function(submittedValue, suggestedItemGroups)
{
  for (var groupName in suggestedItemGroups)
  {
    var suggestedItemGroup = suggestedItemGroups[groupName];
    var cacheDirective = suggestedItemGroup.cacheDirective;
    var suggestedItems = suggestedItemGroup.items;
    
    if ("PAGE" === cacheDirective)
    {
      FndSearchSuggestBehavior._addToPAGECache(groupName, suggestedItems);
    } 
    else if ("FIELD" === cacheDirective)
    {
      this._addToFIELDCache(groupName, suggestedItems);
    }
    else
    {
      this._addToBLURCache(groupName, submittedValue, suggestedItems);
    }
  }
};

FndSearchSuggestBehavior.prototype._addToQuickItemsCache = function(groupName, parentSuggestion, suggestedItems)
{
  // quick actions cache.  Cache of <groupName>_<item> -> Array of child items.
  var cacheKey = groupName.toUpperCase().concat(":").concat(parentSuggestion.toUpperCase());
  this._quickActionsCache[cacheKey] = suggestedItems;
};

FndSearchSuggestBehavior.prototype._getFromQuickItemsCache = function(groupName, parentSuggestion)
{
  var cacheKey = groupName.toUpperCase().concat(":").concat(parentSuggestion.toUpperCase());

  return this._quickActionsCache[cacheKey];
};

/**
 * Get the group metadata currently being used for this field.  It will contain a 
 * definition of all groups in order, their heading name, submit directive, icon etc.
 * It is set at behavior construction, or re-set due to server side personalizations
 * and pushed to the client.
 * @param groupName.
 */
FndSearchSuggestBehavior.prototype._getGroupMetatdataByGroupName = function(groupName)
{
  for (var index = 0; index < this._groupMetadata.length; index++)
  {
    var group = this._groupMetadata[index];
    if (groupName == group.name)
    {
      return group;
    }
  }
  return null;
};

/**
 * Is there data in any cache for the given args?
 * @param submittedValue text in search field.
 * @param groupName the group Name.
 * @return true if data is available in any cache for the data identified by
 * submittedValue and groupName.
 */
FndSearchSuggestBehavior.prototype._isDataInAnyCache = function(submittedValue, groupName)
{
  // Items in the BLUR cache are always current and correct.
  // Take them no matter what the intended cache directive.
  if (this._getFromBLURCache(groupName, submittedValue) != null)
  {
    return true;
  }
  // Similarly items in the field cache should be correct if there.
  if (this._getFromFIELDCache(groupName) != null)
  {
    return true;
  }
  // Items in the PAGE cache **may** be less preferred than those in a FIELD
  // cache, however as this cache may not be filled yet, we check the cache 
  // directive.
  var intendedCache = this._getGroupMetatdataByGroupName(groupName).cacheDirective;
  if (!("FIELD" == intendedCache || "NONE" == intendedCache))
  {
    if (FndSearchSuggestBehavior._getFromPAGECache(groupName) != null)
    {
      return true;
    }
  }

  return false;
};

/**
 * Get an array of group names (in order) that do not have any cached data.
 * This data will need to be fetched from the server.  This method ignores rest groups, as this data is fetched out of bands.
 * @param submittedValue the search field value.
 * @return an array, possibly empty, of groupNames to fetch from the server
 */
FndSearchSuggestBehavior.prototype._getUncachedGroupNames = function(submittedValue)
{
  var ret = [];
  if (this._singleSelectedGroupName != null)
  {
    if (!this._isDataInAnyCache(submittedValue, this._singleSelectedGroupName))
    {
      ret.push(this._singleSelectedGroupName);
    }
  }
  else
  {
    for (var index = 0; index < this._groupMetadata.length; index++)
    {
      var group = this._groupMetadata[index];
      var groupName = group.name;
      if (group.restMetadata || this._isDataInAnyCache(submittedValue, groupName))
      {
        continue;
      }
      ret.push(groupName);
    }
  }
  return ret;
};

/**
 * Is all the required data for the current set of suggestions in the caches somewhere,
 * that is can we show suggestions without a server hit.
 * @param submittedValue the search field value.
 * @return true is all data locally available, false otherwise.
 */
FndSearchSuggestBehavior.prototype._isAllDataInCache = function(submittedValue)
{
  var groupNames = this._getUncachedGroupNames(submittedValue);
  
  return groupNames.length == 0;
}

/**
 * Get the group names to show.
 * @return an array of group names in the order to show.
 */
FndSearchSuggestBehavior.prototype._getGroupNames = function()
{
  var ret = [];
  if (this._singleSelectedGroupName != null)
  {
    ret.push(this._singleSelectedGroupName);
  }
  else
  {
    for (var index = 0; index < this._groupMetadata.length; index++)
    {
      var group = this._groupMetadata[index];
      var groupName = group.name;
      ret.push(groupName);
    }
  }
  return ret;
};

/**
 * Is this group a quick actions group.
 * @param groupName code Name of a suggest group.
 * @return true if a quick actions group, false otherwise.  false if groupName is not a
 * known group.
 */
FndSearchSuggestBehavior.prototype._isQuickActionsGroup = function(groupName)
{
  for (var index = 0; index < this._groupMetadata.length; index++)
  {
    var group = this._groupMetadata[index];
    var gn = group.name;
    if (groupName == gn)
    {
      return group.quickActionGroup;
    }
  }
  
  // Should not get here.
  return false;
};

/**
 * Is this group a submit group (like a menu entry), or a keyword.
 * @param groupName code Name of a suggest group.
 * @return true if a submit group, false otherwise.  false if groupName is not a
 * known group.
 */
FndSearchSuggestBehavior.prototype._isSubmitGroup = function(groupName)
{
  for (var index = 0; index < this._groupMetadata.length; index++)
  {
    var group = this._groupMetadata[index];
    var gn = group.name;
    if (groupName == gn)
    {
      return group.submit;
    }
  }
  
  // Should not get here.
  return false;
}

FndSearchSuggestBehavior.prototype._addSuggestedItemsFromCache = function(groupName, submittedValue, isTop, filteredItems)
{
  var upperSubmittedValue = submittedValue.toUpperCase();
  // should hit FIELD or PAGE caches.
  var items = this._getFromCache(groupName, submittedValue);
  // Filter the items for top/match etc.
  if (!items)
  {
    return;
  }
  
  for (var i = 0; i < items.length; i++)
  {
    var item = items[i];
    // suggestedItem is the text the user sees.
    var suggestedItem = undefined;
    // suggestedId is the id sent to server on selection, often the same as 
    // suggestedItem, but may be a unique identifier.
    var suggestedId = undefined;
    var suggestedCount = undefined;
    var suggestedUrl = undefined;
    var suggestedIconUrl = undefined;
    var suggestionType = undefined; // TOP, BOTH etc
    var suggestedItemType = undefined;  // synonym, autocomplete or normal.
    var suggestedDescription = undefined;
    // Is this item a master suggestion for which there are details to fetch?
    var hasQuickActions = undefined;
    if (typeof item == 'string')
    {
      suggestedItem = item;
    }
    else
    {
      suggestedItem = item.n;
      suggestedId = item.i;
      suggestedCount = item.c;
      suggestedUrl = item.u;
      suggestedIconUrl = item.iu;
      suggestionType = item.st;
      suggestedItemType = item.t;
      suggestedDescription = item.d;
      hasQuickActions = item.qa;
    }
    if (!suggestionType)
    {
      suggestionType = "BOTH";
    }
    if (typeof suggestedId === "undefined")
    {
      suggestedId = suggestedItem;
    }
    if (typeof suggestedIconUrl === "undefined")
    {
      suggestedIconUrl = FndSearchSuggestBehavior._DEFAULT_BULLET;
    }    
    
    if (suggestionType === "ALWAYS_SHOW")
    {
      filteredItems.push(
      {
        n: suggestedItem,
        i: suggestedId,
        c: suggestedCount,
        u: suggestedUrl,
        iu: suggestedIconUrl,
        st: suggestionType,
        t: suggestedItemType,
        d: suggestedDescription,
        qa: hasQuickActions
      });
    }
    else
    {
      if (isTop)
      {
        if (suggestionType === "BOTH" || suggestionType === "TOP_ONLY")
        {
          filteredItems.push({
            n: suggestedItem,
            i: suggestedId,
            c: suggestedCount,
            u: suggestedUrl,
            iu: suggestedIconUrl,
            st: suggestionType,
            t: suggestedItemType,
            d: suggestedDescription,
            qa: hasQuickActions
          });
        }
      }
      else
      {
        // regular suggestions.
        if (suggestionType === "BOTH" || suggestionType === "FILTER_ONLY")
        {
          var upperSuggestedItem = suggestedItem.toUpperCase();
          // turn some 'some matched string' with submittedValue matched
          // into it's component parts so can create correct html nodes.
          // i.e. <span>some <b>matched</b>string</span>
          var boldIndex = upperSuggestedItem.indexOf(upperSubmittedValue);
          if (boldIndex != -1)
          {
            filteredItems.push({
              n: suggestedItem,
              i: suggestedId,
              c: suggestedCount,
              u: suggestedUrl,
              iu: suggestedIconUrl,
              st: suggestionType,
              t: suggestedItemType,
              d: suggestedDescription,
              qa: hasQuickActions,
              matchText: upperSubmittedValue
            });
          }
          else
          {
            // check description also.
            var upperSuggestedDescription = suggestedDescription ? suggestedDescription.toUpperCase() : "";
            boldIndex = upperSuggestedDescription.indexOf(upperSubmittedValue);
            if (boldIndex != -1)
            {
              filteredItems.push({
                n: suggestedItem,
                i: suggestedId,
                c: suggestedCount,
                u: suggestedUrl,
                iu: suggestedIconUrl,
                st: suggestionType,
                t: suggestedItemType,
                d: suggestedDescription,
                qa: hasQuickActions,
                matchText: upperSubmittedValue
              });
            }
          }
        }
      }
    }
    if (filteredItems.length >= this._maxSuggestedItems)
    {
      break;
    }
  }
}

/**
 * Add to filteredItemsArr all of the value in autoCompletValsArr and give them the
 * type type.
 * @param filteredItemsArr an array of suggestions to be added to.
 * @param autoCompletValsArr an array of String values.
 * @param type type of suggestion.
 * @param iconUrl url to icon if required.
 */
FndSearchSuggestBehavior.prototype._addToSuggestions = function(filteredItemsArr, autoCompletValsArr, type, iconUrl)
{
  if (autoCompletValsArr)
  {
    for (var i = 0; i < autoCompletValsArr.length; i++)
    {
      filteredItemsArr.push({"n": autoCompletValsArr[i],
                             "t": type,
                             "iu": iconUrl});
    }
  }
};

FndSearchSuggestBehavior.prototype._deDupSynonyms = function(autoCompletVals, synonyms)
{
  // de-duplicate synonyms and autocomplete.
  autoCompletVals = autoCompletVals.filter(function(i) {return synonyms.indexOf(i) < 0;});
  if (autoCompletVals.length === 1)
  {
    // re-run synonyms for autocomplete value.
    var autocompleteVal = autoCompletVals[0];
    var moreSynonyms = this._getSynonymsFromSynonymCache(autocompleteVal);
    // de-duplicate synonyms and moreSynonyms and append.
    synonyms = synonyms.filter(function(i) {return moreSynonyms.indexOf(i) < 0;});
    synonyms = synonyms.concat(moreSynonyms);
  }
  
  return synonyms;
};
  
/**
 * Get the suggested items from the cache.
 * This method will return suggestions for all groups leveled so there are no more 
 * than _maxSuggestedItems in total.
 * @param submittedValue the search field value.
 * @param isTop is this for top suggestions.
 * @return data to pass to the rendering code.
 */
FndSearchSuggestBehavior.prototype._getSuggestedItemsFromCache = function(submittedValue, isTop)
{
  var groupNames = this._getGroupNames();

  var index;
  var suggestions = [];
  var initialSizes = [];
  
  // autocomplete ...
  var synonymsEnabled = this._synonymsEnabled && !isTop;
  var autoCompletVals = !synonymsEnabled ? [] : this._getAutocompleteFromSynonymCache(submittedValue);
  var synonyms        = !synonymsEnabled ? [] : this._getSynonymsFromSynonymCache(submittedValue);

  // de-duplicate synonyms and autocomplete.
  if (synonymsEnabled)
  {
    synonyms = this._deDupSynonyms(autoCompletVals, synonyms);
  }
//  autoCompletVals = autoCompletVals.filter(function(i) {return synonyms.indexOf(i) < 0;});
//  if (autoCompletVals.length === 1)
//  {
//    // re-run synonyms for autocomplete value.
//    var autocompleteVal = autoCompletVals[0];
//    var moreSynonyms = !synonymsEnabled ? [] : this._getSynonymsFromSynonymCache(autocompleteVal);
//    // de-duplicate synonyms and moreSynonyms and append.
//    synonyms = synonyms.filter(function(i) {return moreSynonyms.indexOf(i) < 0;});
//    synonyms = synonyms.concat(moreSynonyms);
//  }
  
  var quickActionsGroupIndex = -1;
  var quickActionGroupItems = [];
  for (index = 0; index < groupNames.length; index++)
  {
    var groupName = groupNames[index];
    var submit = this._isSubmitGroup(groupName);
    var quickActionGroup = this._isQuickActionsGroup(groupName);
    var items = this._getFromBLURCache(groupName, submittedValue);
    var filteredItems = [];

    if (items != null)
    {
      // Take the values from the server as-is.  They should have been filtered
      // already, or deliberately unfiltered as the group developer requires.
      // defensive copy, as we will be truncating it down later.
      filteredItems = items.slice();
      if (filteredItems.length > this._maxSuggestedItems)
      {
        filteredItems.length = this._maxSuggestedItems;
      }
      if (!isTop)
      {
        filteredItems = this._normalizeSuggestList(filteredItems, submittedValue);
      }
    }
    else
    {
      var toTry = [submittedValue].concat(synonyms);
      var len = toTry.length;
      for (var i = 0; i < len; i++)
      {
        var suggestText = toTry[i];
        this._addSuggestedItemsFromCache(groupName, suggestText, isTop, filteredItems);
        if (filteredItems.length > this._maxSuggestedItems)
        {
          filteredItems.length = this._maxSuggestedItems;
          break;
        }
      }
    }
    
    
    if (this._formFactor === 'desktop' && quickActionGroup)
    {
      // Take this group out of the levelling as it will be shown on the right
      // at full size (capped at maxSuggestedItems).
      initialSizes.push(0);
      suggestions.push([]);
      quickActionsGroupIndex = index;
      quickActionGroupItems = filteredItems;
    }
    else
    {
      initialSizes.push(filteredItems.length);
      suggestions.push(filteredItems);
    }
  }
  
  // Need to run levelling algorithm over all groups.
  var actualSumSize = this._runLevelling(this._maxSuggestedItems, suggestions);
  var finalSizes = [];
  for (var fsI = 0; fsI < suggestions.length; fsI++)
  {
    finalSizes.push(suggestions[fsI].length);
  }
  if (this._formFactor === 'desktop' && quickActionGroup)
  {
    // Add the quick items group back at maximum size.
    suggestions[quickActionsGroupIndex] = quickActionGroupItems;
  }
  
  // Now build the return object.  Is it an array with groups in show order.
  var ret = [];
  
  if (this._showSynonyms)
  {
    // autocomplete and synonyms on keywords - these are shown at the top of 
    // autosuggest independent of the defined groups ...
    // autocomplete ...
    var autocompleteArr = [];
    this._addToSuggestions(autocompleteArr, autoCompletVals, 
                           FndSearchSuggestBehavior._SUGGESTED_ITEM_TYPE_AUTOCOMPLETE,
                           FndSearchSuggestBehavior._SELECT_AUTOCOMPLETE);
    
    // synonyms ...
    var synonymsArr = [];
    this._addToSuggestions(synonymsArr, synonyms, 
                           FndSearchSuggestBehavior._SUGGESTED_ITEM_TYPE_SYNONYM,
                           FndSearchSuggestBehavior._SELECT_AUTOCOMPLETE);

    // trim the autocomplete and synonyms to some reasonable size.
    var maxSize = this._maxSuggestedItems + 10 - actualSumSize;
    var genItems = [autocompleteArr, synonymsArr];
    this._runLevelling(maxSize, genItems); 
    
    if (autocompleteArr.length > 0)
    {
      ret.push( 
        {
          "name": "autocomplete",
          "displayName": "autocomplete",
          "submit": false,
          "placeItemInField": true,
          "placeItemIdInField": false,
          "groupHeading": null,
          "icon": null,
          "headerMessage": null,
          "items": autocompleteArr,
          "quickActionGroup": false,
          "suggestOnSelectedItem": true,
          "hasDetailItems": false,
          "imageStyleClass": null,
          "detailImageStyleClass": null,
          "restMetadata": null
        });
    }
    if (synonymsArr.length > 0)
    {
      ret.push(
        {
          "name": "synonyms",
          "displayName": "synonyms",
          "submit": false,
          "placeItemInField": true,
          "placeItemIdInField": false,
          "groupHeading": null,
          "icon": null,
          "headerMessage": null,
          "items": synonymsArr,
          "quickActionGroup": false,
          "suggestOnSelectedItem": true,
          "hasDetailItems": false,
          "imageStyleClass": null,
          "detailImageStyleClass": null,
          "restMetadata": null
        });
    }
  }
  
  for (index = 0; index < groupNames.length; index++)
  {
    var suggestionsLen = suggestions[index].length;
    if (suggestionsLen > 0)
    {
      var gn = groupNames[index];
      var groupMetadata = this._getGroupMetatdataByGroupName(gn);
      var headerMessage = null;
      if (this._singleSelectedGroupName)
      {
        headerMessage = this._getMlsString("showLessItems");
      }
      else
      {
        if (initialSizes[index] > finalSizes[index])
        {
          headerMessage = this._getMlsString("showMoreItems");
        }
      }
      ret.push( 
        {
          "name": groupMetadata.name,
          "displayName": groupMetadata.displayName,
          "submit": groupMetadata.submit,
          "placeItemInField": groupMetadata.placeItemInField,
          "placeItemIdInField": groupMetadata.placeItemIdInField,
          "groupHeading": groupMetadata.groupHeading,
          "icon": groupMetadata.icon,
          "headerMessage": headerMessage,
          "items": suggestions[index],
          "quickActionGroup": groupMetadata.quickActionGroup,
          "suggestOnSelectedItem": groupMetadata.suggestOnSelectedItem,
          "hasDetailItems": groupMetadata.hasDetailItems,
          "imageStyleClass": groupMetadata.imageStyleClass,
          "detailImageStyleClass": groupMetadata.detailImageStyleClass,
          "restMetadata": groupMetadata.restMetadata
        });
    }
  }
  
  return ret;
};

/**
 * Take the Array of filteredItems which may be raw server values and turn them into
 * a known object Array.
 * @param filteredItems an Array of Strings or Objects representing suggestions.
 * @param submittedValue the value in the text field the filtered items are for.
 * @return an Array of Object in standard format representing suggestions.
 */
FndSearchSuggestBehavior.prototype._normalizeSuggestList = function(filteredItems, submittedValue)
{
  var ret = [];
  var upperSubmittedValue = submittedValue.toUpperCase();
  
  for (var index = 0; index < filteredItems.length; index++)
  {
    var item = filteredItems[index];
    if (typeof item === 'string')
    {
      ret.push({
              n: item,
              matchText: upperSubmittedValue
            });
    }
    else
    {
      ret.push({
              n: item.n,
              i: item.i,
              c: item.c,
              u: item.u,
              iu: item.iu,
              st: item.st,
              t: item.t,
              d: item.d,
              qa: item.qa,
              matchText: upperSubmittedValue
            });
    }
  }
  return ret;
};

/**
 * Get the global quick actions group including data.
 * @param component search field component.
 * @param submittedValue value in search field.
 * @return single quick action group data, or null. 
 */
FndSearchSuggestBehavior.prototype._getGlobalQuickActions = function(component, submittedValue)
{
  var groupNames = this._getGroupNames();

  for (var index = 0; index < groupNames.length; index++)
  {
    var groupName = groupNames[index];
    var groupMetadata = this._getGroupMetatdataByGroupName(groupName);
    var quickActionGroup = groupMetadata.quickActionGroup;
    if (quickActionGroup)
    {
      // autocomplete ...
      var isTop = this._topSuggestions && (submittedValue.length < this._minCharCount || !this._getSearchFieldMode(component));
      var synonymsEnabled = this._synonymsEnabled && !isTop;
      var autoCompletVals = !synonymsEnabled ? [] : this._getAutocompleteFromSynonymCache(submittedValue);
      var synonyms        = !synonymsEnabled ? [] : this._getSynonymsFromSynonymCache(submittedValue);
    
      // de-duplicate synonyms and autocomplete.
      if (synonymsEnabled)
      {
        synonyms = this._deDupSynonyms(autoCompletVals, synonyms);
      }
      var filteredItems = [];
      
      var toTry = [submittedValue].concat(synonyms);
      for (var i = 0; i < toTry.length; i++)
      {
        var suggestText = toTry[i];
        this._addSuggestedItemsFromCache(groupName, suggestText, isTop, filteredItems);
      }
      
      return {
          "name": groupMetadata.name,
          "displayName": groupMetadata.displayName,
          "submit": groupMetadata.submit,
          "placeItemInField": groupMetadata.placeItemInField,
          "placeItemIdInField": groupMetadata.placeItemIdInField,
          "groupHeading": groupMetadata.groupHeading,
          "icon": groupMetadata.icon,
          "headerMessage": "",
          "items": filteredItems,
          "quickActionGroup": groupMetadata.quickActionGroup,
          "suggestOnSelectedItem": groupMetadata.suggestOnSelectedItem,
          "hasDetailItems": groupMetadata.hasDetailItems,
          "imageStyleClass": groupMetadata.imageStyleClass,
          "detailImageStyleClass": groupMetadata.detailImageStyleClass,
          "restMetadata": groupMetadata.restMetadata
        };
    }
  }
  
  return null;
};


/**
 * Run levelling over items in arr.  The sum total size of all arr entries will be
 * largestTotalSize, but may be smaller.
 * @param largestTotalSize maximum total size af all leveled arr items.
 * @arr an array of 1 or more items to be leveled. i.e. an array of arrays.  These
 * sub-arrays will be modified (shortened).
 * @return sum total of all values left in arr.  will be >=0 and <= largestTotalSize.
 */
FndSearchSuggestBehavior.prototype._runLevelling = function(largestTotalSize, arr)
{
  var totalSize = 0;
  for (var i = 0; i < arr.length; i++)
  {
    var lenI = arr[i].length;
    if (lenI > largestTotalSize)
    {
      lenI = largestTotalSize;
      arr[i].length = largestTotalSize;
    }
    totalSize += lenI;
  }
  
  var currentLargestSize = largestTotalSize;
  // Need to run levelling algorithm over all groups.
  while (totalSize > largestTotalSize)
  {
    // adjust in reverse order, so user see the most.
    for (var j = arr.length - 1; j >= 0; j--)
    {
      if (arr[j].length == currentLargestSize)
      {
        arr[j].length = arr[j].length - 1;
        totalSize--;
        if (totalSize <= largestTotalSize)
        {
          break;
        }
      }
    }
    currentLargestSize--;
  }
  
  return totalSize;
};

/**
 * Perform suggest on the passed component.  This will grab data from the 
 * appropriate caches and either show the suggestion popup directly, or send 
 * a message to get the data to the server and the popup will be shown on callback.
 * This method will determine top suggestions etc, it is the top-most api you can
 * call for displaying suggestions.
 * @param component the component to suggest on.
 */
FndSearchSuggestBehavior.prototype._suggestOn = function(component)
{
  // Grab the value of the input text and submit.
  var targetNode = FndSearchSuggestBehavior._getContentNode(component);
  var typedValue = targetNode.value;
  if (typedValue.length >= this._minCharCount)
  {
    this._autoSuggest(component);
  }
  else if (this._topSuggestions)
  {
    this._topSuggest(component);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Methods called from the server.
////////////////////////////////////////////////////////////////////////////////

/**
 * Set the group metadata for the search field with given clientId.  This method
 * is called from the server in repsonses to changes (enable/disable or ordering)
 * to the groups configuration.  Suggestions will be shown to the user.
 * @param clientId the client Id of the component in question.
 * @param groupMetadata a JSON structure of group metadata, identical to what is 
 * passed in the constructor.
 */
FndSearchSuggestBehavior.setGroupsMetadataAndSuggest = function(clientId, groupMetadata)
{
  var page = AdfPage.PAGE;
  var component = page.findComponent(clientId);
  if (component)
  {
    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(component);
    behavior._groupMetadata = groupMetadata;
    behavior._singleSelectedGroupName = null;
    // If there are groups configured by rest, aggressively fetch them now.
    behavior._fetchRestGroupsIfNeeded();
    // and suggest.  Any REST items will display when available dependent on when 
    // they finish downloading.
    behavior._suggestOn(component);
    component.focus();
  }
};

/**
 * Re-suggest the field with the given client id.  A method that can be called
 * from the server, essentially a static version of _suggestOn(component).
 * @param clientId the client Id of the component in question.
 */
FndSearchSuggestBehavior.suggestOn = function(clientId)
{
  var page = AdfPage.PAGE;
  var component = page.findComponent(clientId);
  if (component)
  {
    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(component);
    behavior._singleSelectedGroupName = null;
    behavior._suggestOn(component);
    component.focus();
  }
};

/**
 * A push api for calling from the server to set cache items in the component's
 * FIELD cache.  Data is of the format:
 * {
 *   groupName1: { cacheDirective: FIELD,
 *                 items: [ {item1 content},
 *                          {item2 content},
 *                          ...
 *                          {itemn content}]
 *               },
 *   groupName2: { cacheDirective: FIELD,
 *                 items: [ {item1 content},
 *                          {item2 content},
 *                          ...
 *                          {itemn content}]
 *               }
 * }
 * @param clientId client id of search field.
 * @param suggestedItemGroups data to cache.
 */
FndSearchSuggestBehavior.fieldCache = function(clientId, suggestedItemGroups)
{
  var page = AdfPage.PAGE;
  var component = page.findComponent(clientId);
  if (component)
  {
    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(component);
    for (var groupName in suggestedItemGroups)
    {
      var suggestedItemGroup = suggestedItemGroups[groupName];
      var cacheDirective = suggestedItemGroup.cacheDirective;
      var suggestedItems = suggestedItemGroup.items;
      
      behavior._addToFIELDCache(groupName, suggestedItems);
    }
  }
};

/**
 * A push api for calling from the server to set cache items in the
 * PAGE cache.  Data is of the format:
 * {
 *   groupName1: { cacheDirective: FIELD,
 *                 items: [ {item1 content},
 *                          {item2 content},
 *                          ...
 *                          {itemn content}]
 *               },
 *   groupName2: { cacheDirective: FIELD,
 *                 items: [ {item1 content},
 *                          {item2 content},
 *                          ...
 *                          {itemn content}]
 *               }
 * }
 * @param suggestedItemGroups data to cache.
 */
FndSearchSuggestBehavior.pageCache = function(suggestedItemGroups)
{
  for (var groupName in suggestedItemGroups)
  {
    var suggestedItemGroup = suggestedItemGroups[groupName];
    var cacheDirective = suggestedItemGroup.cacheDirective;
    var suggestedItems = suggestedItemGroup.items;
    
    FndSearchSuggestBehavior._addToPAGECache(groupName, suggestedItems);
  }
};

/**
 * The function gets called from server in response to customEvent of type 
 * SearchSuggest and SearchSuggestTopSuggestions to show the suggestion popup.
 * It is called from the middle tier.
 * @param clientId client id of search field.
 * @param submittedValue value the suggestions are for.
 * @param suggestedItems items to suggest on.
 */
FndSearchSuggestBehavior.showSearchSuggestPopup = function(clientId, submittedValue, suggestedItems)
{
  var page = AdfPage.PAGE;
  var component = page.findComponent(clientId);
  if (component)
  {
    // Value is what we see in the field.  The user is not typing at this point.
    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(component);
    
    // cache the values.
    behavior._addToAppropriateCache(submittedValue, suggestedItems);
    // Build appropriate content to show.
    var isTop = behavior._topSuggestions && (submittedValue.length < behavior._minCharCount || !behavior._getSearchFieldMode(component));
    var suggestionsToShow = behavior._getSuggestedItemsFromCache(submittedValue, isTop);
    behavior._showContent(component, submittedValue, suggestionsToShow);
  }
}

/**
 * The function gets called from server when there are no top suggestions.
 * @param clientId client id of search field.
 */
FndSearchSuggestBehavior.closeTopSuggestPopup = function(clientId)
{
  var page = AdfPage.PAGE;
  var component = page.findComponent(clientId);
  if (component)
  {
    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(component);
    behavior._hideSuggestPopup(component);
  }
}

/**
 * The function gets called from server in response to customEvent of type _autoSuggest
 * when the suggestedItems size is 0 to clear the busy status.
 * @param clientId client id of search field.
 */
FndSearchSuggestBehavior.clearBusyStatus = function(clientId)
{
  var page = AdfPage.PAGE;
  var component = page.findComponent(clientId);
  if (component)
  {
    var contentNode = FndSearchSuggestBehavior._getContentNode(component);
    var laf = AdfPage.PAGE.getLookAndFeel();
    var busyStyle = laf.getStyleClass(FndSearchSuggestBehavior._BUSY_STYLE_CLASS);
    FndSearchSuggestBehavior._removeCSSClassName(contentNode, busyStyle);
  }
}

/**
 * Focus the first Quick Actions link (assumed to be in screen reader mode where it
 * is focusable), if none then do nothing.
 */
FndSearchSuggestBehavior.prototype._focusFirstSRQuickAction = function()
{
  var firstItem = document.querySelector("ul.FndSearchSuggestQuickActionsList span[role='button']");
  if (firstItem) {
   firstItem.focus();
  }
}

/**
 * Convert a spacebar or enter keypress on the suggestion or show-more/less header in screen
 * reader mode into a click for the search field code to handle (this is where
 * all the logic is).
 */
FndSearchSuggestBehavior._convertEnterToClick = function(event)
{
  // turn enter and space into a click for screen reader support.
  if (event.keyCode === 13 || event.keyCode == 32) {
    event.preventDefault();
    event.currentTarget.click();
  }
}

/**
 * Show the busy status icon in the search field.
 */
FndSearchSuggestBehavior.prototype._showBusyStatus = function(component)
{
  var targetNode = FndSearchSuggestBehavior._getContentNode(component);
  var laf = AdfPage.PAGE.getLookAndFeel();
  var busyStyle = laf.getStyleClass(FndSearchSuggestBehavior._BUSY_STYLE_CLASS);
  FndSearchSuggestBehavior._addCSSClassName(targetNode, busyStyle);
}

/**
 * The function gets called from server in response to customEvent of type 
 * SearchSuggestQuickActionParentSelection to show the child suggestions, it is expected
 * that the results popup is open, but this cannot be assumed.
 * It is called from the middle tier.
 * @param clientId client id of search field.
 * @param groupName name of the Group the parentSuggestion was seleced for
 * @param parentSuggestion the selected parent suggestion within groupName.
 * @param suggestedItems items to suggest on.
 */
FndSearchSuggestBehavior.setQuickActionChildren = function(clientId, groupName, parentSuggestion, suggestedItems)
{
  var page = AdfPage.PAGE;
  var component = page.findComponent(clientId);
  if (component)
  {
    // Value is what we see in the field.  The user is not typing at this point.
    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(component);
    
    // cache the values.
    behavior._addToQuickItemsCache(groupName, parentSuggestion, suggestedItems);
    behavior._showQuickActionChildren(component, groupName, parentSuggestion, suggestedItems, null);
  }
}

////////////////////////////////////////////////////////////////////////////////
// General Methods.
////////////////////////////////////////////////////////////////////////////////


/**
 * Initialize the search button client listener, responsible for intercepting the
 * search button action (click/enter press) and turning it into an 
 * AdfCustomEvent of type "SearchSuggestSelection" by searchSuggestBehavior 
 * triggering the selection of a submit style selection when the search field
 * contains menu entry values and not keywords.
 * This method is idempodent and can be called repeatedly, however do not call
 * it within component constructors as it obtains component ids which are not
 * available at this time.
 * @param searchFieldComponent the search field component.
 */
FndSearchSuggestBehavior.prototype._initializeSearchButtonListener = function(searchFieldComponent)
{
  if (this._submitOnEnterComponentId != "")
  {
    // register an action client event on the search button.
    var searchButton = searchFieldComponent.findComponent(this._submitOnEnterComponentId);
    if (searchButton)
    {
      var existingSearchFieldId = searchButton.getProperty("searchFieldId");
      if (!existingSearchFieldId)
      {
        // only register if not already done. If the search field is pprd independently
        // of the search button it is possible for multiple registrations.
        var searchfieldId = searchFieldComponent.getId();
        searchButton.setProperty("searchFieldId", searchfieldId);
        searchButton.addEventListener(AdfActionEvent.ACTION_EVENT_TYPE, 
                                      FndSearchSuggestBehavior.processSearchButtonClick, 
                                      this);
      }
    }
  }
}


FndSearchSuggestBehavior.prototype._fireFocus = function(componentEvent)
{
  // componentEvent.cancel();
  // componentEvent.stopBubbling();
  FndSearchSuggestBehavior._log("_fireFocus");

  var component = componentEvent.getSource();
  this._initializeSearchButtonListener(component);
  if (!this._auto_complete_disabled) 
  {    
    if (component && component instanceof AdfUIEditableValue)
    {
      var peer = component.getPeer();
      peer.bind(component);
      if (peer.disableBrowserAutoComplete) 
      {
        peer.disableBrowserAutoComplete(component);
      }
    }
    this._auto_complete_disabled = true;
  }
  
  this._sendInitializeEventIfNeeded(component);
  
  if (!this._useGeneratedSuggestPopup)
  {
    // Initialize the mouse overs in the foreign panel.  We reset this on every 
    // click into the field, as when in a popup the panel is re-rendered and we 
    // loose our listeners.
    var panel = component.findComponent(this._inlineSuggestionComponentId);
    if (panel)
    {
      if (AdfPage.PAGE.isScreenReaderMode())
      {
        // Work around issue where 2 click listenrs are registered in SR mode,
        // the first for the base page field, the second for the duplicate search
        // field in the popup.  As the removeEventListenr does an equality check on the 
        // method, need to go under the hood to clear both (we do not have reference
        // to the base page field ssb method here).
        var listeners = panel.getProperty("clientListeners");
        if (listeners && listeners["click"]) {
          delete listeners["click"];
        }
      }
      else
      {
        panel.removeEventListener(AdfUIInputEvent.CLICK_EVENT_TYPE, this._fireClickInPanel, this);
      }
      panel.addEventListener(AdfUIInputEvent.CLICK_EVENT_TYPE, this._fireClickInPanel, this);
    }
  }
}

FndSearchSuggestBehavior.prototype._selectComponentText = function(component) 
{
  if (!this._hasHilightedSearchText)
  {
    var contentNode = FndSearchSuggestBehavior._getContentNode(component);
    // if (contentNode.selectionStart && contentNode.selectionEnd && contentNode.value.length)
    // {
    //   if (contentNode.selectionStart == contentNode.selectionEnd &&
    //       contentNode.selectionEnd != contentNode.value.length)
    //   {
    //     contentNode.select();
    //   }
    // }
    // else
    // {
      contentNode.select();
    // }
    this._hasHilightedSearchText = true;
  }
}

/**
 * Handles the click event inside search component which is also responsible for 
 * the search clear in supported browsers (chrome).
 * @param componentEvent event on inputText.
 */
FndSearchSuggestBehavior.prototype._fireClick = function(componentEvent)
{
  // componentEvent.cancel();
  // componentEvent.stopBubbling();
  // Who caused the event - do not re-run everything based on clicks internal 
  // to the popup window.
  FndSearchSuggestBehavior._log("_fireClick");
  var nativeEvent = componentEvent.getNativeEventTarget();
  var nodeName = nativeEvent.nodeName;
  if (nodeName === "INPUT")
  {
    var component = componentEvent.getSource();
    this._processClick(component);
  }
}

/**
 * Process the click in the component.
 * @param component the af:inputText client component.
 */
FndSearchSuggestBehavior.prototype._processClick = function(component)
{
  if (component && component instanceof AdfUIEditableValue)
  {
    if (this._textSelection == "click")
    {
      this._selectComponentText(component);
    }
    var peer = component.getPeer();
    peer.bind(component);

    var contentNode = FndSearchSuggestBehavior._getContentNode(component);
    if (contentNode)
    {
      this._showLoadingSuggestions(component);
      var value = contentNode.value;
      if (this._topSuggestions)
      {
        if (value.length < this._minCharCount || !this._getSearchFieldMode(component))
        {
          // Send top selection.
          this._topSuggest(component);
        }
        else
        {
          // Send normal autosuggest request for content in the field.
          this._autoSuggest(component);
        }
      }
      else
      {
        if (value.length < this._minCharCount && this._formFactor === 'desktop')
        {
          this._hideSuggestPopup(component);
        }
      }
    }
  }
}

/**
 * Send the initialize event if it has not been sent before.
 * @param component search field component.
 */
FndSearchSuggestBehavior.prototype._sendInitializeEventIfNeeded = function(component)
{
  // WARNING: Implementation Note.
  // If there are validation errors/faces messages added on the search field, the 
  // Search field component and behavior will be refreshed from the server, this 
  // behavior is re-initialized using the constructor from cached server-side data 
  // (the Tag is not called again), then in this case the _initializedServer 
  // variable value will be reset.  This means if it is false, the server may 
  // indeed be initialized and we do an extra round trip.  This in itself is not 
  // so bad, however faces will send a AdfPage.PAGE.clearMessages(); at the end 
  // of the and initialize message and clobber the shown message (it will flicker 
  // and quickly disappear).
  // To avoid this we set a page variable if initializedServer is false and use 
  // this as well.  The risk is that this ssb may end up in a tab or some other 
  // structure that is closed/recreated that re-uses the clientId,
  // meaning we get a true value when there is no server state.  This
  // should not matter as the initial suggest call will do the initialization if 
  // it has not already been done.

  if (!this._initializedServer)
  {
    var page = AdfPage.PAGE;
    var clientId = component.getClientId();
    var key = "FndSSB_" + clientId + "_" + "serverInitialized";
    var ret = page.getPageProperty(key);
    if (typeof ret === "undefined")
    {
      var isRequired = component.getProperty("required");
      var value = component.getValue();
      if (!isRequired || (isRequired && value && value.length > 0))
      {
        // Cannot sent messages from required empty fields, it will envoke required
        // client validation.
        this._sendInitializeEvent(component);
        this._initializedServer = true;
        page.setPageProperty(key, "true");
      }
    }
  }
}

/**
 * Send the initialize event.  No tests are done, this method always sends the event.
 * @param component search field component.
 */
FndSearchSuggestBehavior.prototype._sendInitializeEvent = function(component)
{  
  // Do not force init on required fields, the init event forces required 
  // validation on client just by clicking into the field.
//      var initEvent = new AdfCustomEvent(source, "GlobalSearchAutoSuggestInit", {}, true);
//      initEvent.noResponseExpected();
//      initEvent.stopBubbling();
//      initEvent.queue();
  AdfCustomEvent.queue(component,
                       "SearchSuggestInit", 
                       {}, 
                       true);
}

/**
 *  Send top selection event.
 *  params:
 *  @param component - required,
 */
FndSearchSuggestBehavior.prototype._sendTopSelectionsEvent = function(component)
{
  var targetNode = FndSearchSuggestBehavior._getContentNode(component);
  var value = targetNode.value;
  var isRequired = component.getProperty("required");
  // do not send if required and empty string.
  if (/\S/.test(value) || !isRequired)
  {
    var groupNames = this._getUncachedGroupNames(value);
    AdfCustomEvent.queue(component,
                         "SearchSuggestTopSuggestions", 
                         {submittedValue:value, groupName:groupNames}, 
                         true, true);
    this._showBusyStatus(component);
    AdfPage.PAGE.scheduleTimer(this, 
                               this._clearBusyStatus,
                               component.getClientId(),
                               this._typeDelay);
  }
}

FndSearchSuggestBehavior.prototype._sendSearchSelectionEvent = function(component,
                                                                        name,
                                                                        value)
{
  var agentIsIE = AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM;
  var wid = agentIsIE ? document.body.clientWidth : window.innerWidth;
  var hei = agentIsIE ? document.body.clientHeight : window.innerHeight;
  
  AdfCustomEvent.queue(component, "SearchSuggestSelection", 
  {
    n : name, v : value, width : wid, height : hei
  }, this._immediateSelection);
};

FndSearchSuggestBehavior.prototype._sendSearchSuggestQuickActionParentSelectionEvent = function(component,
                                                                        name,
                                                                        value)
{
  var agentIsIE = AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM;
  var wid = agentIsIE ? document.body.clientWidth : window.innerWidth;
  var hei = agentIsIE ? document.body.clientHeight : window.innerHeight;
  
  AdfCustomEvent.queue(component, "SearchSuggestQuickActionParentSelection", 
  {
    n : name, v : value, width : wid, height : hei
  }, true);
};


/**
 * Toggle the selection of a 'Show More' or 'Show Less' header link.  This toggle
 * should never send to the server, but implicitly retrieve data from local caches.
 * @param component Autosuggest component.
 * @param groupName code name of group.
 */
FndSearchSuggestBehavior.prototype._toggleSingeGroupSelection = function(component, groupName)
{
  if (!this._singleSelectedGroupName)
  {
    this._singleSelectedGroupName = groupName;
  }
  else 
  {
    this._singleSelectedGroupName = null;
  }
  this._suggestOn(component);
};

/**
 * Handler for the blur event which is fired when we leave the search field.
 */
FndSearchSuggestBehavior.prototype._fireBlur = function(componentEvent)
{
  this._hasHilightedSearchText = false;
  this._cancelTimer();
  // Set the focus back to search field after popup is opened.
  var component = componentEvent.getSource();
  var peer = component.getPeer();
  peer.bind(component);
  if(peer.isPopupVisible(component, FndSearchSuggestBehavior._POPUP_PANEL_ID) && this._useGeneratedSuggestPopup)
  {
    setTimeout(function(){component.focus()},1);
    //component.focus()
  }
  else
  {
    // Do the blur actions on a callback so that other code can cancel it in cases
    // where we are just clicking about the popup/inline content.
    // The number is a bit of an art, it needs to be long enough for other events 
    // to fire and have chance to cancel the timer.
    this._blurTimerId = page.scheduleTimer(this, 
                                           this._doBlur, 
                                           componentEvent.getSource(), 1500);
  } 
};

FndSearchSuggestBehavior.prototype._doBlur = function(component)
{
  delete this._blurTimerId;
  FndSearchSuggestBehavior._log("_doBlur");

  if (this._useGeneratedSuggestPopup)
  {
    // normal autosuggest, leaving the field means we have left the entire suggest solution.
    this._clearBLURCache();
  }
  else
  {
    // if leaving an inline field, make sure to replace the suggestions with original
    // content if there is some.
    if (this._inlineReplaceComponentId && this._inlineReplaceComponentId != "")
    {
      // BACKWARDS COMPATIBILITY for FIN.
      // this._showInline(component, null);
    }
    if (!this._adfPopupId)
    {
      // if we delegate to a custom af:popup, then let it clear the blur cache, only
      // it knows when control leaves consolidated the search up.
      this._clearBLURCache();      
    }
  }
  
};

/**
 * Focuses the page on the correct component, either the passed search Component,
 * or the component given by the postSelectionFocusComponentId attribute.
 */
FndSearchSuggestBehavior.prototype._setFocusOnSelection = function(component)
{
  if (this._postSelectionFocusComponentId != "")
  {
    var focusComp = component.findComponent(this._postSelectionFocusComponentId);
    if (focusComp)
    {
      focusComp.focus();
    }
    else
    {
      component.focus();
    }    
  }
  else 
  {
    component.focus();
  }
}

/**
 * Set the value of the component to value or displayValue dependent on the
 * boolean placeItemValueInField.
 * @param component the SearchField component.
 * @param placeItemValueInField boolean do we use value or displayValue.
 * @param value the identifying value.
 * @param displayValue the display Value.
 */
FndSearchSuggestBehavior.prototype._setComponentValue = function(component,
                                                                 placeItemValueInField, 
                                                                 value, 
                                                                 displayValue)
{
  // Implementation Note.
  // ADF sends the submitted value of the component to the server, we make sure 
  // the HTML DOM is set to the value we want, else unsubmitted changes will be
  // sent.  There is no way to component.setSubmittedValue(value), it is secured.
  // Usecase: click in field that has a value in it "Default Criteria"
  // - backspace a few characters --> "Default Criter".
  // - nothing is sent to the server.
  // - let searchSuggest come up and pick a value from the list that is to be
  //   placed in the field, say "Default Criteria" again.
  // - Without the contentNode.value = code the search field will remain with the
  //   backspaced value "Default Criter", this value will be sent to the server (why does
  //   ADF send these form values on a AdfCustomEvent with partialSubmit=true?)
  //   and the sever value will be changed (value change listeners will fire etc
  //   even if the value selected from suggestions is the same as the original 
  //   field value as it should be in this case, but it sees "Default Criteria" -> Default Criter".
  var contentNode = FndSearchSuggestBehavior._getContentNode(component);
  if (placeItemValueInField)
  {
    // Only overwrite the value if not in group mode, or it is and the value is
    // not set to the current group value, i.e. no change.  
    // This prevents interference when the field text has been update but the meaning
    // of the value is the same.  This is the listSearch ' - Updated' use case.
    if (!(!this._getSearchFieldMode(component) && value == this._getSearchFieldModeGroupValue(component)))
    {
      component.setValue(value);
      contentNode.value = value;
    }
  }
  else
  {
    // Only overwrite the value if not in group mode, or it is and the value is
    // not set to the current group value, i.e. no change.  
    // This prevents interference when the field text has been update but the meaning
    // of the value is the same.  This is the listSearch ' - Updated' use case.
    if (!(!this._getSearchFieldMode(component) && displayValue == this._getSearchFieldModeGroupValue(component)))
    {
      component.setValue(displayValue);
      contentNode.value = displayValue;
    }
  }
}

/**
 * Handles the click event inside autoSuggest popup.
 * Sets the value selected as display value of the component.
 */
FndSearchSuggestBehavior.prototype._fireMouseDownInPopup = function(componentEvent)
{
  FndSearchSuggestBehavior._log("_fireMouseDownInPopup enter.");
  var component = componentEvent.getSource();  // search field.
  if (component && component instanceof AdfUIEditableValue) 
  {
    var peer = component.getPeer();
    peer.bind(component);
    if (peer.isPopupVisible(component, FndSearchSuggestBehavior._POPUP_PANEL_ID)) 
    {
      FndSearchSuggestBehavior._log("_fireMouseDownInPopup");
      if (this._blurTimerId)
      {
        // As we are only temporarly leaving the search field, clobber the blur callback.
        AdfPage.PAGE.cancelTimer(this._blurTimerId);
        delete this._blurTimerId;
      }
      var clickedDomElem = componentEvent.getNativeEventTarget();
      var LINode = this._getParentLINode(clickedDomElem);
      var value = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
      var displayValue = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_DISPLAY_VALUE_ATTR);
      var autocomplete = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_AUTOCOMPLETE_ATTR);
      var name = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_GROUP_NAME_ATTR);
      var clickableHeader = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_IS_CLICKABLE_HEADER_ATTR);
      var submit = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_SUBMIT_ATTR);
      var placeItemInField = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_IN_FIELD_ATTR);
      var placeItemIdInField = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_ID_IN_FIELD_ATTR);
      var suggestOnSelectedItem = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_SUGGEST_ON_SELECTED_ITEM_ATTR);
      
      var searchForLink = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_IS_SEARCH_FOR_LINK_ATTR);
      var quickActionsParent = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_HAS_QUICK_ACTIONS_ATTR);
      var clickedQAText = this._isInQAParentDivTree(clickedDomElem);
      FndSearchSuggestBehavior.advertiseClickOrigin(component, component);
      
      if (value && value.length > 0)
      {
        this._visuallySelectItemNode(LINode);
        if (quickActionsParent && clickedQAText !== 'true')
        {
          // Clicking anywhere in quick action parent *except* the text/description
          // discloses the children.  Clicking the text is same as selecting the item.
          if (!this._isTouchScreen())
          {
            // On touchscreen devices this will hide/show to keyboard overlay 
            // which is annoying, so suppress it.
            this._setFocusOnSelection(component);
          }
          this._doQuickAction(component, name, value, LINode);
          return;
        }
        if (autocomplete)
        {
          this._setComponentValue(component, true, value, displayValue);
          this._suggestOn(component);
          return;
        }
        if (suggestOnSelectedItem)
        {
          this._setComponentValue(component, "true" == placeItemIdInField, value, displayValue);
          this._suggestOn(component);
          // Do a submit to the server to save this autosuggestion.
          this._sendSearchSelectionEvent(component, name, value);
          this._setFocusOnSelection(component);
          return;
        }
        peer.hidePopup(component, FndSearchSuggestBehavior._POPUP_PANEL_ID);
        this._setFocusOnSelection(component);
        if ("true" == placeItemInField)
        {
          this._setComponentValue(component, "true" == placeItemIdInField, value, displayValue);
          this._setSearchFieldMode(component, "false" == submit, name, value);
        }
        if ("true" == submit)
        {
          // Do a submit to the server.
          this._sendSearchSelectionEvent(component, name, value);          
        }
        else
        {
          // keywords ...
          if (this._submitKeywordsOnSelection)
          {
            // The value will already be in the search field, submit it.
            this._submitSearch(componentEvent);
          }
        }
      }
      else if (name && clickableHeader)
      {
        // No value, but if there is a name, this is the toggle of a heading.
        this._toggleSingeGroupSelection(component, name);
        if (!this._isTouchScreen())
        {
          // On touchscreen devices this will hide/show to keyboard overlay 
          // which is annoying, so suppress it.
          this._setFocusOnSelection(component);
        }
      }
      else if (searchForLink)
      {
        // The value will already be in the search field, submit it.
        this._submitSearch(componentEvent);
      }
    }
  }
}

/**
 * Is the current device a touch screen?
 * @return true if a touchscreen, false otherwise.
 */
FndSearchSuggestBehavior.prototype._isTouchScreen = function() 
{
  var caps = AdfAgent.AGENT.getCapabilities();
  if (caps[AdfAgent.CAP_TOUCH_SCREEN] === AdfAgent.CAP_TOUCH_SCREEN_NONE)
  {
    return false;
  }
  return true;
}
/**
 * Find the parent of node (including node) that is a html LI node.
 * @param node Some html node.
 * @return node or some ancestor that is a html li, if none then return null;
 */
FndSearchSuggestBehavior.prototype._getParentLINode = function(node) 
{
  var currentNode = node;
  while (currentNode && currentNode.parentNode) {
    if (currentNode.tagName && currentNode.tagName.toLowerCase() === "li") {
       return currentNode;
    }
    currentNode = currentNode.parentNode;
  }
  return null;
};

/**
 * Get the QA_PARENT_DIV indicator for a node in the possible subtree of the li
 * node.  Searching will stop when we get to the li node.
 * @return value of the _QA_PARENT_DIV if one is found, else null;
 */
FndSearchSuggestBehavior.prototype._isInQAParentDivTree = function(node) 
{
  var currentNode = node;
  while (currentNode && currentNode.parentNode) {
    var clickedQAText = currentNode.getAttribute(FndSearchSuggestBehavior._QA_PARENT_DIV);
    if (clickedQAText)
    {
      return clickedQAText;
    }
    if (currentNode.tagName && currentNode.tagName.toLowerCase() === "li") {
       return null;
    }
    currentNode = currentNode.parentNode;
  }
  return null;
};

/**
 * Handles the click event inside autoSuggest panel.
 * Sets the value selected as display value of the component.
 */
FndSearchSuggestBehavior.prototype._fireClickInPanel = function(componentEvent)
{
  try
  {
    FndSearchSuggestBehavior._log("_fireClickInPanel enter.");
    if (this._blurTimerId)
    {
      // As we are only temporarly leaving the search field, clobber the blur callback.
      AdfPage.PAGE.cancelTimer(this._blurTimerId);
      delete this._blurTimerId;
    }
    FndSearchSuggestBehavior._log("_fireClickInPanel: componentEvent: " + componentEvent);
    var clickedDomElem = componentEvent.getNativeEventTarget();
    FndSearchSuggestBehavior._log("_fireClickInPanel: componentEvent.getNativeEventTarget(): " + clickedDomElem);
    var panel = componentEvent.getSource();  // probably a panelgrouplayout.  
    FndSearchSuggestBehavior._log("_fireClickInPanel: panel: " + panel);
    if (panel)
    {
      FndSearchSuggestBehavior._log("_fireClickInPanel: _searchFieldClientId: " + this._searchFieldClientId);
      var component = AdfPage.PAGE.findComponent(this._searchFieldClientId);
      FndSearchSuggestBehavior._log("_fireClickInPanel: component: " + component);
      var LINode = this._getParentLINode(clickedDomElem);
      FndSearchSuggestBehavior._log("_fireClickInPanel: LINode: " + LINode);
      
      var value = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
      var displayValue = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_DISPLAY_VALUE_ATTR);
      var autocomplete = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_AUTOCOMPLETE_ATTR);
      var name = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_GROUP_NAME_ATTR);
      var clickableHeader = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_IS_CLICKABLE_HEADER_ATTR);
      var submit = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_SUBMIT_ATTR);
      var placeItemInField = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_IN_FIELD_ATTR);
      var placeItemIdInField = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_ID_IN_FIELD_ATTR);
      var searchForLink = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_IS_SEARCH_FOR_LINK_ATTR);
      var quickActionsParent = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_HAS_QUICK_ACTIONS_ATTR);
      var suggestOnSelectedItem = LINode.getAttribute(FndSearchSuggestBehavior._ITEM_SUGGEST_ON_SELECTED_ITEM_ATTR);
      var clickedQAText = this._isInQAParentDivTree(clickedDomElem);
  
      FndSearchSuggestBehavior.advertiseClickOrigin(component, component);
      FndSearchSuggestBehavior._log("_fireClickInPanel: value: " + value);
      FndSearchSuggestBehavior._log("_fireClickInPanel: displayValue: " + displayValue);
      FndSearchSuggestBehavior._log("_fireClickInPanel: autocomplete: " + autocomplete);
      FndSearchSuggestBehavior._log("_fireClickInPanel: name: " + name);
      FndSearchSuggestBehavior._log("_fireClickInPanel: clickableHeader: " + clickableHeader);
      FndSearchSuggestBehavior._log("_fireClickInPanel: submit: " + submit);
      FndSearchSuggestBehavior._log("_fireClickInPanel: placeItemInField: " + placeItemInField);
      FndSearchSuggestBehavior._log("_fireClickInPanel: placeItemIdInField: " + placeItemIdInField);
      FndSearchSuggestBehavior._log("_fireClickInPanel: searchForLink: " + searchForLink);
      FndSearchSuggestBehavior._log("_fireClickInPanel: quickActionsParent: " + quickActionsParent);
      FndSearchSuggestBehavior._log("_fireClickInPanel: suggestOnSelectedItem: " + suggestOnSelectedItem);
      FndSearchSuggestBehavior._log("_fireClickInPanel: clickedQAText: " + clickedQAText);
      
      if (value && component)
      {
        FndSearchSuggestBehavior._log("_fireClickInPanel: 1.");
        this._visuallySelectItemNode(LINode);
        if (quickActionsParent && clickedQAText !== 'true')
        {
          // Clicking anywhere in quick action parent *except* the text/description
          // discloses the children.  Clicking the text is same as selecting the item.
          FndSearchSuggestBehavior._log("_fireClickInPanel: 2.");
          if (!this._isTouchScreen() && !AdfPage.PAGE.isScreenReaderMode())
          {
            // On touchscreen devices this will hide/show to keyboard overlay 
            // which is annoying, so suppress it.
            this._setFocusOnSelection(component);
          }
          this._doQuickAction(component, name, value, LINode);
          return;
        }
        if (autocomplete)
        {
          FndSearchSuggestBehavior._log("_fireClickInPanel: 3.");
          this._setComponentValue(component, true, value, displayValue);
          this._suggestOn(component);
          return;
        }
        if (suggestOnSelectedItem)
        {
          FndSearchSuggestBehavior._log("_fireClickInPanel: 4.");
          this._setComponentValue(component, "true" == placeItemIdInField, value, displayValue);
          this._suggestOn(component);
          // Do a submit to the server to save this autosuggestion.
          this._sendSearchSelectionEvent(component, name, value);
          this._setFocusOnSelection(component);
          return;
        }
        this._hideSuggestPopup(component);
        this._setFocusOnSelection(component);
        if ("true" == placeItemInField)
        {
          FndSearchSuggestBehavior._log("_fireClickInPanel: 5.");
          this._setComponentValue(component, "true" == placeItemIdInField, value, displayValue);
          this._setSearchFieldMode(component, "false" == submit, name, value);
        }
        if ("true" == submit)
        {
          FndSearchSuggestBehavior._log("_fireClickInPanel: 6.");
          // Do a submit to the server.
          this._sendSearchSelectionEvent(component, name, value);
        }
        else
        {
          FndSearchSuggestBehavior._log("_fireClickInPanel: 7.");
          // keywords ...
          if (this._submitKeywordsOnSelection)
          {
            FndSearchSuggestBehavior._log("_fireClickInPanel: 8.");
            // The value will already be in the search field, submit it.
            this._submitSearch(componentEvent);
          }
        }
      }
      else if (name && clickableHeader)
      {
        FndSearchSuggestBehavior._log("_fireClickInPanel: 9.");
        // No value, but if there is a name, this is the toggle of a heading.
        this._toggleSingeGroupSelection(component, name);
        if (!this._isTouchScreen() && !AdfPage.PAGE.isScreenReaderMode())
        {
          // On touchscreen devices this will hide/show to keyboard overlay 
          // which is annoying, so suppress it.
          this._setFocusOnSelection(component);
        }
      }
      else if (searchForLink)
      {
        FndSearchSuggestBehavior._log("_fireClickInPanel: 10.");
        // The value will already be in the search field, submit it.
        this._submitSearch(componentEvent);
      }
    }
  } catch(exe) {
    FndSearchSuggestBehavior._log("_fireClickInPanel: exception occurred: " + exe);
    AdfLogger.LOGGER.severe("Exception ocurred while processing click in Panel.", exe);
  }
}

/**
 * Handler for the keyUp event. When there is a value change in the inputfield, schedules
 * the timer to queue the customEvent to the server to get the suggestedItems.
 * Also handles the up and down arrow keys to navigate between the items in the popup
 * when enter key is pressed on an item, sets the value of the item as the display value
 * of the input component.
 */
FndSearchSuggestBehavior.prototype._fireKeyUp = function(componentEvent)
{
  var component = componentEvent.getSource();
  if (component && component instanceof AdfUIEditableValue)
  {
    var peer = component.getPeer();
    peer.bind(component);
    var contentNode = FndSearchSuggestBehavior._getContentNode(component);
    if (contentNode)
    {
      var value = contentNode.value;
      var keyCode = AdfAgent.AGENT.getKeyCode(componentEvent.getNativeEvent());
      var contentVisible = (this._useGeneratedSuggestPopup) ? 
                              peer.isPopupVisible(component, FndSearchSuggestBehavior._POPUP_PANEL_ID) :
                              this._hasInlineContentVisible(component);
      var fieldValueChanged = this._nodeLength != undefined && value.length != this._nodeLength;
      
      if (value.length == 1 && !this._initializedServer)
      {
        // Cannot sent messages from required empty fields, it will envoke required
        // client validation.  This will send init on type of first char in this case.
        this._sendInitializeEvent(component);
        this._initializedServer = true;
      }
      if (value.length == 0 && keyCode == AdfKeyStroke.ESC_KEY)
      {
        // Handle inconsistent input type="search" behavior.  Some browsers will 
        // blank the field when esc is hit, meaning the top suggestions may get
        // shown when you hit esc.  Example is chrome, whearas ff does not do this.
        // This is particually bad in a popup/dialog as the esc also closes the popup,
        // but opens autosuggest on a field now invisible.
        this._nodeLength = 0;
        if (contentVisible)
        {
          this._hideSuggestPopup(component);
        }
        return;
      }
      if (fieldValueChanged)
      {
        contentNode.removeAttribute("aria-activedescendant");
        this._setSearchFieldMode(component, true, null, null);
        this._showLoadingSuggestions(component);
        if (value.length < this._minCharCount ||
            !this._getSearchFieldMode(component))
        {
          if (this._topSuggestions)
          {
            // Send top selection event.
            AdfPage.PAGE.scheduleTimer(this, this._topSuggest, component, 100);
          }
          else
          {
            if(this._formFactor === 'desktop')
            {
              // Clobber suggest content - if any.
              contentVisible = false;
              this._hideSuggestPopup(component);
            }
          }
        }
        else 
        {
          // Normal autosuggest.
          this._scheduleTimer(component, this._typeDelay);
        }
      }
      else
      {
        if (!contentVisible && 
            keyCode == AdfKeyStroke.ARROWDOWN_KEY)
        {
          // user presses down arrow key in text field with suggest content not
          // shown -> show it.
          this._showLoadingSuggestions(component);
          if (value.length < this._minCharCount)
          {
            if (this._topSuggestions)
            {
              // Send top selection event.
              AdfPage.PAGE.scheduleTimer(this, this._topSuggest, component, 10);
            }
          }
          else
          {
            this._scheduleTimer(component, 10);
          }
        }
      }
      
      
      delete this._nodeLength;
      if (!contentVisible && keyCode == AdfKeyStroke.ENTER_KEY)
      {
        // Autosuggest popup is not shown, submit the field value.
        // The autosuggest value will already have been placed in the search 
        // field, submit it.
        if(this._submitOnEnterComponentId)
        {
          this._cancelTimer();
          if (this._getSearchFieldMode(component))
          {
            this._submitSearch(componentEvent);
          }
          else
          {
            // Do a submit to the server.
            this._sendSearchSelectionEvent(component, 
                                           this._getSearchFieldModeGroupName(component),
                                           this._getSearchFieldModeGroupValue(component));
          }
        }
      }
      else
      {
        // Cursor navigation of results.
        if (contentVisible)
        {
          var content = this._getGeneratedContent(component);
          var suggestUL = content.firstElementChild.firstElementChild;
          this._handleKeyboardNavigation(keyCode, component, componentEvent, suggestUL);
        }
      }
    }
  }
}

/**
 * Find and return the generated content for searchSuggest.
 * @param component input text component behavior is defined on.
 */
FndSearchSuggestBehavior.prototype._getGeneratedContent = function(component)
{
  var ret;
  if (this._useGeneratedSuggestPopup)
  {
    var popupContentId = FndSearchSuggestBehavior._createSubId(component.getClientId(),
                                           FndSearchSuggestBehavior._SUGGEST_ITEMS_ID);
    ret = this._document.getElementById(popupContentId);
    return ret;
  }
  else
  {
    // find the panel component we add to.
    var panelComponent = component.findComponent(this._inlineSuggestionComponentId);
    // The div defined by the panel.
    var panelDiv = FndSearchSuggestBehavior._getContentNode(panelComponent);
    // The <div> content generated by us.
    ret = FndSearchSuggestBehavior._getFirstChildElement(panelDiv);
    return ret;
  }
}


/**
 * Handles keyboard navigation through the results - up/down/home etc.
 * @param keyCode of key pressed.
 * @param component input text component behavior is defined on.
 * @param componentEvent event triggering this code.
 * @param primarySuggestUL the ul for the primary list items (not the quick actions/child actions).
 */
FndSearchSuggestBehavior.prototype._handleKeyboardNavigation = function(keyCode, component, componentEvent, primarySuggestUL)
{
  var selectedIndex = primarySuggestUL.getAttribute(FndSearchSuggestBehavior._SELECTED_ITEM_INDEX);
  var keyboardNavDone = primarySuggestUL.getAttribute(FndSearchSuggestBehavior._KEYBOARD_NAVIGATION_PERFORMED);
  var selectedParentLI = this._getCurrentSelectedItem(primarySuggestUL, selectedIndex);
  var contentNode = FndSearchSuggestBehavior._getContentNode(component);
  var selectedQALI = null;
  var quickActionsParent = null;
  var selectedLI = selectedParentLI;
  var selectedUL = primarySuggestUL;
  if (selectedParentLI)
  {
    if (this._formFactor === 'desktop')
    {
      // worry about cursor navigation into children shown to the right.
      selectedQALI = this._getSelectedQuickActionsElement(selectedParentLI);
      if (selectedQALI)
      {
        // Unselect current quick action child selection.
        FndSearchSuggestBehavior._removeCSSClassName(selectedQALI, FndSearchSuggestBehavior._SELECTED_STYLE_CLASS);
        selectedLI = selectedQALI;
        selectedUL = selectedQALI.parentNode;
      }
      else
      {
        if (keyCode != AdfKeyStroke.ARROWRIGHT_KEY && 
            keyCode != AdfKeyStroke.ARROWLEFT_KEY &&
            keyCode != AdfKeyStroke.ENTER_KEY)
        {
          // Unselect current parent selection.
          FndSearchSuggestBehavior._removeCSSClassName(selectedParentLI, FndSearchSuggestBehavior._SELECTED_STYLE_CLASS);
        }
      }
    }
    else
    {
      // mobile.
      // Unselect current parent selection.
      FndSearchSuggestBehavior._removeCSSClassName(selectedParentLI, FndSearchSuggestBehavior._SELECTED_STYLE_CLASS);
    }
  }
  
  switch (keyCode)
  {
    case AdfKeyStroke.ENTER_KEY:
      // Enter on a selection always selects, does not drill into children.
      //if (selectedParentLI && !selectedQALI)
      //{
      //  // if there are children and we have not selected one, drop into the children.
      //  if (this._formFactor === 'desktop')
      //  {
      //    quickActionsParent = selectedParentLI.getAttribute(FndSearchSuggestBehavior._ITEM_HAS_QUICK_ACTIONS_ATTR);
      //    if (quickActionsParent)
      //    {
      //      this._selectFirstQuickActionsElement(componentEvent, selectedParentLI);
      //      return;
      //    }
      //  }
      //}
      if (this._personalizeSelectedByKeyboard)
      {
        this._personalizeSelectedByKeyboard = false;
        this._clickPersonalizableButton(componentEvent);
        return;
      }
      var hideSuggestPopup = true;
      
      //peer.hidePopup(component, FndSearchSuggestBehavior._POPUP_PANEL_ID);
      this._setFocusOnSelection(component);
      componentEvent.cancel();
      componentEvent.stopBubbling();
      if ("false" == keyboardNavDone)
      {
        // the user has simply pressed enter - submit whatever is in the search
        // field, or whatever row in the suggest popup is selected.
        if (this._getSearchFieldMode(component))
        {
          hideSuggestPopup = this._submitSearch(componentEvent);
        }
        else
        {
          // Do a submit to the server of the group value set in the search field.
          this._sendSearchSelectionEvent(component, 
                                         this._getSearchFieldModeGroupName(component),
                                         this._getSearchFieldModeGroupValue(component));
        }
      }
      else
      {
        if (selectedLI)
        {
          var value                 = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
          var displayValue          = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_DISPLAY_VALUE_ATTR);
          var name                  = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_GROUP_NAME_ATTR);
          var placeItemIdInField    = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_ID_IN_FIELD_ATTR);
          var submit                = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_SUBMIT_ATTR);
          var suggestOnSelectedItem = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_SUGGEST_ON_SELECTED_ITEM_ATTR);
          
          if (suggestOnSelectedItem)
          {
            this._setComponentValue(component, "true" == placeItemIdInField, value, displayValue);
            this._suggestOn(component);
            // Do a submit to the server to save this autosuggestion.
            this._sendSearchSelectionEvent(component, name, value);
            this._setFocusOnSelection(component);
            return;
          }
          if (value)
          {
            if ("true" == submit)
            {
              // Do a submit to the server.
              this._sendSearchSelectionEvent(component, name, value);
            }
            else
            {
              // The autosuggest value will already have been placed in the search 
              // field, submit it.
              hideSuggestPopup = this._submitSearch(componentEvent);
            }
          }
        }
      }
      if (hideSuggestPopup)
      {
        this._hideSuggestPopup(component);
      }
      break;
    case AdfKeyStroke.ARROWDOWN_KEY:
      if (selectedLI)
      {
        this._selectNextElement(componentEvent, selectedUL, selectedLI);
      }
      else
      {
        // No current selection, pick the first valid value.
        this._selectFirstElement(componentEvent, selectedUL);
      }
      selectedUL.setAttribute(FndSearchSuggestBehavior._KEYBOARD_NAVIGATION_PERFORMED, true);
      break;
    case AdfKeyStroke.ARROWUP_KEY:
      if (selectedLI)
      {
        this._selectPrevElement(componentEvent, selectedUL, selectedLI);
      }
      else
      {
        // No current selection, pick the last valid value.
        this._selectLastElement(componentEvent, selectedUL);
      }
      selectedUL.setAttribute(FndSearchSuggestBehavior._KEYBOARD_NAVIGATION_PERFORMED, true);
     break;
    case AdfKeyStroke.HOME_KEY:
      this._selectFirstElement(componentEvent, selectedUL);
      selectedUL.setAttribute(FndSearchSuggestBehavior._KEYBOARD_NAVIGATION_PERFORMED, true);
      break;
    case AdfKeyStroke.END_KEY:
      this._selectLastElement(componentEvent, selectedUL);
      selectedUL.setAttribute(FndSearchSuggestBehavior._KEYBOARD_NAVIGATION_PERFORMED, true);
      break;
    case AdfKeyStroke.ESC_KEY:
      // Simulate a click in the search field so the search field does not contract (if appropriate).
      // In reality the focus never left the search field.  See FndGlobalSearch.js
      var now = new Date().getTime();
      var inputTextSrcId = component.getAbsoluteId();
      AdfPage.PAGE.setPageProperty("FndGlobalSearchFieldLastFocus_" + inputTextSrcId, now);
      break;
    case AdfKeyStroke.ARROWRIGHT_KEY:
      if (selectedParentLI && this._formFactor === 'desktop')
      {
        quickActionsParent = selectedParentLI.getAttribute(FndSearchSuggestBehavior._ITEM_HAS_QUICK_ACTIONS_ATTR);
        if (quickActionsParent && this._isCaretAtEndOfField(contentNode, false, true))
        {
          if (selectedQALI)
          {
            // Reset the caret, it will have moved if there is text in the field,
            // this is a movement request between areas of the popup, not between 
            // characters of the text in the search field.
            this._setCaretToEndOfField(contentNode);
          }
          if (AdfPage.PAGE.getLocaleContext().isRightToLeft())
          {
            this._unselectQuickActionsElement(componentEvent, selectedParentLI);
          }
          else 
          {
            if (selectedQALI)
            {
              // going to the right wraps over and unselects.
              this._unselectQuickActionsElement(componentEvent, selectedParentLI);
            }
            else
            {
              this._selectFirstQuickActionsElement(componentEvent, selectedParentLI);
            }
          }
        }
      }
      break;
    case AdfKeyStroke.ARROWLEFT_KEY:
      if (selectedParentLI && this._formFactor === 'desktop')
      {
        quickActionsParent = selectedParentLI.getAttribute(FndSearchSuggestBehavior._ITEM_HAS_QUICK_ACTIONS_ATTR);
        if (quickActionsParent && this._isCaretAtEndOfField(contentNode, true, false))
        {
          if (selectedQALI)
          {
            // Reset the caret, it will have moved if there is text in the field,
            // this is a movement request between areas of the popup, not between 
            // characters of the text in the search field.
            this._setCaretToEndOfField(contentNode);
          }
          if (AdfPage.PAGE.getLocaleContext().isRightToLeft())
          {
            if (selectedQALI)
            {
              // going to the left wraps over and unselects.
              this._unselectQuickActionsElement(componentEvent, selectedParentLI);
            }
            else
            {
              this._selectFirstQuickActionsElement(componentEvent, selectedParentLI);
            }
          }
          else
          {
            if (selectedQALI)
            {
              // going to the left unselects.
              this._unselectQuickActionsElement(componentEvent, selectedParentLI);
            }
          }
        }
      }
      break;
    default:
      break;
  }
}

/**
 * Is keyCode one of the navigation keys - up, down, home end or enter.
 */
FndSearchSuggestBehavior.prototype._isNavigationKey = function(keyCode) 
{
  if (keyCode == AdfKeyStroke.ARROWDOWN_KEY ||
      keyCode == AdfKeyStroke.ARROWUP_KEY ||
      keyCode == AdfKeyStroke.HOME_KEY ||
      keyCode == AdfKeyStroke.END_KEY ||
      keyCode == AdfKeyStroke.ENTER_KEY ||
      keyCode == AdfKeyStroke.ARROWRIGHT_KEY ||
      keyCode == AdfKeyStroke.ARROWLEFT_KEY)
  {
    return true;
  }
  return false;
}

/**
 * Is the caret at the end of the field?
 * @parm field DOM node of the search field
 * @param leftArrowPressed true if the left arrow was just pressed, false otherwise.
 * @param rightArrowPressed true if the right arrow was just pressed, false otherwise.
 */
FndSearchSuggestBehavior.prototype._isCaretAtEndOfField = function(field, leftArrowPressed, rightArrowPressed) 
{
  var ret = false;
  var fieldValueLen = field.value.length;
  if (fieldValueLen === 0)
  {
    ret = true;
  }
  else
  {
    if (field.selectionStart || field.selectionStart == '0')
    {
      if (AdfPage.PAGE.getLocaleContext().isRightToLeft())
      {
        if (rightArrowPressed)
        {
          if (field.selectionStart == 1)
          {
            ret = true;
          }
        }
        else if (field.selectionStart == 0)
        {
          ret = true;
        }
      }
      else
      {
        if (leftArrowPressed)
        {
          if (field.selectionStart + 1 == fieldValueLen)
          {
            ret = true;
          }
        }
        else
        {
          if (field.selectionStart == fieldValueLen)
          {
            ret = true;
          }
        }
      }
    }
  }
  
  return ret;
}

/**
 * Set the caret at the end of the field.
 * @parm field DOM node of the search field
 */
FndSearchSuggestBehavior.prototype._setCaretToEndOfField = function(field)
{
  var fieldValueLen = field.value.length;
  if (fieldValueLen === 0)
  {
    return;
  }
  
  if (field.selectionStart || field.selectionStart == '0')
  {
    if (AdfPage.PAGE.getLocaleContext().isRightToLeft())
    {
      field.selectionStart = 0;
    }
    else
    {
      field.selectionStart = fieldValueLen;
    }
  }
}

/**
 * Handles the keyDown event. records node value length such that _fireKeyUp will queue
 * the _autoSuggest event only when a valid key is entered in the input field.
 */
FndSearchSuggestBehavior.prototype._fireKeyDown = function(event) 
{
  var component = event.getSource();
  if (component && component instanceof AdfUIEditableValue) 
  {
    var contentNode = FndSearchSuggestBehavior._getContentNode(component);
    if (contentNode) 
    {
      this._nodeLength = contentNode.value.length;
    }
  }
}

/**
 * Gets the current highlighted item.
 * @param popupContent container of list of Elements.
 * @param selectedIndex zero based index into the list of selected items.
 */
FndSearchSuggestBehavior.prototype._getCurrentSelectedItem = function(popupContent, selectedIndex)
{
  if (popupContent && selectedIndex)
  {
    var childList = FndSearchSuggestBehavior._getChildElements(popupContent);
    return childList[selectedIndex];
  }
};

/** 
 * Queues the customEvent of type _autoSuggest to server if the suggestedItems
 * is not available in cache.
 * @param component the inputText component.
 */
FndSearchSuggestBehavior.prototype._autoSuggest = function(component)
{
  this._timerId = null;
  var peer = component.getPeer();
  peer.bind(component);
  
  var targetNode = FndSearchSuggestBehavior._getContentNode(component);
  var value = targetNode.value;
  // Last minute test of character lengths in case timer
  // events make it through with less characters then the defined minimum.
  if (value.length < this._minCharCount)
  {
    if (!this._topSuggestions)
    {
      if(this._formFactor === 'desktop')
      {
        // We should not be showing content, clear it as appropriate.
        this._hideSuggestPopup(component);
      }      
    }
  }
  else
  {
    var inCache = this._isAllDataInCache(value);
    if (inCache)
    {
      var suggestionsToShow = this._getSuggestedItemsFromCache(value, false);
      this._showContent(component, value, suggestionsToShow);
    }
    else
    {
      // Queue the autoSuggest event to get the list from the server.
      this._queueAutoSuggestEvent(component, value, targetNode);
    }
  }
};

/** 
 * Queues the customEvent of type _topSuggest to server if the top suggestions
 * is not available in cache.
 * @param component the inputText component.
 */
FndSearchSuggestBehavior.prototype._topSuggest = function(component)
{
  this._timerId = null;
  var peer = component.getPeer();
  peer.bind(component);
  
  var targetNode = FndSearchSuggestBehavior._getContentNode(component);
  var value = targetNode.value;
  var inCache = this._isAllDataInCache(value);
  if (inCache)
  {
    var suggestionsToShow = this._getSuggestedItemsFromCache(value, true);
    this._showContent(component, value, suggestionsToShow);
  }
  else
  {
    // Queue the topSuggest event to get the list from the server.
    this._sendTopSelectionsEvent(component);
  }
};

/**
 * Queues the autoSuggest event to get the suggestedItems from the server
 * @param component - component instance
 * @param typedValue
 * @param targetNode
 */
FndSearchSuggestBehavior.prototype._queueAutoSuggestEvent = function(component, typedValue, targetNode)
{
  if (typedValue)
  {
    var groupNames = this._getUncachedGroupNames(typedValue);
    AdfCustomEvent.queue(component,
                         "SearchSuggest",
                         {submittedValue:typedValue, groupName:groupNames},
                         true, true);      

    this._showBusyStatus(component);
    AdfPage.PAGE.scheduleTimer(this, 
                               this._clearBusyStatus,
                               component.getClientId(),
                               this._typeDelay);
  }
}

/**
 * In a case when there is a runtime exception on server while executing the
 * suggestedItems method, the busy icon stays in the input field after notifying
 * the exception until the page is refreshed again
 * Check the request status every half second until the busy state is removed.
 */
FndSearchSuggestBehavior.prototype._clearBusyStatus = function(clientId)
{
  var dts = AdfPage.PAGE.getDataTransferService();
  var dtsState = dts.getDTSState();
  if (dtsState == AdfDataTransferService.STATE_READY)
  {
    FndSearchSuggestBehavior.clearBusyStatus(clientId);
  }
  else
  {
    AdfPage.PAGE.scheduleTimer(this, this._clearBusyStatus, clientId, this._typeDelay);
  }
}

/**
 * Constructs the content dom from the suggestedItems and calls the
 * AdfRichUIPeer.showPopup() api to show the popup, or shows inline.
 * @param component the search field.
 * @param clientId client Id of component.
 * @param submittedValue value in field.
 * @param suggestedItems an Array of suggest groups in suggest order.
 */
FndSearchSuggestBehavior.prototype._showContent = function(component,
                                                           submittedValue,
                                                           suggestedItems)
{
  var hasItems = this._hasPrimryColumnItems(suggestedItems);
  var hidePopup = false;
  var ariaResults = "";
  
  if (!hasItems && "" == this._getMlsString("noMatchMessage"))
  {
    // Do not show empty popups, except when in inline mode and not data is configured.
    // This allows the user to re-select data groups with personalizations.
    if (this._useGeneratedSuggestPopup)
    {
      hidePopup = true;
    }
    else
    {
      if (this._groupMetadata.length == 0 && submittedValue.length >= this._minCharCount)
      {
        hidePopup = false;
      }
      else
      {
        if (this._formFactor == "desktop")
        {
          hidePopup = true;
        }
      }
    }
  }
  else if (!hasItems)
  {
    // do not show top suggestions or empty popup if < required chars and no data.
    if (submittedValue.length < this._minCharCount)
    {
      hidePopup = true;
    }
  }
  
  if (!hasItems)
  {
    ariaResults = this._getMlsString("ariaNoResults");
  }
  else 
  {
    var count = this._countPrimryColumnItems(suggestedItems);
    var maxItems = this._maxSuggestedItems;
    if (count < maxItems)
    {
      ariaResults = TrFastMessageFormatUtils.format(this._getMlsString("ariaExactResultsFound"), count);
    }
    else
    {
      ariaResults = TrFastMessageFormatUtils.format(this._getMlsString("ariaResultsFound"), count);
    }
  }
  AdfPage.PAGE.scheduleTimer(this, this._announceToAssistiveTechnology, ariaResults, 100);
  
  if (hidePopup)
  {
    // Nothing to show, and no message, clear out UI, but be careful for the case 
    // where the user turns off all their suggest groups.  Need to be able to 
    // turn them on again, so if no groups and > minChars, show empty popup.
    this._hideSuggestPopup(component);
  }
  else
  {
    if (this._useGeneratedSuggestPopup)
    {
      this._showPopup(component, submittedValue, suggestedItems);
    }
    else
    {
      var outerDiv = this._createSuggestContainerWrapper(component);
      this._addItems(submittedValue, outerDiv, suggestedItems);
      this._showInline(component, outerDiv);
    }      
  }
}

FndSearchSuggestBehavior.prototype._announceToAssistiveTechnology = function(ariaText)
{
  AdfPage.PAGE.flushToAssistiveTechnology();
  AdfPage.PAGE.announceToAssistiveTechnology(ariaText, false);
};

/**
 * Look up the FndSearchSuggestBehavior stored on the component.
 */
FndSearchSuggestBehavior._findBehaviorFromComponent = function(component)
{
  // get the instance of autoSuggestBehavior from the clientBehaviors.
  var componentBehavior = component.getProperty("behaviors");
  var searchSuggestBehavior;
  if (componentBehavior && componentBehavior instanceof Array)
  {
    for (var i=0; i < componentBehavior.length; i++)
    {
      if (componentBehavior[i] instanceof FndSearchSuggestBehavior)
      {
        searchSuggestBehavior = componentBehavior[i];
        break;
      }
    }
  }
  else if (componentBehavior && componentBehavior instanceof FndSearchSuggestBehavior)
  {
    searchSuggestBehavior = componentBehavior;
  }
  
  return searchSuggestBehavior;
}

/**
 * Is there inline content Visible, that is the adfPopup (if defined) is open
 * and there is suggest content showing, or if no adfPopup, there is inline content
 * defined.  Assumes suggest type is popup.
 * @param component
 */
FndSearchSuggestBehavior.prototype._hasInlineContentVisible = function(component)
{
  var inlineContainerComponent = component.findComponent(this._inlineSuggestionComponentId);
  var inlineContentNode = FndSearchSuggestBehavior._getContentNode(inlineContainerComponent);
  var innerHTML = inlineContentNode.innerHTML;
  var popupContentVisible = innerHTML != undefined && innerHTML != "";

  if (this._adfPopupId)
  {
    var visible = this._isPopupVisible(component, this._adfPopupId);
    return visible && popupContentVisible;
  }
  
  return popupContentVisible;
}

/**
 * Show content inline.
 * @param component the searchSuggest input component.
 * @param content to show.  null means hide it.
 */
FndSearchSuggestBehavior.prototype._showInline = function(component, 
                                                          content)
{
  if (this._adfPopupId && content)
  {
    // Make sure adf popup is up.
    this._showPopupUnderComponent(component, this._adfPopupId);
  }
  
  if (!component)
  {
    FndSearchSuggestBehavior._log("Component is null!");
  }

  var inlineContainerComponent = component.findComponent(this._inlineSuggestionComponentId);
  if (inlineContainerComponent)
  {
    var inlineContentNode = FndSearchSuggestBehavior._getContentNode(inlineContainerComponent);
    // Reset content.
    inlineContentNode.innerHTML = "";
    // Replace content.
    if (content)
    {
      inlineContentNode.appendChild(content);
      if (inlineContainerComponent.getVisible)
      {
        if (!inlineContainerComponent.getVisible())
        {
          inlineContainerComponent.setVisible(true);
        }
      }
    }
    else
    {
      if (inlineContainerComponent.getVisible)
      {
        if (inlineContainerComponent.getVisible())
        {
          inlineContainerComponent.setVisible(false);
        }
      }
    }
    
    if (this._inlineReplaceComponentId && this._inlineReplaceComponentId != "")
    {
      var inlineReplaceComponent = component.findComponent(this._inlineReplaceComponentId);
      if (inlineReplaceComponent && inlineReplaceComponent.setVisible)
      {
        if (content)
        {
          inlineReplaceComponent.setVisible(false);
        }
        else
        {
          inlineReplaceComponent.setVisible(true);
        }
      }
    }
  }
  
  
  // Show the "search for 'xxx'" searchForMessage if appropriate.
  var tok = component.getSubmittedValue();
  if (tok && tok.trim())
  {
    tok = tok.trim();
  }
  if (this._adfMessageComponentId)
  {
    var messageComponent = component.findComponent(this._adfMessageComponentId);
    if (messageComponent)
    {
      contentNode = FndSearchSuggestBehavior._getContentNode(messageComponent);
      var msg = "";
      if (tok && tok.length >= this._searchFieldMinSearchLength)
      {
        if (tok.length > 20)
        {
          if (AdfPage.PAGE.getLocaleContext().isRightToLeft())
          {
            tok = FndSearchSuggestBehavior._ELLIPSIS + tok.substr(0, 20);
          }
          else
          {
            tok = tok.substr(0, 20) + FndSearchSuggestBehavior._ELLIPSIS;
          }
        }
        msg = TrFastMessageFormatUtils.format(this._getMlsString("searchForMessage"), tok);
      }
      contentNode.innerHTML = msg;
      (msg == "") ? contentNode.style.visibility = "hidden" : contentNode.style.visibility = "visible";
      // This triggers JSF lifecycle on client and will trigger required field
      // validation and cancel our popup
      // messageComponent.setText(searchForMessage);
    }
  }
  
  var clientId = component.getClientId();
  var popupContentId = FndSearchSuggestBehavior._createSubId(clientId,
                                                 FndSearchSuggestBehavior._SUGGEST_ITEMS_ID);
  var popupContent = this._document.getElementById(popupContentId);
  
  if (popupContent)
  {
    this._hilightValue(component.getSubmittedValue(), popupContent);
  }
  this._showAdfShowComponents(component);
}

FndSearchSuggestBehavior.prototype._showInPopup = function(component, content)
{
  AdfObject.ensureClassInitialization(AdfRichPopup);

  var clientId = component.getClientId();
  var hints = {};
  hints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_MENU;
  hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU;
  hints[AdfDhtmlPopupWindow.HINT_FOCUS] = false;
  hints[AdfDhtmlPopupWindow.HINT_CLOSE_ON_ESCAPE] = true;
  hints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER] = this.createCallback(this._firePopupClosed);
  hints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER_PARAM] = component;
  hints[AdfDhtmlPopupWindow.HINT_OPENED_HANDLER] = this.createCallback(this._firePopupOpening);
  hints[AdfDhtmlPopupWindow.HINT_OPENED_HANDLER_PARAM] = component;
  hints[AdfRichPopup.HINT_ALIGN] = AdfRichPopup.ALIGN_AFTER_START;
  hints[AdfRichPopup.HINT_LAUNCH_ID] = clientId;
  hints[AdfRichPopup.HINT_ALIGN_ID] = FndSearchSuggestBehavior._createSubId(clientId, "content");
  hints[AdfDhtmlPopupWindow.HINT_UNSCOPED] = AdfDhtmlPopupWindow.HINT_UNSCOPED_ALWAYS;

  var peer = component.getPeer();
  peer.bind(component);
  peer.showPopup(component, content, hints, FndSearchSuggestBehavior._POPUP_PANEL_ID);
};

/**
 * The popup is closed, reset aria values.
 * @param component component the ssb is on.
 */
FndSearchSuggestBehavior.prototype._firePopupClosed = function(component) {
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component);
  contentNode.setAttribute("aria-expanded", "false");
  contentNode.removeAttribute("aria-activedescendant");
};

/**
 * The popup is opened, set aria values.
 * @param component component the ssb is on.
 */
FndSearchSuggestBehavior.prototype._firePopupOpening = function(component) {
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component);
  contentNode.setAttribute("aria-expanded", "true");
};

FndSearchSuggestBehavior.prototype._doQuickAction = function(component, groupName, parentSuggestion, LIParentNode)
{
  var cachedItems = this._getFromQuickItemsCache(groupName, parentSuggestion);
  if (cachedItems)
  {
    this._showQuickActionChildren(component, groupName, parentSuggestion, cachedItems, LIParentNode)
  }
  else
  {
    this._showBusyStatus(component);
    this._sendSearchSuggestQuickActionParentSelectionEvent(component, groupName, parentSuggestion);
  }
};

FndSearchSuggestBehavior.prototype._removeAndDeselectMobileQuickActions = function(ulNode)
{
  var item = FndSearchSuggestBehavior._getFirstChildElement(ulNode);
  var quickActionParentNode = null;
  var toDelete = null;
  while (item)
  {
    var value = item.getAttribute(FndSearchSuggestBehavior._MOBILE_QUICK_ACTION_ATTR);
    if (value) 
    {
      if (!quickActionParentNode) 
      {
        // The quick action parent is just the previous node of the first "child", there is no real hierarchy here.
        quickActionParentNode = FndSearchSuggestBehavior._getPreviousElement(item);
      }
      toDelete = item;      
    }
    item = FndSearchSuggestBehavior._getNextElement(item);
    if (toDelete)
    {
      ulNode.removeChild(toDelete);
      toDelete = null;
    }
  }
  
  if (quickActionParentNode) 
  {
    // Make sure the expand icon shows.
    this._setMobileQuickActionIcon(quickActionParentNode, false);
  }
};

FndSearchSuggestBehavior.prototype._findLIChild = function(ulNode, groupName, suggestionId)
{
  var item = FndSearchSuggestBehavior._getFirstChildElement(ulNode);
  while (item)
  {
    var groupNameAttr = item.getAttribute(FndSearchSuggestBehavior._ITEM_GROUP_NAME_ATTR);
    var itemValueAttr = item.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
    if (groupNameAttr && itemValueAttr)
    {
      if (groupNameAttr === groupName && itemValueAttr === suggestionId)
      {
        return item;
      }
    }
    item = FndSearchSuggestBehavior._getNextElement(item);
  }
  return null;
};

/**
 * Is the passed node representing an open or closed mobile quick action parent node.
 * @return true if open, false if closed.
 */
FndSearchSuggestBehavior.prototype._isMobileQuickActionOpen = function(LIQuickActionParentNode)
{
  var item = LIQuickActionParentNode.lastElementChild.lastElementChild;
  var laf = AdfPage.PAGE.getLookAndFeel();
  var showStyle = laf.getStyleClass(FndSearchSuggestBehavior._MOBILE_SHOW_QUICK_ACTION_STYLE);
  var hideStyle = laf.getStyleClass(FndSearchSuggestBehavior._MOBILE_HIDE_QUICK_ACTION_STYLE);
  while (item)
  {
    var style = item.className;
    if (showStyle === style)
    {
      // the pull down icon is visible, nothing showing.
      return false;
    }
    if (hideStyle === style)
    {
    // the pull up icon is visible, items already showing.
      return true;
    }
    item = FndSearchSuggestBehavior._getPreviousElement(item);
  }
  return false;
};

/**
 * Toggle the quick actions parent icon, from closed to open or vice versa.
 * @param LIQuickActionParentNode LI node containing open/close icon.
 * @param show true to show the open (V) icon, false for the close (^) icon.
 */
FndSearchSuggestBehavior.prototype._setMobileQuickActionIcon = function(LIQuickActionParentNode, show)
{
  var item = LIQuickActionParentNode.lastElementChild.lastElementChild;
  var laf = AdfPage.PAGE.getLookAndFeel();
  var showStyle = laf.getStyleClass(FndSearchSuggestBehavior._MOBILE_HIDE_QUICK_ACTION_STYLE);
  var hideStyle = laf.getStyleClass(FndSearchSuggestBehavior._MOBILE_SHOW_QUICK_ACTION_STYLE);

  var newStyle = null;
  if (show) 
  {
    newStyle = showStyle;
  }
  else 
  {
    newStyle = hideStyle;
  }
  while (item)
  {
    var style = item.className;
    if (showStyle === style)
    {
      FndSearchSuggestBehavior._removeCSSClassName(item, showStyle);
      FndSearchSuggestBehavior._addCSSClassName(item, newStyle);
      item.setAttribute("aria-label", this._getMlsString("showQA"));
      return;
    }
    if (hideStyle === style)
    {
      FndSearchSuggestBehavior._removeCSSClassName(item, hideStyle);
      FndSearchSuggestBehavior._addCSSClassName(item, newStyle);
      item.setAttribute("aria-label", this._getMlsString("hideQA"));
      return;
    }
    item = FndSearchSuggestBehavior._getPreviousElement(item);
  }
};

/**
 * Toggle the quick actions parent icon, from closed to open or vice versa.
 * @return true if final state is open, false if closed.
 */
FndSearchSuggestBehavior.prototype._toggleMobileQuickActionIcon = function(LIQuickActionParentNode)
{
  var item = LIQuickActionParentNode.lastElementChild.lastElementChild;
  var laf = AdfPage.PAGE.getLookAndFeel();
  var showStyle = laf.getStyleClass(FndSearchSuggestBehavior._MOBILE_SHOW_QUICK_ACTION_STYLE);
  var hideStyle = laf.getStyleClass(FndSearchSuggestBehavior._MOBILE_HIDE_QUICK_ACTION_STYLE);
  while (item)
  {
    var style = item.className;
    if (showStyle === style)
    {
      FndSearchSuggestBehavior._removeCSSClassName(item, showStyle);
      FndSearchSuggestBehavior._addCSSClassName(item, hideStyle);
      item.setAttribute("aria-label", this._getMlsString("showQA"));
      return false;
    }
    if (hideStyle === style)
    {
      FndSearchSuggestBehavior._removeCSSClassName(item, hideStyle);
      FndSearchSuggestBehavior._addCSSClassName(item, showStyle);
      item.setAttribute("aria-label", this._getMlsString("hideQA"));
      return true;
    }
    item = FndSearchSuggestBehavior._getPreviousElement(item);
  }
  return false;
};

FndSearchSuggestBehavior.prototype._showQuickActionChildren = function(component, groupName, parentSuggestion, suggestedItems, LIParentNode)
{
  if (this._formFactor === 'mobile')
  {
    if (!LIParentNode)
    {
      // callback from server, we need to find the List Item node that was clicked on.
      var mobOuterDiv = this._getGeneratedContent(component);
      if (mobOuterDiv)
      {
        var suggestUL = mobOuterDiv.firstElementChild.firstElementChild;
        LIParentNode = this._findLIChild(suggestUL, groupName, parentSuggestion);
      }
    }
    if (!LIParentNode) 
    {
      return;
    }
    
    // need to find all open child nodes and clobber them.
    var ulNode = LIParentNode.parentNode;
    var thisNodeWasOpen = this._isMobileQuickActionOpen(LIParentNode);
    // this will clobber the children and toggle the display icon for any opened 
    // parent node.
    this._removeAndDeselectMobileQuickActions(ulNode);
    if (thisNodeWasOpen)
    {
      // Children already removed so nothing to do.
      // this._setMobileQuickActionIcon(LIParentNode, false);
      return;
    }
    this._setMobileQuickActionIcon(LIParentNode, true);

    // If we get to here, we are opening a node to show children.
    // for simplicity, just copy the group attributes from the "parent" into the children.    
    var submit = LIParentNode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_SUBMIT_ATTR);
    var placeItemInField = LIParentNode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_IN_FIELD_ATTR);
    var placeItemIdInField = LIParentNode.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_ID_IN_FIELD_ATTR);
    var suggestOnSelectedItem = LIParentNode.getAttribute(FndSearchSuggestBehavior._ITEM_SUGGEST_ON_SELECTED_ITEM_ATTR);
    var name = LIParentNode.getAttribute(FndSearchSuggestBehavior._ITEM_GROUP_NAME_ATTR);
    var groupMetadataMobile = this._getGroupMetatdataByGroupName(groupName);
    var detailImageStyleClass = groupMetadataMobile.detailImageStyleClass;

    var domId = ulNode.id + "_" + groupName + "_";
    for (var i = suggestedItems.length - 1; i >= 0 ; i--)
    {
      var item = suggestedItems[i];
      var liChild = this._createSuggestion(item, "", submit, placeItemInField, placeItemIdInField, suggestOnSelectedItem,
                                           detailImageStyleClass, name, i, true, false);
      // This is the obscure js way of doing insertAfter, essentially insert 
      // before the next element (works even if it is null).
      var liId = domId + i;
      liChild.setAttribute("id", liId);
      ulNode.insertBefore(liChild, LIParentNode.nextSibling);
    }
  }
  else
  {
    var outerDiv = this._getGeneratedContent(component);
    if (outerDiv)
    {
      var quickActionsUL = outerDiv.lastElementChild.firstElementChild;
      // Clobber existing list items.
      quickActionsUL.innerHTML = '';
      
      var groupMetadata = this._getGroupMetatdataByGroupName(groupName);
      var groupHeading = this._getMlsString("suggestedQuickActions");
      var group = 
          {
            "name": groupMetadata.name,
            "displayName": groupHeading, // groupMetadata.displayName,
            "submit": groupMetadata.submit,
            "placeItemInField": groupMetadata.placeItemInField,
            "placeItemIdInField": groupMetadata.placeItemIdInField,
            "groupHeading": null, // groupMetadata.groupHeading,
            "icon": groupMetadata.icon,
            "headerMessage": null,
            "items": suggestedItems,
            "quickActionGroup": groupMetadata.quickActionGroup,
            "suggestOnSelectedItem": groupMetadata.suggestOnSelectedItem,
            "hasDetailItems": false,
            "imageStyleClass": groupMetadata.detailImageStyleClass, // distinct detail style
            "detailImageStyleClass": groupMetadata.detailImageStyleClass,
            "restMetadata": groupMetadata.restMetadata
          };
      this._addGroupItems("", group, quickActionsUL);
      if (FndSearchSuggestBehavior._focusFirstQA)
      {
        // If in Screen reader mode, focus Quick Actions after the user clicks the show
        // "button".
        delete FndSearchSuggestBehavior["_focusFirstQA"];
        AdfPage.PAGE.scheduleTimer(this, this._focusFirstSRQuickAction, {}, 100);
      }
      
      if (suggestedItems.length && suggestedItems.length)
      {
        var ariaResults = TrFastMessageFormatUtils.format(this._getMlsString("qaCount"), 
                                                          suggestedItems.length );
        AdfPage.PAGE.scheduleTimer(this, this._announceToAssistiveTechnology, ariaResults, 100);
      }
    }
  }
};


/**
 * Re-display global level quick actions if they are defined.  It is assumed that
 * the ui is in desktop mode.
 * @param component the search field.
 * @param submittedValue the value in the search field.
 */
FndSearchSuggestBehavior.prototype._reDisplayGlobalQuickAction = function(component, submittedValue)
{
  var group = this._getGlobalQuickActions(component, submittedValue);
  if (group)
  {
    var outerDiv = this._getGeneratedContent(component);
    if (outerDiv)
    {
      // var suggestUL = outerDiv.firstElementChild.firstElementChild;
      var quickActionsUL = outerDiv.lastElementChild.firstElementChild;
      // Clobber existing list items.
      quickActionsUL.innerHTML = '';
      this._addGroupItems("", group, quickActionsUL);
      if (FndSearchSuggestBehavior._focusFirstQA)
      {
        // If in Screen reader mode, focus Quick Actions after the user clicks the show
        // "button".
        delete FndSearchSuggestBehavior["_focusFirstQA"];
        AdfPage.PAGE.scheduleTimer(this, this._focusFirstSRQuickAction, {}, 100);
      }
    }
  }
};

/**
 * Create the top level suggest container content, a div.
 */
FndSearchSuggestBehavior.prototype._createSuggestContainerWrapper = function(component) 
{
  var clientId = component.getClientId();
  var popupClientId = FndSearchSuggestBehavior._createSubId(clientId, FndSearchSuggestBehavior._SUGGEST_ITEMS_ID);
  var popupContainerId = FndSearchSuggestBehavior._createSubId(clientId, FndSearchSuggestBehavior._POPUP_CONTAINER_DIV_ID);
  var contentNode = FndSearchSuggestBehavior._getContentNode(component);
  var agent = AdfAgent.AGENT;
  var outerDiv = this._document.getElementById(popupContainerId);
    
  if (!outerDiv)
  {
    outerDiv = this._document.createElement("div");
    outerDiv.setAttribute("id", popupContainerId);
    outerDiv.style.display = "none";
  }
  else 
  {
    outerDiv.innerHTML = "";
  }
  
  var laf = AdfPage.PAGE.getLookAndFeel();
  // +-----------------------+-----------------------+
  // | autosuggest content   | quick actions         |
  // | <ul>                  | <ul>                  |
  // |   <li ../>            |   <li ../>            |
  // |   ...                 |   ...                 |
  // | </ul>                 | </ul>                 |
  // +-----------------------+-----------------------+
  var containerStyle = laf.getStyleClass(FndSearchSuggestBehavior._SUGGEST_INLINE_CONTAINER_STYLE);
  if (this._useGeneratedSuggestPopup)
  {
    containerStyle = laf.getStyleClass(FndSearchSuggestBehavior._SUGGEST_POPUP_CONTAINER_STYLE);
  }
  var outerElement = this._createDomElement("div", contentNode.parentNode,
                                            containerStyle, {"id": popupClientId});
  agent.elementsAdded(outerDiv);
  
  // regular suggest div and ul.
  var suggestElement = this._createDomElement("div", outerElement);

  var attrs = {};
  // Nothing selected yet.
  attrs[FndSearchSuggestBehavior._KEYBOARD_NAVIGATION_PERFORMED] = false;
  attrs['id'] = popupClientId + "_sugg";
  this._createDomElement("ul", suggestElement,
                         laf.getStyleClass(FndSearchSuggestBehavior._SUGGEST_LIST_STYLE),
                         attrs);
                         
  // desktop side panel div and ul
  if (this._formFactor === 'desktop')
  {
    var quickActionsElement = this._createDomElement("div", outerElement,
                                                     laf.getStyleClass(FndSearchSuggestBehavior._QUICK_ACTIONS_CONTAINER_STYLE));
    var qaAttrs = {};
    qaAttrs['id'] = popupClientId + "_qasugg";
    qaAttrs[FndSearchSuggestBehavior._IS_DESKTOP_QUICK_ACTIONS_LIST] = true;
    this._createDomElement("ul", quickActionsElement,
                           laf.getStyleClass(FndSearchSuggestBehavior._QUICK_ACTIONS_LIST_STYLE),
                           qaAttrs);
  }
  
  if (this._useGeneratedSuggestPopup)
  {
    // Set the minimum width of the UL tag to match the size of the component that it is attached
    // to per RCUX design specifications, but no smaller than 100px.
    // Note, subtract 2 to account for a "standard" border width
    var computedStyle = agent.getComputedStyle(contentNode);
    var contentNodeWidth;
    if (computedStyle && computedStyle.width && computedStyle.width.indexOf && computedStyle.width.indexOf("px") > 0) 
    {
      // computedStyle.width will be of the form "xxxpx"
      var offset = computedStyle.width.indexOf("px");
      contentNodeWidth = parseInt(computedStyle.width.substr(0, offset));      
    }
    if (!contentNodeWidth)
    {
      contentNodeWidth = contentNode.clientWidth - 2;
    }
    if (contentNodeWidth < 100) 
    {
      contentNodeWidth = 100;
    }
    outerElement.style.minWidth = "" + contentNodeWidth + 'px';
  }

  return outerElement;
}

/**
 * Are there any items in suggestedGroupItems to show in the primary column list 
 * (not quick actions column)?
 * @param suggestedItemGroups potential data.
 * @return true if there is data in suggestedGroupItems, false otherwise.
 */
FndSearchSuggestBehavior.prototype._hasPrimryColumnItems = function(suggestedItemGroups)
{
  var hasItems = false;
  for (var i = 0; i < suggestedItemGroups.length; i++)
  {
    var quickItems = suggestedItemGroups[i].quickActionGroup;
    if (quickItems && this._formFactor === 'desktop')
    {
      continue;
    }
    hasItems = true;
    break;
  }
  
  return hasItems;
};

/**
 * Get the count of items in suggestedGroupItems to show in the primary column list 
 * (not quick actions column).
 * @param suggestedItemGroups potential data.
 * @return count of values, possibly 0.
 */
FndSearchSuggestBehavior.prototype._countPrimryColumnItems = function(suggestedItemGroups)
{
  var ret = 0;
  for (var i = 0; i < suggestedItemGroups.length; i++)
  {
    var quickItems = suggestedItemGroups[i].quickActionGroup;
    if (quickItems && this._formFactor === 'desktop')
    {
      continue;
    }
    if (suggestedItemGroups[i].items && suggestedItemGroups[i].items.length) 
    {
      ret += suggestedItemGroups[i].items.length;
    }
  }
  
  return ret;
};

FndSearchSuggestBehavior.prototype._removeSuggestContent = function(outerDiv)
{
  if (outerDiv.firstElementChild)
  {
    var suggestUL = outerDiv.firstElementChild.firstElementChild;
    // Clobber main list items.
    if (suggestUL) {
      suggestUL.innerHTML = '';
    }
  }
  if (outerDiv.lastElementChild)
  {
    var quickActionsUL = outerDiv.lastElementChild.firstElementChild;
    if (quickActionsUL) {
      quickActionsUL.innerHTML = '';
    }
  }
};

/**
 * Add suggestions to display to the user.
 * @param submittedValue the user entered value.
 * @param outerDiv existing container to add to.
 * @param suggestedItemGroups an Array of suggest groups in order.
 */
FndSearchSuggestBehavior.prototype._addItems = function(submittedValue, 
                                                        outerDiv, 
                                                        suggestedItemGroups)
{
  var laf = AdfPage.PAGE.getLookAndFeel();
  // for desktop, use side panel.
  // for mobile, global quick actions go in with the rest of the suggest groups.
  // +-----------------------+-----------------------+ <-- outerDiv
  // | firstChild            | lastChild             |
  // +-----------------------+-----------------------+
  // | autosuggest content   | quick actions         |
  // | <ul>                  | <ul>                  |
  // |   <li ../>            |   <li ../>            |
  // |   ...                 |   ...                 |
  // | </ul>                 | </ul>                 |
  // +-----------------------+-----------------------+

  var autosuggestContainer = outerDiv.firstElementChild;
  var suggestUL = autosuggestContainer.firstElementChild;
  // ensure suggestions selected using arrow keys from last search are cleared.
  suggestUL.removeAttribute(FndSearchSuggestBehavior._SELECTED_ITEM_INDEX);
  
  var quickActionsUL = suggestUL;
  var quickActionsContainer = null;
  if (this._formFactor === 'desktop')
  {
    quickActionsContainer = outerDiv.lastElementChild;
    quickActionsUL = quickActionsContainer.firstElementChild;
  }
  var hasItems = this._hasPrimryColumnItems(suggestedItemGroups);  
  if (!hasItems)
  {
    // Empty text message in suggestions area.
    this._createDomElement("li", suggestUL,
                           laf.getStyleClass(FndSearchSuggestBehavior._NO_SUGGESTIONS_STYLE),
                           null, this._getMlsString("noMatchMessage"));
  }

  // Even though there may be no suggestions and the no match message shown,
  // render out any groups such as quick actions.
  var upperSubmittedValue = submittedValue.toUpperCase();
  var addedDesktopQA = false;
  for (var i = 0; i < suggestedItemGroups.length; i++)
  {
    var suggestedItemGroup = suggestedItemGroups[i];

    var addToUL = suggestUL;
    if (this._formFactor === 'desktop')
    {
      var quickItems = suggestedItemGroup.quickActionGroup;
      if (quickItems)
      {
        addToUL = quickActionsUL;      
        if (suggestedItemGroup.items.length)
        {
          addedDesktopQA = true;
        }
      }
      else if (!addedDesktopQA)
      {
        // Is the group configured so that all items have children.
        // Need to show the 2 column layout in case the parent is selected.
        if (suggestedItemGroup.hasDetailItems)
        {
          addedDesktopQA = true;
        }
        else 
        {
          // do any of the group items advertise that they are a parent, in which case we 
          // need to show the 2 column layout in case the parent is selected.
          var len = suggestedItemGroup.items.length;
          for (var j = 0; j < len; j++)
          {
            var item = suggestedItemGroup.items[j];
            if (item.qa)
            {
              addedDesktopQA = true;
              break;
            }
          }
        }
      }
    }
    
    this._addGroupItems(upperSubmittedValue, suggestedItemGroup, addToUL);
  }
  if (this._formFactor === 'desktop')
  {
    if (addedDesktopQA)
    {
      // make sure the style is there by remove (ignores absense) and re-add.
      // Quick Actions ...
      FndSearchSuggestBehavior._removeCSSClassName(quickActionsContainer, FndSearchSuggestBehavior._QUICK_ACTIONS_CONTAINER_STYLE);    
      FndSearchSuggestBehavior._addCSSClassName(quickActionsContainer, FndSearchSuggestBehavior._QUICK_ACTIONS_CONTAINER_STYLE);    
      // Main autosuggest with quick actions column ...
      FndSearchSuggestBehavior._removeCSSClassName(autosuggestContainer, FndSearchSuggestBehavior._SUGGEST_CONTAINER_STYLE_WITH_QA);
      FndSearchSuggestBehavior._removeCSSClassName(autosuggestContainer, FndSearchSuggestBehavior._SUGGEST_CONTAINER_STYLE_NO_QA);
      FndSearchSuggestBehavior._addCSSClassName(autosuggestContainer, FndSearchSuggestBehavior._SUGGEST_CONTAINER_STYLE_WITH_QA);
    }
    else
    {
      // clobber desktop quick actions panel style if empty.
      FndSearchSuggestBehavior._removeCSSClassName(quickActionsContainer, FndSearchSuggestBehavior._QUICK_ACTIONS_CONTAINER_STYLE);    
      // Main autosuggest in 1 column.
      FndSearchSuggestBehavior._removeCSSClassName(autosuggestContainer, FndSearchSuggestBehavior._SUGGEST_CONTAINER_STYLE_WITH_QA);
      FndSearchSuggestBehavior._removeCSSClassName(autosuggestContainer, FndSearchSuggestBehavior._SUGGEST_CONTAINER_STYLE_NO_QA);
      FndSearchSuggestBehavior._addCSSClassName(autosuggestContainer, FndSearchSuggestBehavior._SUGGEST_CONTAINER_STYLE_NO_QA);
    }
  }
  else
  {
    // mobile - single column only.
    FndSearchSuggestBehavior._removeCSSClassName(autosuggestContainer, FndSearchSuggestBehavior._SUGGEST_CONTAINER_STYLE_NO_QA);
    FndSearchSuggestBehavior._addCSSClassName(autosuggestContainer, FndSearchSuggestBehavior._SUGGEST_CONTAINER_STYLE_NO_QA);
  }
};

/**
 * Create a Dom Element given by tagName.  If parent is non-null, add it to parent.
 * @param tagName name of the element to create, for example "li".  Required.
 * @param parent optional parent Element to append the newly created Element to.
 * @param optional styleName to add to the newly created Element.
 * @param attrs optional Object of name/value pairs to add as attributes.  Example {"src", iconURL}.
 * @param text optional text to add as a child text node.
 */
FndSearchSuggestBehavior.prototype._createDomElement = function(tagName, parent, styleName, attrs, text)
{
  var ret = this._document.createElement(tagName);
  if (styleName)
  {
    FndSearchSuggestBehavior._addCSSClassName(ret, styleName);
  }
  if (attrs)
  {
    for (var property in attrs) {
      if (attrs.hasOwnProperty(property)) {
        var propValue = attrs[property];
        ret.setAttribute(property, propValue);
      }
    }
  }
  
  if (text)
  {
    ret.appendChild(this._document.createTextNode(text));
  }
  
  if (parent)
  {
    parent.appendChild(ret);
  }
  
  return ret;
};

FndSearchSuggestBehavior.prototype._addGroupItems = function(upperSubmittedValue, suggestedItemGroup, addToUL)
{
  var laf = AdfPage.PAGE.getLookAndFeel();
  
  var displayName = suggestedItemGroup.displayName;
  var name = suggestedItemGroup.name;
  var submit = suggestedItemGroup.submit;
  var placeItemInField = suggestedItemGroup.placeItemInField;
  var placeItemIdInField = suggestedItemGroup.placeItemIdInField;
  var iconURL = suggestedItemGroup.icon;
  var groupHeading = suggestedItemGroup.groupHeading;
  // Due to accessibility do not show show more/less.
  var headerMessage = null; // suggestedItemGroup.headerMessage;
  var suggestedItems = suggestedItemGroup.items;
  var suggestOnSelectedItem = suggestedItemGroup.suggestOnSelectedItem;
  var imageStyleClass = suggestedItemGroup.imageStyleClass;
  var hasDetailItems = suggestedItemGroup.hasDetailItems;
  var domId = addToUL.id + "_" + name + "_";
  
  // create the header ...
  if (groupHeading == "on")
  {
    var headerDomId = domId + "hdr";
    var liGroupAttrs = {};
    liGroupAttrs["id"] = headerDomId;
    liGroupAttrs[FndSearchSuggestBehavior._ITEM_GROUP_NAME_ATTR] = name;
    liGroupAttrs["role"] = "heading";
    liGroupAttrs["aria-level"] = "6";

    if (headerMessage)
    {
      // Only worry about click in header if show more/less is visible.
      liGroupAttrs[FndSearchSuggestBehavior._ITEM_IS_CLICKABLE_HEADER_ATTR] = "true";  
    }
    var liGroup = this._createDomElement("li", addToUL, 
                                         laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_GROUP_STYLE),
                                         liGroupAttrs);
    if (iconURL)
    {
      this._createDomElement("img", liGroup,
                             laf.getStyleClass(FndSearchSuggestBehavior._HEADER_IMG_STYLE),
                             {"src": iconURL});
    }
    
    if (AdfPage.PAGE.isScreenReaderMode())
    {
      this._createDomElement("span", liGroup,
                             laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_GROUP_HEADING_SR_STYLE), 
                             {"aria-hidden": "true"}, displayName);
    }
    else {
      this._createDomElement("span", liGroup,
                             laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_GROUP_HEADING_STYLE), 
                             {"aria-hidden": "true"}, displayName);
    }

    if (headerMessage)
    {
      var liMoreAttrs = {};
      var screenReader = AdfPage.PAGE.isScreenReaderMode();
      liMoreAttrs['aria-label'] = headerMessage + ' - ' + displayName;
      liMoreAttrs["id"] = headerDomId + "_moreless";
      
      var moreSpan = this._createDomElement("span", liGroup,
                             laf.getStyleClass(FndSearchSuggestBehavior._MORE_ITEMS_STYLE),
                             liMoreAttrs,
                             headerMessage);
      moreSpan.addEventListener("keyup", FndSearchSuggestBehavior._convertEnterToClick);
    }
  }
    
  for (var i = 0; i < suggestedItems.length; i++)
  {
    var item = suggestedItems[i];
    var headerText = displayName || "";
    var liChild = this._createSuggestion(item, upperSubmittedValue,
                                         submit, placeItemInField, placeItemIdInField, suggestOnSelectedItem,
                                         imageStyleClass, name, i, false, hasDetailItems, headerText);
    var liId = domId + i;
    liChild.setAttribute("id", liId);
    addToUL.appendChild(liChild);
  }
};

FndSearchSuggestBehavior.prototype._isASvgImage = function(img)
{
    var d = img.length - '.svg'.length;
    var lowerImg = img.toLowerCase();
    return d >= 0 && lowerImg.lastIndexOf('.svg') === d;
};

FndSearchSuggestBehavior.prototype._createSuggestion = function(item, upperSubmittedValue,
                                                                submit, 
                                                                placeItemInField, placeItemIdInField, suggestOnSelectedItem,
                                                                imageStyleClass, name, i, isMobileQuickActionChild,
                                                                hasDetailItems, headerText)
{
  var domWindow = AdfPage.PAGE.getDomWindow();
  var laf = AdfPage.PAGE.getLookAndFeel();
  var suggestedItemStyle = laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_STYLE);
  var suggestedItemTextContainerStyle = laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_TEXT_CONTAINER_STYLE);
  var suggestedItemHilightStyle  = laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_HILIGHT_STYLE);
  var suggestedItemNormalStyle  = laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_NORMAL_STYLE);
  var suggestedDescriptionHilightStyle  = laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_DESCRIPTION_HILIGHT_STYLE);
  var suggestedDescriptionNormalStyle  = laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_DESCRIPTION_NORMAL_STYLE);
  var suggestedImgStyle = imageStyleClass ? laf.getStyleClass(imageStyleClass) : laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_IMAGE_STYLE);
  var agent = AdfAgent.AGENT;
  var screenReader = AdfPage.PAGE.isScreenReaderMode();
  var ariaLabel = headerText;
  var ariaQAHint = "";

  // suggestedItem is the text the user sees.
  var suggestedItem = undefined;
  // suggestedId is the id sent to server on selection, often the same as 
  // suggestedItem, but may be a unique identifier.
  var suggestedId = undefined;
  var suggestedCount = undefined;
  var suggestedUrl = undefined;
  var suggestedIconUrl = undefined;
  var suggestedItemType = undefined;
  var suggestedDescription = undefined;
  // Is this item a master suggestion for which there are details to fetch?
  var hasQuickActions = hasDetailItems;
  var matchText = undefined;
  if (typeof item === 'string')
  {
    suggestedItem = item;
  }
  else
  {
    suggestedItem = item.n;
    suggestedId = item.i;
    suggestedCount = item.c;
    suggestedUrl = item.u;
    suggestedIconUrl = item.iu;
    suggestedItemType = item.t;
    suggestedDescription = item.d;
    if (!hasQuickActions)
    {
      // over-ride if not set at the group level.
      hasQuickActions = item.qa;
    }
    matchText = item.matchText;
  }
  if (typeof suggestedId === 'undefined')
  {
    suggestedId = suggestedItem;
  }
  if (typeof suggestedIconUrl === 'undefined')
  {
    suggestedIconUrl = FndSearchSuggestBehavior._DEFAULT_BULLET;
  }
  if (typeof matchText === 'undefined')
  {
    matchText = '';
  }

  ariaLabel = ariaLabel + " " + suggestedItem;
  var liChild = this._document.createElement("li");
  liChild.setAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR, suggestedId);
  liChild.setAttribute(FndSearchSuggestBehavior._ITEM_DISPLAY_VALUE_ATTR, suggestedItem);
  liChild.setAttribute(FndSearchSuggestBehavior._ITEM_VALUE_SUBMIT_ATTR, submit);
  liChild.setAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_IN_FIELD_ATTR, placeItemInField);
  liChild.setAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_ID_IN_FIELD_ATTR, placeItemIdInField);
  liChild.setAttribute(FndSearchSuggestBehavior._ITEM_GROUP_NAME_ATTR, name);
  liChild.setAttribute(FndSearchSuggestBehavior._ITEM_INDEX_ATTR, i);
  if (typeof suggestedItemType !== 'undefined')
  {
    liChild.setAttribute(FndSearchSuggestBehavior._ITEM_AUTOCOMPLETE_ATTR, "true");
  }
  if (suggestOnSelectedItem)
  {
    liChild.setAttribute(FndSearchSuggestBehavior._ITEM_SUGGEST_ON_SELECTED_ITEM_ATTR, "true");
  }
  if (!!hasQuickActions)
  {
    // Care needed here as hasQuickActions can be true/false or undefined (if an 
    // Object is the suggestion and this is unset).  Use !! to normalize to a boolean.
    liChild.setAttribute(FndSearchSuggestBehavior._ITEM_HAS_QUICK_ACTIONS_ATTR, "true");
  }
  if (isMobileQuickActionChild)
  {
    liChild.setAttribute(FndSearchSuggestBehavior._MOBILE_QUICK_ACTION_ATTR, "true");
    FndSearchSuggestBehavior._addCSSClassName(liChild, laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_MOBILE_QA_STYLE));
  }
  else
  {
    if (hasQuickActions && this._formFactor === 'desktop')
    {
      ariaQAHint = this._getMlsString("quickSearchArrows");
      // show css right arrow.
      FndSearchSuggestBehavior._addCSSClassName(liChild, laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_LI_DESKTOP_PARENT_STYLE));
    }
    else
    {
      FndSearchSuggestBehavior._addCSSClassName(liChild, laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_LI_STYLE));
    }
  }

  if(domWindow.AdfSafariMobileAgent && agent instanceof AdfSafariMobileAgent)
  {
    liChild.setAttribute("onclick","void(0)");
  }
  
  var suggestFlexRow = this._createDomElement("div", liChild, suggestedItemStyle);
  var quickActionParent = false;
  if (typeof suggestedUrl === "undefined" && hasQuickActions) {
    quickActionParent = true;
  }

  if (suggestedIconUrl)
  {
    var attrsImgDiv = {};
    if (quickActionParent) {
      attrsImgDiv[FndSearchSuggestBehavior._QA_PARENT_DIV] = "true";
    }
    var imageDiv = this._createDomElement("div", suggestFlexRow, 
                                          laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_IMAGE_CONTAINER_STYLE),
                                          attrsImgDiv);
    var imageIsSVG = this._isASvgImage(suggestedIconUrl);
    if (imageIsSVG)
    {
//      var hasSlash = suggestedIconUrl.indexOf('/') !== -1;
//      if (hasSlash)
//      {
        var attrsSVG = {"src": suggestedIconUrl,
                        "type": "image/svg+xml",
                        "class": FndSearchSuggestBehavior._DEFAULT_SVG_STYLE + ' ' + suggestedImgStyle,
                        "role": "presentation"};
        this._createDomElement('img', imageDiv, null, attrsSVG);
//      } else {
//        // treat as a suiicon.  The xml will be inlined by the inject call allowing
//        // descendent styling to be applied.
//        var suiKey = suggestedIconUrl.substr(0, suggestedIconUrl.length - ".svg".length);
//        var attrsSuiSVG = {"data-icon": suiKey,
//                           "class": FndSearchSuggestBehavior._DEFAULT_SVG_STYLE + ' ' + suggestedImgStyle
//                          };
//        var divIcon = this._createDomElement('div', imageDiv, null, attrsSuiSVG);
//        if (typeof suiicons !== 'undefined')
//        {
//          try {
//            var rtl = AdfPage.PAGE.getLocaleContext().isRightToLeft();
//            suiicons.inject([divIcon], null, rtl);
//          } catch(exe) {
//            AdfLogger.LOGGER.severe("Exception ocurred while injecting suiicon inline.", exe);
//          }
//        }
//      }
    }
    else
    {
      var attrs = {"src": suggestedIconUrl,
                   "class": suggestedImgStyle,
                   "role": "presentation"};
      if (quickActionParent) {
        attrs[FndSearchSuggestBehavior._QA_PARENT_DIV] = "true";
      }
      this._createDomElement('img',
                             imageDiv, null, attrs);
    }
  }
  
  var suggestTextDiv = this._createDomElement("div", suggestFlexRow, suggestedItemTextContainerStyle);

  // First row of suggestion ....
  var suggestTextRow1Div = this._createDomElement("div", suggestTextDiv, null, {"aria-hidden": "true"});
  suggestTextRow1Div.setAttribute("title", suggestedItem);
  
  var href = null;
  if (typeof suggestedUrl !== "undefined")
  {
    // above test to avoid 0 count being misinterpreted as false.
    href = this._createDomElement("a", suggestTextRow1Div, null,
                                  {"href": suggestedUrl,
                                   "target": "_blank",
                                   "aria-hidden": "true"});
  }
  // add as a link or directly under div.
  this._addItem(href ? href : suggestTextRow1Div, 
                matchText,  
                suggestedItem,
                suggestedItemNormalStyle, suggestedItemHilightStyle,
                quickActionParent,
                screenReader);
  
  // Second row of suggestion, no screen reader support ...
  if (suggestedDescription)
  {
    var descAttrs = {"aria-hidden": "true"};
    var suggestTextRow2Div = this._createDomElement("div", suggestTextDiv, null, descAttrs);
    this._addItem(suggestTextRow2Div, matchText,  
                  suggestedDescription,
                  suggestedDescriptionNormalStyle, suggestedDescriptionHilightStyle,
                  quickActionParent,
                  false);
  }

  if (hasQuickActions)
  {
    var qaAttrs = {};
    var qaStyle = laf.getStyleClass(FndSearchSuggestBehavior._DESKTOP_SHOW_QUICK_ACTION_STYLE);
    if (this._formFactor === 'mobile')
    {
      qaStyle = laf.getStyleClass(FndSearchSuggestBehavior._MOBILE_SHOW_QUICK_ACTION_STYLE);
    }
    this._createDomElement("div", suggestFlexRow, qaStyle, qaAttrs);
  }
  
  if (typeof suggestedCount !== "undefined")
  {
    // above test to avoid 0 count being misinterpreted as false.
    ariaLabel = ariaLabel + " " + 
                TrFastMessageFormatUtils.format(this._getMlsString("suggestionCount"),
                                                suggestedCount);
    var countDiv = this._createDomElement("div", suggestFlexRow, 
                                          laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_COUNT_CONTAINER_STYLE),
                                          {"aria-hidden": "true"});
    this._createDomElement("span", countDiv, 
                           laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_COUNT_STYLE),
                           null, suggestedCount);
  }
  
  ariaLabel = ariaLabel + ". " + ariaQAHint;
  liChild.setAttribute("fndInstructions", ariaLabel);  
  return liChild;
};


FndSearchSuggestBehavior.prototype._addItem = function(addTo, upperSubmittedValue,  
                                                       suggestedItem,
                                                       suggestedItemNormalStyle, suggestedItemHilightStyle,
                                                       quickActionParentText,
                                                       screenReader)
{
  var upperSuggestedItem = suggestedItem.toUpperCase();
  // turn some 'some matched string' with submittedValue matched
  // into it's component parts so can create correct html nodes.
  // i.e. <span>some <b>matched</b>string</span>
  var attrs = {};
  if (quickActionParentText) {
    attrs[FndSearchSuggestBehavior._QA_PARENT_DIV] = "true";
  }

  // Hilight the text, unless in screen reader more (which causes issues with reading 
  // partial-terms denoted by the individual divs).
  
  var boldIndex = screenReader ? -1 : upperSuggestedItem.indexOf(upperSubmittedValue);
  if (boldIndex != -1 && !!upperSubmittedValue)
  {
    var first = suggestedItem.substring(0, boldIndex);
    var boldText = suggestedItem.substring(boldIndex, boldIndex + upperSubmittedValue.length);
    var rest = suggestedItem.substring(boldIndex + upperSubmittedValue.length);
    
    this._createDomElement("span", addTo, suggestedItemNormalStyle, attrs, first);
    this._createDomElement("span", addTo, suggestedItemHilightStyle, attrs, boldText);
    this._createDomElement("span", addTo, suggestedItemNormalStyle, attrs, rest);
  }
  else
  {
    var suggestSpan = this._createDomElement("span", addTo, suggestedItemNormalStyle, attrs, suggestedItem);
    if (screenReader) {
      suggestSpan.addEventListener("keyup", FndSearchSuggestBehavior._convertEnterToClick);
    }
  }
}
  
/**
 * Show the suggestedItems in the autosuggest popup.
 */
FndSearchSuggestBehavior.prototype._showPopup = function(component, submittedValue, suggestedItems)
{
  var peer = component.getPeer();
  peer.bind(component);
  
  var clientId = component.getClientId();
  var popupClientId = FndSearchSuggestBehavior._createSubId(clientId, FndSearchSuggestBehavior._SUGGEST_ITEMS_ID);
  var outerDiv;

  if (peer.isPopupVisible(component, FndSearchSuggestBehavior._POPUP_PANEL_ID)) 
  {
    outerDiv = this._document.getElementById(popupClientId);
    this._removeSuggestContent(outerDiv);
    this._addItems(submittedValue, outerDiv, suggestedItems);
  }
  else
  {
    // Popup not already open.
    outerDiv = this._createSuggestContainerWrapper(component);
    this._addItems(submittedValue, outerDiv, suggestedItems);
    this._showInPopup(component, outerDiv);
  }
}

/**
 * Show the loading message in the dynamically generated autosuggest popup.
 * This will only be shown once, and is protected by the _serverStateExists variable.
 */
FndSearchSuggestBehavior.prototype._showLoadingSuggestions = function(component)
{
  if (this._showTopSuggestionsLoadingMessage && !this._serverStateExists)
  {
    // Show loading message, but only once!
    this._serverStateExists = true;
    if (this._topSuggestions)
    {
      if (this._useGeneratedSuggestPopup)
      {
        this._showLoadingSuggestionsPopup(component);
      }
      else
      {
        if (this._adfPopupId)
        {
          this._showPopupUnderComponent(component, this._adfPopupId);
        }
        this._showLoadingSuggestionsInline(component);
      }
    }
  }
}

/**
 * Show the loading message in the dynamically generated autosuggest popup.
 */
FndSearchSuggestBehavior.prototype._showLoadingSuggestionsPopup = function(component)
{
  var peer = component.getPeer();
  peer.bind(component);
  var clientId = component.getClientId();
  
  var popupClientId = FndSearchSuggestBehavior._createSubId(clientId, FndSearchSuggestBehavior._SUGGEST_ITEMS_ID);
  var outerDiv;

  if (peer.isPopupVisible(component, FndSearchSuggestBehavior._POPUP_PANEL_ID)) 
  {
    outerDiv = this._document.getElementById(popupClientId);
    this._removeSuggestContent(outerDiv);
    this._addShowLoadingSuggestionsItems(outerDiv);
  }
  else
  {
    // Popup not already open.
    outerDiv = this._createSuggestContainerWrapper(component);
    this._addShowLoadingSuggestionsItems(outerDiv);
    this._showInPopup(component, outerDiv);
  }
}

/**
 * Show loading message inline for component.
 * @param component input text component.
 */
FndSearchSuggestBehavior.prototype._showLoadingSuggestionsInline = function(component)
{
  var outerDiv = this._createSuggestContainerWrapper(component);
  this._addShowLoadingSuggestionsItems(outerDiv);
  this._showInline(component, outerDiv);
}


/**
 * Add a show loading message to display to the user.
 * @param outerDiv existing container to add to.
 */
FndSearchSuggestBehavior.prototype._addShowLoadingSuggestionsItems = function(outerDiv)
{
  var laf = AdfPage.PAGE.getLookAndFeel();
  var ulElement = outerDiv.firstElementChild.firstElementChild;
  // Loading Suggestions text message.
  this._createDomElement("li", ulElement, laf.getStyleClass(FndSearchSuggestBehavior._PROGRESS_TEXT_ITEM_STYLE),
                         null, textNode);
  var liSpace = this._createDomElement("li", ulElement);
  this._createDomElement("img", liSpace, null,
                         {"width": "5", "height": "20"});
  
  var liProgressBar = this._createDomElement("li", ulElement);
  this._createDomElement("img", liProgressBar, laf.getStyleClass(FndSearchSuggestBehavior._PROGRESS_IMAGE_ITEM_STYLE),
                         {"src": "images/applcore/uishell/globalSearch/t.gif", "width": "114", "height": "16"});
};

/** 
 * Schedule (or reschedule, if it already exists) a timer that will call
 * the autosuggest functionality.
 * @param comonent
 * @param mSecs number of milliseconds to set timer for.
 */
FndSearchSuggestBehavior.prototype._scheduleTimer = function(component, mSecs)
{
  var page = AdfPage.PAGE;
  if (this._timerId)
  {
    page.rescheduleTimer(this._timerId, mSecs);
  }
  else
  {
    this._timerId = page.scheduleTimer(this, 
                                       this._autoSuggest, 
                                       component, mSecs);
  }
}

/** 
 * Cancel the timer.
 */
FndSearchSuggestBehavior.prototype._cancelTimer = function()
{
  var timerId = this._timerId;
  if (timerId) 
  {
    AdfPage.PAGE.cancelTimer(timerId);
    delete this._timerId
  }
}

FndSearchSuggestBehavior.prototype._scrollIntoViewIfNeeded = function(domElement) 
{
  var rect = domElement.getBoundingClientRect();
  var shown = rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
      rect.right <= (window.innerWidth || document.documentElement.clientWidth);
  if (!shown)
  {
    domElement.scrollIntoView();
  }
};

/**
 * Select selectedLI.  This will hilight the item in the list, as well as copy 
 * the text value of the selected item into the field this behavior is defined
 * on.  This method is typically called during keyboard navigation.
 * @param componentEvent adf event.
 * @param suggestUL unordered list of LI items.
 * @param selectedLI the Dom Element that has been selected.
 */
FndSearchSuggestBehavior.prototype._selectItem = function(componentEvent, 
                                                          suggestUL,
                                                          selectedLI)
{
  var eventTarget = componentEvent.getNativeEventTarget();
  if (eventTarget.tagName == 'INPUT')
  {
    var groupName             = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_GROUP_NAME_ATTR);
    var value                 = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
    var displayValue          = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_DISPLAY_VALUE_ATTR);
    var submit                = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_SUBMIT_ATTR);
    var placeItemInField      = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_IN_FIELD_ATTR);
    var placeItemIdInField    = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_PLACE_ID_IN_FIELD_ATTR);
    var quickActionsParent    = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_HAS_QUICK_ACTIONS_ATTR);
    var suggestOnSelectedItem = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_SUGGEST_ON_SELECTED_ITEM_ATTR);
    var fndInstructions       = selectedLI.getAttribute("fndInstructions");
    var ariaLabel             = selectedLI.getAttribute("aria-label");
    var component = componentEvent.getSource();
    
    var selectedId = selectedLI.id;
    if (fndInstructions && ! ariaLabel)
    {
      // Swap in aria label after list is shown.
      selectedLI.setAttribute("aria-label", fndInstructions);
      selectedLI.removeAttribute("fndInstructions");
    }
    eventTarget.setAttribute("aria-activedescendant", selectedId);
    // This is dangerous as it can scroll out parts of the UI we always want shown.
    this._scrollIntoViewIfNeeded(selectedLI);
    
    if ("true" == placeItemInField)
    {
      var valueForSearchField = displayValue;
      if ("true" == placeItemIdInField)
      {
        valueForSearchField = value;
      }
      if (!suggestOnSelectedItem)
      {
        eventTarget.value = valueForSearchField;
      }
      
      this._setSearchFieldMode(component, "false" == submit, groupName, value);
      // Update the "search for 'linda'" message if there is one.  Use the quotes 
      // to find the content to be replaced.
      if (this._adfPopupId && this._adfMessageComponentId)
      {
        var messageComponent = component.findComponent(this._adfMessageComponentId);
        if (messageComponent && messageComponent.getText && messageComponent.setText)
        {
          var contentNode = FndSearchSuggestBehavior._getContentNode(messageComponent);
          var currentText = contentNode.innerHTML;
          if (currentText)
          {
            // Stop search for message bloating popup.
            var fieldText = valueForSearchField;
            if (fieldText && fieldText.length > 20)
            {
              if (AdfPage.PAGE.getLocaleContext().isRightToLeft())
              {
                fieldText = FndSearchSuggestBehavior._ELLIPSIS + fieldText.substr(0, 20);
              }
              else
              {
                fieldText = fieldText.substr(0, 20) + FndSearchSuggestBehavior._ELLIPSIS;
              }
            }
            var res = currentText.replace(/'.*'/g, "'" + fieldText + "'");
            contentNode.innerHTML = res;
            (res == "") ? contentNode.style.visibility = "hidden" : contentNode.style.visibility = "visible";
            // This triggers JSF lifecycle on client and will trigger required field
            // validation and cancel our popup
            // messageComponent.setText(res);
          }
        }
      }
    }
    
    // If we are a parent node, make sure the children are selected.
    // If a child, do nothing.
    var qaList = suggestUL.getAttribute(FndSearchSuggestBehavior._IS_DESKTOP_QUICK_ACTIONS_LIST);
    if (!qaList)
    {
      if (quickActionsParent)
      {
        this._doQuickAction(component, groupName, value, selectedLI);
      }
      else 
      {
        // Make sure any detail level quick actions on desktop are replaced with 
        // global quick actions.
        if (this._formFactor === 'desktop')
        {
          this._reDisplayGlobalQuickAction(component, eventTarget.value);
        }
      }
    }
  }
  this._visuallySelectItemNode(selectedLI);
}

/**
 * Visually select the selectedLI in the dom by adding hilight style and flagging 
 * selection index on parent.
 * @param selectedLI a li to visually select.
 */
FndSearchSuggestBehavior.prototype._visuallySelectItemNode = function(selectedLI)
{
  var laf = AdfPage.PAGE.getLookAndFeel();
  // for parents that are selected.
  var parentArrowStyleClass = laf.getStyleClass(FndSearchSuggestBehavior._SUGGESTED_ITEM_LI_DESKTOP_PARENT_ARROW_STYLE);
  
  var ul = selectedLI.parentNode;
  if (ul) {
    var currentlySelectedIndex = ul.getAttribute(FndSearchSuggestBehavior._SELECTED_ITEM_INDEX);
    if (currentlySelectedIndex) 
    {
      var oldSelectedItem = this._getCurrentSelectedItem(ul, currentlySelectedIndex);
      if (oldSelectedItem) {
        FndSearchSuggestBehavior._removeCSSClassName(oldSelectedItem, FndSearchSuggestBehavior._SELECTED_STYLE_CLASS);
        var oldQuickActionsParent = oldSelectedItem.getAttribute(FndSearchSuggestBehavior._ITEM_HAS_QUICK_ACTIONS_ATTR);
        if (typeof oldQuickActionsParent !== 'undefined' && this._formFactor === 'desktop')
        {
          // Remove arrow if it is there.
          var liRow = FndSearchSuggestBehavior._getFirstChildElement(oldSelectedItem);
          var oldArrowItem = FndSearchSuggestBehavior._getLastChildElement(liRow);
          if (FndSearchSuggestBehavior.containsCSSClassName(oldArrowItem, parentArrowStyleClass))
          {
            liRow.removeChild(oldArrowItem);
          }
        }
      }
    }
    FndSearchSuggestBehavior._addCSSClassName(selectedLI,  FndSearchSuggestBehavior._SELECTED_STYLE_CLASS);
    var selectedIndex = FndSearchSuggestBehavior._getElementPosition(selectedLI);
    // Set index on <ul>
    ul.setAttribute(FndSearchSuggestBehavior._SELECTED_ITEM_INDEX, selectedIndex);
    
    var quickActionsParent = selectedLI.getAttribute(FndSearchSuggestBehavior._ITEM_HAS_QUICK_ACTIONS_ATTR);
    if (!!quickActionsParent && this._formFactor === 'desktop')
    {
      // show css right arrow.  We do this by calculating the height and dynamically inserting a div.
      // Use as much style from css, but the border widths are not % or calc() able.
      var height = selectedLI.offsetHeight;
      if (height)
      {
        var topHeight = Math.floor(height / 2) - 2;
        var bottomHeight = Math.ceil(height / 2);
        var inlineStyle = "border-width: " + topHeight + "px 0 " + bottomHeight + "px 5px;";
        if (AdfPage.PAGE.getLocaleContext().isRightToLeft())
        {
          inlineStyle = "border-width: " + topHeight + "px 5px " + bottomHeight + "px 0;";
        }
        this._createDomElement("div", FndSearchSuggestBehavior._getFirstChildElement(selectedLI), parentArrowStyleClass,
                               {"style": inlineStyle});
      }
    }

  }
};

/**
 * Get the quick actions UL from selectedLI.
 * @param selectedLI the List Item of the primary list - i.e. the parent.
 */
FndSearchSuggestBehavior.prototype._getQuickActionsULFromSelectedParentLI = function(selectedLI)
{
  var parentDiv = selectedLI.parentNode.parentNode.parentNode;
  var quickActionsUL = parentDiv.lastElementChild.firstElementChild;
  return quickActionsUL;
};

/**
 * Get the selected quick actions LI, if any.
 * @param selectedLI the List Item of the primary list - i.e. the parent.
 */
FndSearchSuggestBehavior.prototype._getSelectedQuickActionsElement = function(selectedLI)
{
  var quickActionsUL = this._getQuickActionsULFromSelectedParentLI(selectedLI);
  var selectedIndex = quickActionsUL.getAttribute(FndSearchSuggestBehavior._SELECTED_ITEM_INDEX);
  var selectedQALI = this._getCurrentSelectedItem(quickActionsUL, selectedIndex);
  
  return selectedQALI;
};

/**
 * Select the first quick action Selection.
 * @param componentEvent event 
 * @param selectedLI the List Item of the primary list - i.e. the parent.
 */
FndSearchSuggestBehavior.prototype._selectFirstQuickActionsElement = function(componentEvent,
                                                                              selectedLI)
{
  var quickActionsUL = this._getQuickActionsULFromSelectedParentLI(selectedLI);
  this._selectFirstElement(componentEvent, quickActionsUL);
};

/**
 * De-select the selected quick action Selection.
 * @param componentEvent event 
 * @param selectedLI the List Item of the primary list - i.e. the parent.
 */
FndSearchSuggestBehavior.prototype._unselectQuickActionsElement = function(componentEvent,
                                                                           selectedLI)
{
  var quickActionsUL = this._getQuickActionsULFromSelectedParentLI(selectedLI);
  quickActionsUL.removeAttribute(FndSearchSuggestBehavior._SELECTED_ITEM_INDEX);
  var eventTarget = componentEvent.getNativeEventTarget();
  if (eventTarget.tagName == 'INPUT')
  {
    var selectedId = selectedLI.id;
    eventTarget.setAttribute("aria-activedescendant", selectedId);
  }
};

/**
 * Select the first "selectable" i.e. non-group Element.
 * @param componentEvent adf event.
 * @param suggestUL container of items.
 */
FndSearchSuggestBehavior.prototype._selectFirstElement = function(componentEvent, 
                                                                  suggestUL)
{
  this._keyboardFocusPersonalizableButton(componentEvent, false);
  var item = FndSearchSuggestBehavior._getFirstChildElement(suggestUL);
  if (!item)
  {
    // empty list.
    return;
  }
  
  var value = item.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
  // Skip over groups.
  while (!value)
  {
    // it's a group node, skip over it.
    item = FndSearchSuggestBehavior._getNextElement(item);
    if (!item)
    {
      // end of header only list.
      var qaList = suggestUL.getAttribute(FndSearchSuggestBehavior._IS_DESKTOP_QUICK_ACTIONS_LIST);
      var personalizable = this._isPersonalizable(componentEvent);
      if (!qaList && personalizable)
      {
        suggestUL.removeAttribute(FndSearchSuggestBehavior._SELECTED_ITEM_INDEX);
        this._keyboardFocusPersonalizableButton(componentEvent, true);
      }
      return;
    }
    value = item.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
  }

  if (value)
  {
    this._selectItem(componentEvent, suggestUL, item);
  }
}

/**
 * Select the last "selectable" i.e. non-group Element.
 * @param componentEvent adf event.
 * @param suggestUL container of items.
 */
FndSearchSuggestBehavior.prototype._selectLastElement = function(componentEvent, 
                                                                 suggestUL)
{
  this._keyboardFocusPersonalizableButton(componentEvent, false);
  var item = FndSearchSuggestBehavior._getLastChildElement(suggestUL);
  if (!item)
  {
    // empty list.
    return;
  }
  
  var value = item.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
  // Skip over groups.
  while (!value)
  {
    // it's a group node, skip over it.
    item = FndSearchSuggestBehavior._getPreviousElement(item);
    if (!item)
    {
      // end of header only list.
      return;
    }
    value = item.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
  }

  if (value)
  {
    this._selectItem(componentEvent, suggestUL, item);
  }
}

/**
 * Select the next "selectable" i.e. non-group Element.  This method will roll
 * if needed.
 * @param componentEvent adf event.
 * @param suggestUL container of items.
 * @param currentItem current item, already unselected.
 */
FndSearchSuggestBehavior.prototype._selectNextElement = function(componentEvent, 
                                                                 suggestUL,
                                                                 currentItem)
{
  this._keyboardFocusPersonalizableButton(componentEvent, false);
  // arrowing down from an existing selection.
  var item = FndSearchSuggestBehavior._getNextElement(currentItem);
  if (!item)
  {
    item = this._rollOffEndOfList(componentEvent, suggestUL, true);
  }
  while (item)
  {
    // Skip over groups.
    var value = item.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
    if (value)
    {
      this._selectItem(componentEvent, suggestUL, item);
      return;
    }

    // it's a group node, skip over it.
    item = FndSearchSuggestBehavior._getNextElement(item);
    if (!item)
    {
      // rolled off list, reset to top of list.
      item = this._rollOffEndOfList(componentEvent, suggestUL, true);
    }
    if (item == currentItem)
    {
      // unlikely wrap around list.  Implies there is only 1 selectable value.
      // Reselect it.
      this._selectItem(componentEvent, suggestUL, item);
      return;
    }
  }    
}

FndSearchSuggestBehavior.prototype._rollOffEndOfList = function(componentEvent, 
                                                                suggestUL,
                                                                down)
{
  var ret = null;
  var qaList = suggestUL.getAttribute(FndSearchSuggestBehavior._IS_DESKTOP_QUICK_ACTIONS_LIST);
  var personalizable = this._isPersonalizable(componentEvent);
  if (!qaList && personalizable)
  {
    suggestUL.removeAttribute(FndSearchSuggestBehavior._SELECTED_ITEM_INDEX);
    this._keyboardFocusPersonalizableButton(componentEvent, true);
  }
  else
  {
    if (down)
    {
      // rolled off list, reset to top of list.
      ret = FndSearchSuggestBehavior._getFirstChildElement(suggestUL);
    }
    else
    {
      // rolled off list, reset to top of list.
      ret = FndSearchSuggestBehavior._getLastChildElement(suggestUL);
    }
  }
  return ret;
};

FndSearchSuggestBehavior.prototype._isPersonalizable = function(componentEvent)
{
  var personalizeBtn = this._getPersonalizableButton(componentEvent);
  if (personalizeBtn)
  {
    return true;
  }
  return false;
};

FndSearchSuggestBehavior.prototype._getPersonalizableButton = function(componentEvent)
{
  var searchField = componentEvent.getSource();
  var searchPersonalizeBtnId = searchField.getProperty("searchPersonalizeBtn");
  if (searchPersonalizeBtnId)
  {
    var personalizeBtn = searchField.findComponent(searchPersonalizeBtnId);
    return personalizeBtn;
  }
  return null;
};

FndSearchSuggestBehavior.prototype._getPersonalizableDomNode = function(componentEvent)
{
  var personalizeBtn = this._getPersonalizableButton(componentEvent);
  if (personalizeBtn)
  {
    var pbClientId = personalizeBtn.getClientId();
    var pbDomNode = AdfAgent.AGENT.getElementById(pbClientId);
    return pbDomNode;
  }
  return null;
};

FndSearchSuggestBehavior.prototype._clickPersonalizableButton = function(componentEvent)
{
  var pbDomNode = this._getPersonalizableDomNode(componentEvent);
  pbDomNode.click();
};

FndSearchSuggestBehavior.prototype._keyboardFocusPersonalizableButton = function(componentEvent, focus)
{
  this._personalizeSelectedByKeyboard = focus;
  var pbDomNode = this._getPersonalizableDomNode(componentEvent);
  if (focus)
  {
    FndSearchSuggestBehavior._addCSSClassName(pbDomNode, FndSearchSuggestBehavior._HOVER_STYLE_CLASS);
    // this._scrollIntoViewIfNeeded(pbDomNode);
    //var eventTarget = componentEvent.getNativeEventTarget();
    //eventTarget.setAttribute("aria-activedescendant", pbDomNode.id);
    AdfPage.PAGE.announceToAssistiveTechnology(this._getMlsString("personalize"), false);
  }
  else
  {
    FndSearchSuggestBehavior._removeCSSClassName(pbDomNode, FndSearchSuggestBehavior._HOVER_STYLE_CLASS);
  }
};

/**
 * Select the previous "selectable" i.e. non-group Element.  This method will roll
 * if needed.
 * @param componentEvent adf event.
 * @param suggestUL container of items.
 * @param currentItem current item, already unselected.
 */
FndSearchSuggestBehavior.prototype._selectPrevElement = function(componentEvent, 
                                                                 suggestUL,
                                                                 currentItem)
{
  this._keyboardFocusPersonalizableButton(componentEvent, false);
  // arrowing down from an existing selection.
  var item = FndSearchSuggestBehavior._getPreviousElement(currentItem);
  if (!item)
  {
    item = this._rollOffEndOfList(componentEvent, suggestUL, false);
  }
  while (item)
  {
    // Skip over groups.
    var value = item.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
    if (value)
    {
      this._selectItem(componentEvent, suggestUL, item);
      return;
    }

    // it's a group node, skip over it.
    item = FndSearchSuggestBehavior._getPreviousElement(item);
    if (!item)
    {
      // rolled off list, reset to bottom of list.
      item = this._rollOffEndOfList(componentEvent, suggestUL, false);
    }
    if (item == currentItem)
    {
      // unlikely wrap around list.  Implies there is only 1 selectable value.
      // Reselect it.
      this._selectItem(componentEvent, suggestUL, item);
      return;
    }
  }
};


/**
 * Do a search with the entered value in the search field.
 * @param event event on searh field that triggered this.
 * @return true if the search was submitted, false otherwise.
 */
FndSearchSuggestBehavior.prototype._submitSearch = function(event) 
{
  var ret = false;
  // The autosuggest value will already have been placed in the search 
  // field, submit it.
  if (this._submitOnEnterComponentId)
  {
    var searchField = event.getSource();
    var searchButton = searchField.findComponent(this._submitOnEnterComponentId);
    if (searchButton)
    {
      // Only submit if more than allowed chars.  Error will be shown on search
      // button if it explicitly clicked.
      var searchValue = FndSearchSuggestBehavior._getContentNode(searchField).value;
      if (searchValue.trim)
      {
        searchValue = searchValue.trim();
      }
      if (searchValue.length >= this._searchFieldMinSearchLength)
      {
        AdfActionEvent.queue(searchButton, searchButton.getPartialSubmit());
        this._hideSuggestPopup(searchField);
        ret = true;
      }
      else
      {
        var msg = TrFastMessageFormatUtils.format(this._getMlsString("requiredCharsToSearchMessage"),
                                                  this._searchFieldMinSearchLength);
        this._showFacesMessage(searchField, AdfFacesMessage.TYPE_ERROR, null, msg);
        searchField.focus();
        // For global search which uses expando field widths, kill the timer that
        // results in the field shrinking down (if it exists).
        var inputTextSrcId = searchField.getAbsoluteId();
        var existingTimerId = page.getPageProperty("FndGlobalSearchTimer_" + inputTextSrcId);
        if (existingTimerId)
        {
          AdfPage.PAGE.cancelTimer(existingTimerId);
        }
        FndSearchSuggestBehavior.advertiseClickOrigin(searchField, searchField);

        var now = new Date().getTime() + 10000;
        page.setPageProperty("FndGlobalSearchFieldLastFocus_" + inputTextSrcId, now);
      }
    }
  }
  return ret;
};

/**
 * Show a faces message on component.
 * @param component component to show message against.
 * @param messageType standard message type constant
 * @param summary text (possibly null).
 * @param detail detailed message.
 */
FndSearchSuggestBehavior.prototype._showFacesMessage = function(component, messageType, summary, detail)
{
  var page = AdfPage.PAGE;
  var clientId = component.getClientId();
  page.clearMessages(clientId);
  var message = new AdfFacesMessage(messageType, summary, detail);
  page.addMessage(clientId, message);
  //component.setProperty("valid", false);
  //component.focus();
};



/**
 * Hilght the popup entry value with fieldValue.
 * @param fieldValue value from search field.
 * @param items in popup.
 */
FndSearchSuggestBehavior.prototype._hilightValue = function(fieldValue, 
                                                            suggestUL)
{
  if (!fieldValue)
  {
    return;
  }
  var item = FndSearchSuggestBehavior._getFirstChildElement(suggestUL);
  
  while (item)
  {
    var value = item.getAttribute(FndSearchSuggestBehavior._ITEM_VALUE_ATTR);
    if (fieldValue == value)
    {
      FndSearchSuggestBehavior._addCSSClassName(item, FndSearchSuggestBehavior._SELECTED_STYLE_CLASS);
      var selectedIndex = FndSearchSuggestBehavior._getElementPosition(item);
      suggestUL.setAttribute(FndSearchSuggestBehavior._SELECTED_ITEM_INDEX, selectedIndex);
                            
      //this._selectItem(componentEvent, suggestUL, item);
      return;
    }
    item = FndSearchSuggestBehavior._getNextElement(item);
  }
}


/**
 * Show the popup identified by popupId under component.
 * @param component some component under which to show an adf popup.
 * @param popupId Id of popup to show.
 */
FndSearchSuggestBehavior.prototype._showPopupUnderComponent = function(component, popupId)
{
  AdfObject.ensureClassInitialization(AdfRichPopup);

  var popup = component.findComponent(popupId);
  if (popup != undefined && !popup.isPopupVisible())
  {
    this._adfSearchFieldClientId = component.getClientId();
    var searchFieldRootComponentId = component.getProperty("searchFieldRootComponentId");
    var searchPopupRootComponentId = component.getProperty("searchPopupRootComponentId");
    var searchPopupDelayExpansion  = component.getProperty("searchPopupDelayExpansion");
    var autodismiss = AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU;
    if (searchFieldRootComponentId && searchPopupRootComponentId)
    {
      // We handle autodismiss.
      var popupRootPanel = component.findComponent(searchPopupRootComponentId);
      this._adfPopupRootPanelId = popupRootPanel.getClientId();
      var rootPanel = component.findComponent(searchFieldRootComponentId);
      this._adfRootPanelClientId = rootPanel.getClientId();
      this._adfPopup = popup;
      autodismiss = AdfDhtmlPopupWindow.HINT_AUTODISMISS_NEVER;
    }
    
    var hints = {};
    if (AdfPage.PAGE.isScreenReaderMode())
    {
      hints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_LOVCOMBOBOX;
    } else {
      hints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_MENU;
    }
    hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = autodismiss;
    hints[AdfDhtmlPopupWindow.HINT_FOCUS] = false;
    hints[AdfDhtmlPopupWindow.HINT_CLOSE_ON_ESCAPE] = true;
//    hints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER] = this.createCallback(this._firePopupClosed);
//    hints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER_PARAM] = component;
//    hints[AdfDhtmlPopupWindow.HINT_OPENED_HANDLER] = this.createCallback(this._firePopupOpening);
//    hints[AdfDhtmlPopupWindow.HINT_OPENED_HANDLER_PARAM] = component;
    hints[AdfRichPopup.HINT_ALIGN] = AdfRichPopup.ALIGN_AFTER_START;
    hints[AdfRichPopup.HINT_LAUNCH_ID] = this._adfSearchFieldClientId;
    hints[AdfRichPopup.HINT_ALIGN_ID] = FndSearchSuggestBehavior._createSubId(this._adfSearchFieldClientId, "content");
//    hints[AdfDhtmlPopupWindow.HINT_UNSCOPED] = AdfDhtmlPopupWindow.HINT_UNSCOPED_ALWAYS;
    
    // Allow popup to delay for expando ease out.
    var popupDelay = 10;
    if (searchPopupDelayExpansion)
    {
      popupDelay = 500;
    }
    AdfPage.PAGE.scheduleTimer(this, 
                               this._showDelayedPopup,
                               {popup:popup, hints:hints}, popupDelay);
  }
};

/**
 * Show a slightly delayed popup to allow for the expando field to finish expanding
 * so we have a stable anchor for the popup alignment.
 * @param obj object containing popup and hints object.
 */
FndSearchSuggestBehavior.prototype._showDelayedPopup = function(obj)
{
  obj.popup.show(obj.hints);
  if (obj.hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] == AdfDhtmlPopupWindow.HINT_AUTODISMISS_NEVER
      && !AdfPage.PAGE.isScreenReaderMode())
  {
    this._registerAutodismissalEventHandlers();
  }
};

FndSearchSuggestBehavior.prototype._registerAutodismissalEventHandlers = function() {
  // This code borrowed and adapted from AdfAutoDismissalManager in core.js.
  var agent = AdfAgent.AGENT;
//  var isIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
//  var isWebkit = agent.getPlatform() == AdfAgent.WEBKIT_PLATFORM;
  var domDocument = agent.getDomDocument();
//  var keyupCallback = this._adfPopupKeyupCallback = this.createCallback(this._handleKeyUpToDismiss);
//  agent.addBubbleEventListener(domDocument, "keyup", keyupCallback);
  var mousedownCallback = this._adfPopupMousedownCallback = this.createCallback(this._handleMouseDownToDismiss);
  agent.addBubbleEventListener(domDocument.body, "mousedown", mousedownCallback);
//  if(isIE) {
//    var focusinCallback = this._focusinCallback = this.createCallback(this._handleFocusIn);
//    agent.addBubbleEventListener(domDocument, "focusin", focusinCallback)
//  }else {
//    if(isWebkit) {
//      var domWindow = agent.getDomWindow();
//      var blurCallbackWin = this._blurCallback = this.createCallback(this._handleBlur);
//      agent.addBubbleEventListener(domWindow, "blur", blurCallbackWin)
//    }else {
//      var blurCallback = this._blurCallback = this.createCallback(this._handleBlur);
//      agent.addBubbleEventListener(domDocument, "blur", blurCallback)
//    }
//  }
//  var mouseoverCallback = this._mouseoverCallback = this.createCallback(this._handleMouseOver);
//  agent.addBubbleEventListener(domDocument, "mouseover", mouseoverCallback)
};
FndSearchSuggestBehavior.prototype._handleMouseDownToDismiss = function(evt) {
  if (!AdfAgent.AGENT.isDefaultPrevented(evt)) {
    if (this._adfPopup && this._adfPopup.isPopupVisible())
    {
      var clickedElement = AdfAgent.AGENT.getEventTarget(evt);
      var popupRootElement = this._document.getElementById(this._adfPopupRootPanelId);
      var clickedInPopup = FndSearchSuggestBehavior._isAncestorOrSelf(popupRootElement, clickedElement);
      FndSearchSuggestBehavior._log("_handleMouseDownToDismiss: clickedInPopup: " + clickedInPopup);
      
      var rootPanelElement = this._document.getElementById(this._adfRootPanelClientId);
      var clickedInRootPanel = FndSearchSuggestBehavior._isAncestorOrSelf(rootPanelElement, clickedElement);
      FndSearchSuggestBehavior._log("_handleMouseDownToDismiss: clickedInRootPanel: " + clickedInRootPanel);
      
      if (!clickedInPopup && !clickedInRootPanel)
      {
        //this._adfPopup.hide();
        this._adfPopup.cancel();
        this._clearBLURCache();
      }
      else
      {
        var inputText = AdfPage.PAGE.findComponent(this._adfSearchFieldClientId);
        FndSearchSuggestBehavior.advertiseClickOrigin(inputText, 'somewhere in search');
      }
    }
  }
};

/**
 * A method to call when the adf popup is closed to clean up temporary variables.
 */
FndSearchSuggestBehavior.prototype.onAdfPopupClose = function() {
  delete(this._adfPopup);
  delete(this._adfSearchFieldClientId);
  delete(this._adfPopupRootPanelId);
  delete(this._adfRootPanelClientId);
  this._personalizeSelectedByKeyboard = false;
  this._unregisterAutodismissalEventHandlers();
};

FndSearchSuggestBehavior.prototype._unregisterAutodismissalEventHandlers = function() {
  var agent = AdfAgent.AGENT;
//  var isIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
//  var isWebkit = agent.getPlatform() == AdfAgent.WEBKIT_PLATFORM;
  var domDocument = agent.getDomDocument();
//  var keyupCallback = this._adfPopupKeyupCallback;
//  if (keyupCallback) {
//    agent.removeBubbleEventListener(domDocument, "keyup", keyupCallback);
//    delete this._adfPopupKeyupCallback;
//  }
  var mousedownCallback = this._adfPopupMousedownCallback;
  if (mousedownCallback) {
    agent.removeBubbleEventListener(domDocument.body, "mousedown", mousedownCallback);
    delete this._adfPopupMousedownCallback;
  }
//  if(isIE) {
//    var focusinCallback = this._focusinCallback;
//    if(focusinCallback) {
//      agent.removeBubbleEventListener(domDocument, "focusin", focusinCallback);
//      delete this._focusinCallback
//    }
//  }else {
//    if(isWebkit) {
//      var blurCallbackWin = this._blurCallback;
//      if(blurCallbackWin) {
//        var domWindow = agent.getDomWindow();
//        agent.removeBubbleEventListener(domWindow, "blur", blurCallbackWin)
//      }
//    }else {
//      var blurCallback = this._blurCallback;
//      if(blurCallback) {
//        agent.removeBubbleEventListener(domDocument, "blur", blurCallback);
//        delete this._blurCallback
//      }
//    }
//  }
//  var mouseoverCallback = this._mouseoverCallback;
//  if(mouseoverCallback) {
//    agent.removeBubbleEventListener(domDocument, "mouseover", mouseoverCallback);
//    delete this._mouseoverCallback
//  }
};



/**
 * Hide the popup identified by popupId.
 * @param component some component from which to find the adf popup.
 * @param popupId Id of popup to show.
 */
FndSearchSuggestBehavior.prototype._hidePopup = function(component, popupId)
{
  AdfObject.ensureClassInitialization(AdfRichPopup);

  var popup = component.findComponent(popupId);
  if (popup != undefined && popup.isPopupVisible())
  {
    popup.hide();
  }
}

/**
 * Hide the popup identified by popupId.
 * @param component some component from which to find the adf popup.
 * @param popupId Id of popup to show.
 */
FndSearchSuggestBehavior.prototype._isPopupVisible = function(component, popupId)
{
  AdfObject.ensureClassInitialization(AdfRichPopup);

  var popup = component.findComponent(popupId);
  if (popup != undefined && popup.isPopupVisible())
  {
    return true;
  }
  return false;
}

/**
 * Close the autosuggest popup in whatever form it takes.
 * @param component the search field.
 */
FndSearchSuggestBehavior.prototype._hideSuggestPopup = function(component) 
{
  // Close the suggest popup in whatever form it takes.
  if (this._useGeneratedSuggestPopup)
  {
    if (component && component instanceof AdfUIEditableValue)
    {
      var peer = component.getPeer();
      peer.bind(component);
      if (peer.isPopupVisible(component, FndSearchSuggestBehavior._POPUP_PANEL_ID))
      {
        peer.hidePopup(component, FndSearchSuggestBehavior._POPUP_PANEL_ID);
      }
    }
  }
  else 
  {
    if (this._adfPopupId)
    {
      // Hide the adf popup.
      this._hidePopup(component, this._adfPopupId);
    }
    else
    {
      // Replace the popup content.
      this._showInline(component, null);
    }            
  }
}

/**
 * Show the adf components referred to in this._adfShowComponentIds (a space 
 * separated String) by setting their visible status.
 */
FndSearchSuggestBehavior.prototype._showAdfShowComponents = function(component)
{
  if (this._adfShowComponentIds && this._adfShowComponentIds != "")
  {
    var splitStr = this._adfShowComponentIds.split(/\b\s+/);
    var len = splitStr.length;
    for (var i = 0; i < len; i++)
    {
      var componentId = splitStr[i];
      var inlineToShowComponent = component.findComponent(componentId);
      if (inlineToShowComponent && inlineToShowComponent.getVisible)
      {
        inlineToShowComponent.setVisible(true);
      }
    }
  }
}

/**
 * Set the search field mode appropriately.
 * @param component inputText field component.
 * @param keywordMode is value a keyword.
 * @param groupName name of group.
 * @param groupValue value within group.
 */
FndSearchSuggestBehavior.prototype._setSearchFieldMode = function(component, keywordMode, groupName, groupValue)
{
  // Implementations Note:
  // The values for mode and group name/value are set as page properties based 
  // on the search field client id.  If they are stored in the behavior object 
  // attached to the search field they will be lost when the field is re-created
  // which can occur on browser refresh (f5), or simply clicking on a different 
  // tab and then back to the one with the ssb in it.  The Behavior is recreated
  // new on the client using the String constructor value cached in the server 
  // ClientListenerSet (the servere Behavior code is not re-called).  There is 
  // absoulutely no opportunity to save off or restore values in the client.
  // As these values are page properties, there is the possiblilty that if the 
  // search field is destroyed and re-created old values may still be present with 
  // the same id, the serverside API SearchSuggestBehaviorFactory.setBehaviorMode(...)
  // can be used to set the values appropriatly on construction.
  var page = AdfPage.PAGE;
  var clientId = component.getClientId();
  var keyPrefix = "FndSSB_" + clientId + "_";
  page.setPageProperty(keyPrefix + "keywordMode", keywordMode);
  page.setPageProperty(keyPrefix + "groupName", groupName);
  page.setPageProperty(keyPrefix + "groupValue", groupValue);
}

/**
 * Get the search field mode.
 * @return true for keywords, false for groups.
 */
FndSearchSuggestBehavior.prototype._getSearchFieldMode = function(component)
{
  var page = AdfPage.PAGE;
  var clientId = component.getClientId();
  var keyPrefix = "FndSSB_" + clientId + "_";
  var ret = page.getPageProperty(keyPrefix + "keywordMode");
  if (typeof ret === "undefined")
  {
    ret = true;
  }
  
  return ret;
}

/**
 * Get the search field group name, valid when _getSearchFieldMode(component) = false.
 * @return group name.
 */
FndSearchSuggestBehavior.prototype._getSearchFieldModeGroupName = function(component)
{
  var page = AdfPage.PAGE;
  var clientId = component.getClientId();
  var keyPrefix = "FndSSB_" + clientId + "_";
  var ret = page.getPageProperty(keyPrefix + "groupName");
  
  return ret;
}

/**
 * Get the search field group value, valid when _getSearchFieldMode(component) = false.
 * @return group value.
 */
FndSearchSuggestBehavior.prototype._getSearchFieldModeGroupValue = function(component)
{
  var page = AdfPage.PAGE;
  var clientId = component.getClientId();
  var keyPrefix = "FndSSB_" + clientId + "_";
  var ret = page.getPageProperty(keyPrefix + "groupValue");
  
  return ret;
}
/**
 * Process a button click on a search button.  This will delegate to the behavior 
 * and in cases where the text is not keywords, will sent the suggest group event
 * to the server where it is processed as normal.  If it is keywords, then the 
 * normal actionEvent is left to progress to the server.
 * @param event action event for button.
 */
FndSearchSuggestBehavior.processSearchButtonClick = function(event)
{
  var searchButton = event.getSource();
  var searchfieldId = searchButton.getProperty("searchFieldId");
  var searchField = searchButton.findComponent(searchfieldId);
  if (searchField)
  {
    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(searchField);
    if (behavior)
    {
      if (!behavior._getSearchFieldMode(searchField))
      {
        // Do a submit to the server.
        behavior._sendSearchSelectionEvent(searchField, 
                                           behavior._getSearchFieldModeGroupName(searchField),
                                           behavior._getSearchFieldModeGroupValue(searchField));
        // stop the event bubbling so no actionEvent is sent to the server.
        event.cancel();
      }     
    }
  }

}

/**
 * Process a button click on a search button.  This will delegate to the behavior 
 * and in cases where the text is not keywords, will sent the suggest group event
 * to the server where it is processed as normal.  If it is keywords, then the 
 * normal actionEvent is left to progress to the server.
 * @param event action event for button.
 */
FndSearchSuggestBehavior.initializeKeywordMode = function(clientId,
                                                          keywordMode,
                                                          groupName,
                                                          groupValue)
{
  var searchField = AdfPage.PAGE.findComponent(clientId);
  if (searchField)
  {
    var contentNode = FndSearchSuggestBehavior._getContentNode(searchField);
    if (contentNode)
    {
      contentNode.value = groupValue;
    }

    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(searchField);
    if (behavior)
    {
      behavior._initializeSearchButtonListener(searchField);
      behavior._setSearchFieldMode(searchField, keywordMode, groupName, groupValue);
    }
  }
};

/**
 * Set the field value for the component with client id clientId.
 * @param clientId the client id of the component.
 * @param value to set.
 */
FndSearchSuggestBehavior.setFieldValue = function(clientId,
                                                  value)
{
  var searchField = AdfPage.PAGE.findComponent(clientId);
  if (searchField)
  {
    var contentNode = FndSearchSuggestBehavior._getContentNode(searchField);
    if (contentNode)
    {
      contentNode.value = value;
    }
  }
};

/**
 * Advertise the click origin of a click in the autosuggest panel.  This may be 
 * used by downstream code to determine that something in the dynamically created
 * suggest UI was clicked.
 * @param inputText the search field.  Required.
 * @param the component clicked.  May be a jsf component, a string or null.
 */
FndSearchSuggestBehavior.advertiseClickOrigin = function(inputText, component)
{
  var inputTextSrcId = inputText.getAbsoluteId();
  var componentSrcId;
  if (component && component.getAbsoluteId)
  {
    componentSrcId = component.getAbsoluteId();
  }
  else if (typeof component === 'string')
  {
    componentSrcId = component;
  }
  
  AdfPage.PAGE.setPageProperty("FndSearchSuggest_" + inputTextSrcId, componentSrcId);
  FndSearchSuggestBehavior._log("FndSearchSuggestBehavior.advertiseClickOrigin set " + inputTextSrcId + " = " + componentSrcId);
};

/**
 * Get the click origin of a click in the autosuggest panel.
 * @return value of the click origin, null if not in the autosuggest.
 */
FndSearchSuggestBehavior.getClickOrigin = function(inputText)
{
  var inputTextSrcId = inputText.getAbsoluteId();
  var ret = AdfPage.PAGE.getPageProperty("FndSearchSuggest_" + inputTextSrcId);
  FndSearchSuggestBehavior._log("FndSearchSuggestBehavior.getClickOrigin return: " + ret + " for " + inputTextSrcId);
  
  return ret;
};

/**
 * A log method specific to this class, allows logging to be turned on using a breakpoint.
 * Still require web.xml entries:
 * <context-param>
 *   <param-name>oracle.adf.view.rich.LOG_WRITERS</param-name>
 *   <param-value>AdfConsoleLogWriter</param-value>
 * </context-param>
 * <context-param>
 *   <description>The valid values are OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST.</description>
 *   <param-name>oracle.adf.view.rich.LOGGER_LEVEL</param-name>
 *   <param-value>SEVERE</param-value>
 * </context-param>
 */
FndSearchSuggestBehavior._log = function(message) 
{
  var page = AdfPage.PAGE;
  var prop = "FndGlobalSearchLogEnabled";
  var prop2 = "FndGlobalSearchConsoleLogEnabled";
  // Turn logging on / off.
  // page.setPageProperty(prop, true);
  // page.setPageProperty(prop, null);
  var doLog = page.getPageProperty(prop);
  if (doLog)
  {
    AdfLogger.LOGGER.logMessage(AdfLogger.SEVERE, message);
  }
  // Turn console logging on / off.
  // page.setPageProperty(prop2, true);
  // page.setPageProperty(prop2, null);
  var consoleLog = page.getPageProperty(prop2);
  if (consoleLog)
  {
    console.log(message);
  }
};

FndSearchSuggestBehavior._getContentNode = function(component) {
  return AdfDhtmlEditableValuePeer.GetContentNode(component);
};

FndSearchSuggestBehavior._createSubId = function(clientId, name) {
  return AdfRichUIPeer.CreateSubId(clientId, name);
};

FndSearchSuggestBehavior._removeCSSClassName = function(domElement, className) {
  if (domElement) {
    AdfDomUtils.removeCSSClassName(domElement, className);
  }
};

FndSearchSuggestBehavior._addCSSClassName = function(domElement, className) {
  if (domElement) {
    AdfDomUtils.addCSSClassName(domElement, className);
  }
};

FndSearchSuggestBehavior.containsCSSClassName = function(domElement, className) {
  return AdfDomUtils.containsCSSClassName(domElement, className);
};

FndSearchSuggestBehavior._getFirstChildElement = function(parentElement) {
  return AdfDomUtils.getFirstChildElement(parentElement);
};

FndSearchSuggestBehavior._getLastChildElement = function(parentElement) {
  return AdfDomUtils.getLastChildElement(parentElement);
};

FndSearchSuggestBehavior._getPreviousElement = function(currentElement) {
  return AdfDomUtils.getPreviousElement(currentElement);
};

FndSearchSuggestBehavior._getNextElement = function(currentElement) {
  return AdfDomUtils.getNextElement(currentElement);
};

FndSearchSuggestBehavior._getElementPosition = function(currentElement) {
  return AdfDomUtils.getElementPosition(currentElement);
};

FndSearchSuggestBehavior._getChildElements = function(currentElement) {
  return AdfDomUtils.getChildElements(currentElement);
};

FndSearchSuggestBehavior._isAncestorOrSelf = function(ancestorNode, node) {
  return AdfDomUtils.isAncestorOrSelf(ancestorNode, node);
};

/*
** Copyright (c) 2013, 2020, Oracle and/or its affiliates. 
 **
 **34567890123456789012345678901234567890123456789012345678901234567890123456789
 **
 ** Libraries needed by Applcore Global Search.
 ** These functions are split out so they can be used from within Applcore UIShell,
 ** and in FUSE environments.
 ** 
 ** @author David Groves.
 */

/**
 * Global Search Function Object.
 *
 * 06/20/2020   rohitsi ENH 31303688 - GLOBAL SEARCH CSS: BEHAVIOR OF GLOBAL SEARCH WOULD BE DARK BEFORE IT IS CLICKED
 *
 */
function FndGlobalSearchObj() {}

/**
 * Determines the dimensions of the client window and sends them up to
 * the server via the GlobalSearchCustomEvent
 * @param event event triggering this.
 */
FndGlobalSearchObj.prototype.sendClientSize = function(event) 
{
  var source = event.getSource();
  var agentIsIE = AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM;
  var wid = agentIsIE ? document.body.clientWidth : window.innerWidth;
  var hei = agentIsIE ? document.body.clientHeight : window.innerHeight;
  // Send window width and height and that we are from a global context.
  AdfCustomEvent.queue(source, "GlobalSearchCustomEvent", 
  {
    width : wid, height : hei
  }, true);
};

/**
 * A Tile has been clicked, trigger selection of command link.  This method is 
 * used to allow click on the panel to force click of the command link in the 
 * panel (which may be quite small and hard to press on a tablet device).
 * @param event event triggering this method.
 */
FndGlobalSearchObj.prototype.tileClicked = function(event)
{
  event.cancel();
  var component = event.getSource();
  var link = component.findComponent("tileCL");
  if (link)
  {
    var ae = new AdfActionEvent(link);
    ae.setPartial(true);
    ae.queue();
  }
};

/**
 * Callback for the Global Search Tablet popup opening.  This method resets the 
 * searchsuggest panels so that the popup shows correctly when it is re-shown
 * @param event open event.
 */
FndGlobalSearchObj.prototype.tabletSummaryPopupOpened = function(event) 
{
  var source = event.getSource();
  var inlineSuggestionComponent = source.findComponent("gstsasi");
  if (inlineSuggestionComponent && inlineSuggestionComponent.setVisible)
  {
    inlineSuggestionComponent.setVisible(false);
  }
  var inlineReplaceComponent = source.findComponent("gstsscg");
  if (inlineReplaceComponent && inlineReplaceComponent.setVisible)
  {
    inlineReplaceComponent.setVisible(true);
  }
};


/**
 * Callback on close of the Search Result Popup to stop any background result
 * polling.
 * @param event  close event.
 */
FndGlobalSearchObj.prototype.resultsPopupClosed = function(event)
{
  var source = event.getSource();
  var poll = source.findComponent("gssrdc:searchPoll");
  if (poll)
  {
    // Hard shutdown of the poll.
    poll.setInterval(-1);
  }
};

/**
 * For the component identified by the passed clientId, set the collapsed state.
 * @param clientId of component to setCollapsed().
 * @param collapse collapse state to set.
 */
FndGlobalSearchObj.prototype.toggleRefinePane = function(clientId, collapse)
{
  this.toggleRefinePane(clientId, collapse, 250);
}

/**
 * For the component identified by the passed clientId, set the collapsed state.
 * @param clientId of component to setCollapsed().
 * @param collapse collapse state to set.
 * @param defaultSplitterPosition the default splitter position.
 */
FndGlobalSearchObj.prototype.toggleRefinePane = function(clientId, collapse, defaultSplitterPosition)
{
  var component = AdfPage.PAGE.findComponent(clientId);
  if (component && component.setCollapsed)
  {
    var pos = component.getSplitterPosition();
    if (collapse == false && pos < 20)
    {
      // make sure we never expand to a really small state, such as when the 
      // user has dragged the splitter to 0 size, then collapsed with the button.
      // When they expand again with the button they will not see it expand (even
      // though the state is changed to expanded), and they would have to use the
      // dragger to expand which is really hard to do.
      // 250 is jsff default.
      component.setSplitterPosition(defaultSplitterPosition);
    }
    component.setCollapsed(collapse);
  }
};


/**
 * A result item is clicked.
 * @param event button click event.
 */
FndGlobalSearchObj.prototype.resultClicked = function(event)
{
  // if we are in a UIShell environment, poke environment for open transactions.
  if (queueGlobalActionEventOnMainArea)
  {
    queueGlobalActionEventOnMainArea(event);
  }
};

/**
 * Clear the value from the search field.
 * @param clinetId client id of field to clear.
 */
FndGlobalSearchObj.prototype.clearSearchFieldValue = function(clientId)
{
  var component = AdfPage.PAGE.findComponent(clientId);
  if (component && component.setValue)
  {
    component.setValue("");
  }
};

/**
 * Clear the value from the search field.
 * @param event event.
 */
FndGlobalSearchObj.prototype.closeSuggestPopup = function(event)
{
  var component = event.getSource();
  var popup = component.findComponent('_GSSugPopup');
  if (!popup)
  {
    popup = component.findComponent('::_GSSugPopup');
  }
  if (popup != undefined && popup.isPopupVisible())
  {
    popup.hide();
  }
};

/**
 * Execute the 'search for xyz' functionality from the link at the bottom of the
 * custom suggest popup.
 * @param event event causing this to fire.
 */
FndGlobalSearchObj.prototype.executeSearchForLink = function(event)
{
  FndGlobalSearch.closeSuggestPopup(event);
  var component = event.getSource();
  var searchButton = component.findComponent('_GSFsb');
  if (AdfPage.PAGE.isScreenReaderMode())
  {
    searchButton = component.findComponent('gstssf');
  }
  AdfActionEvent.queue(searchButton, searchButton.getPartialSubmit());
}


/**
 * Set the visibility of the component identified by clientId to visible.
 * @param clinetId client id of component.
 * @param visible true/false visibility.
 */
FndGlobalSearchObj.prototype.setVisible = function(clientId, visible)
{
  var component = AdfPage.PAGE.findComponent(clientId);
  if (component && component.setVisible)
  {
    component.setVisible(visible);
  }
};

/**
 * Set focus to the relevant component.
 * @param client Id of component to focus.  This component must implement the 
 * focus() methd.
 */
FndGlobalSearchObj.prototype.focusComponentByClientId = function(clientId)
{
  var comp = AdfPage.PAGE.findComponent(clientId);
  if (comp && comp.focus)
  {
    comp.focus();
  }
}

/**
 * Callback for the Global Search Field popup closing.  This method resets the 
 * searchsuggest panels so that the popup shows correctly when it is re-shown
 * @param event open event.
 */
FndGlobalSearchObj.prototype.searchFieldPopupClosed = function(event) 
{
  var source = event.getSource();
  var inlineSuggestionComponent = source.findComponent("GSSugPanel");
  if (inlineSuggestionComponent && inlineSuggestionComponent.setVisible)
  {
    inlineSuggestionComponent.setVisible(true);
  }
  var inlineReplaceComponent = source.findComponent("GSSugPersonalize");
  if (inlineReplaceComponent && inlineReplaceComponent.setVisible)
  {
    inlineReplaceComponent.setVisible(false);
  }
  
  var rootComp = FndGlobalSearch._getRootComponent(source);
  var inputText = rootComp.findComponent("_GSFsf");
  var inputTextSrcId = inputText.getAbsoluteId();
  var timerId = page.scheduleTimer(FndGlobalSearch, 
                                   FndGlobalSearch._suggestionsClosedCallback, 
                                   inputTextSrcId, 500);
  
  FndSearchSuggestBehavior._log("FndGlobalSearch.searchFieldPopupClosed setting FndGlobalSearchSuggestionsClosedTimer_" + inputTextSrcId + " = " + timerId);
  page.setPageProperty("FndGlobalSearchSuggestionsClosedTimer_" + inputTextSrcId, timerId);
  var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(inputText);
  behavior.onAdfPopupClose();
  if (AdfPage.PAGE.isScreenReaderMode())
  {
    // Copy the popup field value back into the base field if in screen reader mode.
    FndGlobalSearch.copyFieldValue(event, "gstssf", "_GSFsf");
    FndGlobalSearch.setAriaValuesForSRSearchField(event, "false");
  }
  FndGlobalSearch.setAriaValuesForBaseSearchField(event, "false");
}

/**
 * A callback for the close of the suggestions popup.  If this code is allowed to 
 * run it will reset the style of the search field; it may be cancelled if the
 * user clicks back into the search field.
 */
FndGlobalSearchObj.prototype._suggestionsClosedCallback = function(inputTextCompId) 
{
  FndSearchSuggestBehavior._log("FndGlobalSearch._suggestionsClosedCallback callback called.");
  var page = AdfPage.PAGE;
  var inputText = page.findComponentByAbsoluteId(inputTextCompId);
  var inputTextSrcId = inputText.getAbsoluteId();

  var lastSearchFieldFocus = page.getPageProperty("FndGlobalSearchFieldLastFocus_" + inputTextSrcId);
  if (lastSearchFieldFocus)
  {
    var now = new Date().getTime();
    var durn = now - lastSearchFieldFocus;
    FndSearchSuggestBehavior._log("FndGlobalSearch._suggestionsClosedCallback duration = " + durn);
    if (durn > 600)
    {
      FndSearchSuggestBehavior._log("FndGlobalSearch._suggestionsClosedCallback callback called, resetting focus.");
      FndGlobalSearch._setSearchFieldStyles(inputText, false);
    }
  }
  
  page.setPageProperty("FndGlobalSearchSuggestionsClosedTimer_" + inputTextSrcId, null);
}

/**
 * Record a click in the search area somewhere.
 * @param event event.
 */
FndGlobalSearchObj.prototype.searchAreaClick = function(event) 
{
  var clickedComp = event.getSource();
  var rootComp = FndGlobalSearch._getRootComponent(clickedComp);
  var inputText = rootComp.findComponent("_GSFsf");
  FndSearchSuggestBehavior.advertiseClickOrigin(inputText, clickedComp);
}

/**
 * Search up the component tree for the root most component in GlobalSearchField.jsff
 * @param c some component in this component tree.
 * @return root panelGroupLayout component, undefined if not in the sub-tree.
 */
FndGlobalSearchObj.prototype._getRootComponent = function(c) 
{
  // Search up for the master Panel.
  var masterPanel;
  while (c)
  {
    if (c instanceof AdfRichPanelGroupLayout) 
    {
      var id = c.getId();
      if (id == "_GSFPpgl")
      {
        masterPanel = c;
        break;
      }
    }
    c = c.getParent();
  }
  
  return masterPanel;
}

/**
 * The Global Header Search Field (or search button) has focus.
 * @param event event.
 */
FndGlobalSearchObj.prototype.searchFieldFocus = function(event) 
{
  FndSearchSuggestBehavior._log("FndGlobalSearch.searchFieldFocus called, setting focus on Search field and panel.");
  var page = AdfPage.PAGE;
  var clickedComp = event.getSource();
  var rootComp = FndGlobalSearch._getRootComponent(clickedComp);
  var inputText = rootComp.findComponent("_GSFsf");
  var inputTextSrcId = inputText.getAbsoluteId();

  FndGlobalSearch._setSearchFieldStyles(inputText, true);  
  FndSearchSuggestBehavior.advertiseClickOrigin(inputText, null);
  
  // Close down any existing blur callback timers.  This it the tab through the
  // search field to search button use case.
  FndGlobalSearch._cancelTimer("FndGlobalSearchTimer_" + inputTextSrcId);
  
  var now = new Date().getTime();
  page.setPageProperty("FndGlobalSearchFieldLastFocus_" + inputTextSrcId, now);
};

/**
 * The Global Header Search Field (or search button) has focus.
 * This method for the newsfeed homepage.
 * @param event event.
 */
FndGlobalSearchObj.prototype.searchField2Focus = function(event) 
{
  FndSearchSuggestBehavior._log("FndGlobalSearch.searchFieldFocus called, setting focus on Search field and panel.");
  var page = AdfPage.PAGE;
  var clickedComp = event.getSource();
  var rootComp = FndGlobalSearch._getRootComponent(clickedComp);
  var inputText = rootComp.findComponent("_GSFsf");
  var inputTextSrcId = inputText.getAbsoluteId();

  FndSearchSuggestBehavior.advertiseClickOrigin(inputText, null);
  
  // Close down any existing blur callback timers.  This it the tab through the
  // search field to search button use case.
  FndGlobalSearch._cancelTimer("FndGlobalSearchTimer_" + inputTextSrcId);
  
  var now = new Date().getTime();
  page.setPageProperty("FndGlobalSearchFieldLastFocus_" + inputTextSrcId, now);
  
  // rohitsi: Enhancement - 31303688
  rootComp.setStyleClass("FndGlobalSearchNewsfeedDesktopHomepageFieldFocused");
};


/**
 * The Global header search field focus lost (blur) listener.
 * @param event event.
 */
FndGlobalSearchObj.prototype.searchField2LostFocus = function(event) 
{
  FndSearchSuggestBehavior._log("FndGlobalSearch.searchField2LostFocus focus lost.");
  if (AdfPage.PAGE.isScreenReaderMode())
  {
    // In Screen reader mode we bring up popup with separate search field, do not worry
    // about keeping track of the search solution as the user will have to select
    // from the search, or explicitly escape to return.
    FndSearchSuggestBehavior._log("FndGlobalSearch.searchField2LostFocus screen reader mode, aborting.");
    return;
  }
  var page = AdfPage.PAGE;
  var clickedComp = event.getSource();
  var rootComp = FndGlobalSearch._getRootComponent(clickedComp);
  var inputText = rootComp.findComponent("_GSFsf");

  //FndSearchSuggestBehavior.advertiseClickOrigin(inputText, null);
  FndSearchSuggestBehavior._log("FndGlobalSearch.searchField2LostFocus scheduling timer.");
  var inputTextSrcId = inputText.getAbsoluteId();
  var existingTimerId = page.getPageProperty("FndGlobalSearchTimer_" + inputTextSrcId);
  if (existingTimerId)
  {
    page.rescheduleTimer(existingTimerId, 500);
  }
  else
  {
    var timerId = page.scheduleTimer(FndGlobalSearch, 
                                     FndGlobalSearch._checkNewFocus2, 
                                     inputTextSrcId, 500);
    
    page.setPageProperty("FndGlobalSearchTimer_" + inputTextSrcId, timerId);
  }
  
  // rohitsi: Enhancement - 31303688
  rootComp.setStyleClass("");
};

/**
 * A callback for blur in the search field.  This called from a timer and we
 * examine global variables to determine whether the "focus" is still within the
 * search UI (the field or popup somewhere).  If it is  not, we reset the L&F of 
 * the Search field.
 * @param inputTextCompId component id of Search Field.
 */
FndGlobalSearchObj.prototype._checkNewFocus2 = function(inputTextCompId) 
{
  // FndSearchSuggestBehavior._log("FndGlobalSearch._checkNewFocus2 callback with inputTextCompId: " + inputTextCompId);
  var page = AdfPage.PAGE;
  var inputText = page.findComponentByAbsoluteId(inputTextCompId);

  var clickedInPopup = FndSearchSuggestBehavior.getClickOrigin(inputText);
  FndSearchSuggestBehavior._log("FndGlobalSearch._checkNewFocus2 callback with page property: " + clickedInPopup);
  if (!clickedInPopup)
  {
    FndSearchSuggestBehavior._log("FndGlobalSearch._checkNewFocus2 callback property not set, resetting focus.");
    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(inputText);
    behavior._hideSuggestPopup(inputText);
    behavior._clearBLURCache();
    var isHomepage = inputText.getProperty("isHomepage");
    if (isHomepage === 'false' && !AdfPage.PAGE.isScreenReaderMode())
    {
      // In landing pages (not the welcome page), hide the search field if the user
      // leaves the search solution.
      AdfPage.PAGE.scheduleTimer(this, FndGlobalSearch.toggleNewsfeedSearchField, false, 500);
    }
    // FndGlobalSearch.toggleNewsfeedSearchField(false);
  }
  FndSearchSuggestBehavior.advertiseClickOrigin(inputText, null);
  
  var inputTextSrcId = inputText.getAbsoluteId();
  page.setPageProperty("FndGlobalSearchTimer_" + inputTextSrcId, null);
};

/**
 * Callback for the Global Search Field popup closing.  This method resets the 
 * searchsuggest panels so that the popup shows correctly when it is re-shown
 * @param event open event.
 */
FndGlobalSearchObj.prototype.searchField2PopupClosed = function(event) 
{
  var source = event.getSource();
  var masterSuggestionComponent = source.findComponent("GSSugSuggestions");
  if (masterSuggestionComponent && masterSuggestionComponent.setVisible)
  {
    masterSuggestionComponent.setVisible(true);
  }
  var inlineSuggestionComponent = source.findComponent("GSSugPanel");
  if (inlineSuggestionComponent && inlineSuggestionComponent.setVisible)
  {
    inlineSuggestionComponent.setVisible(true);
  }
  var inlineReplaceComponent = source.findComponent("GSSugPersonalize");
  if (inlineReplaceComponent && inlineReplaceComponent.setVisible)
  {
    inlineReplaceComponent.setVisible(false);
  }
  
  var searchField = source.findComponent("_GSFsf");
  var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(searchField);
  behavior.onAdfPopupClose();
  if (AdfPage.PAGE.isScreenReaderMode())
  {
    // Copy the popup field value back into the base field if in screen reader mode.
    FndGlobalSearch.copyFieldValue(event, "gstssf", "_GSFsf");
    FndGlobalSearch.setAriaValuesForSRSearchField(event, "false");
  }
  FndGlobalSearch.setAriaValuesForBaseSearchField(event, "false");
};

/**
 * Callback for the Global Search Field popup opening.  This method sets margin
 * for the created popup.
 * @param event open event.
 */
FndGlobalSearchObj.prototype.searchField2PopupOpening = function(event) 
{
  var popupComponent = event.getSource();
  var popupContentNode = AdfDhtmlEditableValuePeer.GetContentNode(popupComponent);
  var node = popupContentNode;
  while (node && node.parentNode) {
    var id = node.getAttribute("id");
    if (id && id.match(":_GSSugPopup::popup-container$"))
    {
      node.style['margin-top'] = '10px';
      break;
    }
    node = node.parentNode;
  }
  var br = popupContentNode.getBoundingClientRect();
  // The intent is to show popup below search field, which is near the top of the page.
  // 45 px = 10px for top and bottom of popup 'margin', + 10 + 15 padding in fndGlobalSearchNewsfeedFieldPanel.
  var popupOverhead = parseInt('' + br.top) + 45;
  var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
  var maxHeightStyle = '';
  if (viewportHeight - popupOverhead > 150) 
  {
    // only constrain the popup height if the popup is bigger than 150 px high,
    // otherwise we get a ridiculously small popup.
    maxHeightStyle = 'calc(100vh - ' + popupOverhead + 'px)';
  }
  popupContentNode.firstElementChild.style.maxHeight = maxHeightStyle;
  FndGlobalSearch.searchFieldPopupOpening(event);
};

/**
 * Callback for the Global Search Field popup opening.  This method copies the 
 * search field value from the base field to the redundant field in the popup.
 * @param event open event.
 */
FndGlobalSearchObj.prototype.searchFieldPopupOpening = function(event) 
{
  if (AdfPage.PAGE.isScreenReaderMode())
  {
    // Copy the root field value into the popup field if in screen reader mode.
    // There are cases where the popup is slow to open and the user types into 
    // the root field.
    FndGlobalSearch.copyFieldValue(event, "_GSFsf", "gstssf");
    FndGlobalSearch.setAriaValuesForSRSearchField(event, "true");
  }
  FndGlobalSearch.setAriaValuesForBaseSearchField(event, "true");
  // remove any hilighting of the personalize field and ensure it is not selected.
  var comp = event.getSource();
  var personalizeBtn = comp.findComponent("GSSugPers");
  if (personalizeBtn)
  {
    var pbClientId = personalizeBtn.getClientId();
    var pbDomNode = AdfAgent.AGENT.getElementById(pbClientId);
    FndSearchSuggestBehavior._removeCSSClassName(pbDomNode, FndSearchSuggestBehavior._HOVER_STYLE_CLASS);
  }
  var searchField = comp.findComponent("_GSFsf");
  var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(searchField);
  behavior._personalizeSelectedByKeyboard = false;
};

/**
 * Set the state of the aria-expanded and aria-activedescendent for the duplicate 
 * search field shown in secreen reader mode.
 * @param event open event.
 * @param ariaExpanded aria-expandex attribute value.
 */
FndGlobalSearchObj.prototype.setAriaValuesForSRSearchField = function(event, ariaExpanded) 
{
  FndGlobalSearch.setAriaValuesForField(event, "gstssf", ariaExpanded);
};

/**
 * Set the state of the aria-expanded and aria-activedescendent for the base 
 * search field driving the Global Search popup.
 * @param event open event.
 * @param ariaExpanded aria-expandex attribute value.
 */
FndGlobalSearchObj.prototype.setAriaValuesForBaseSearchField = function(event, ariaExpanded) 
{
  FndGlobalSearch.setAriaValuesForField(event, "_GSFsf", ariaExpanded);
};

/**
 * Set the state of the aria-expanded and aria-activedescendent for the duplicate 
 * search field shown in screen reader mode.
 * @param event open event.
 * @param ariaExpanded aria-expanded attribute value.
 */
FndGlobalSearchObj.prototype.setAriaValuesForField = function(event, fieldId, ariaExpanded) 
{
  var comp = event.getSource();
  var srField = comp.findComponent(fieldId);
  if (srField)
  {
    var srFieldCN = AdfDhtmlEditableValuePeer.GetContentNode(srField);

    srFieldCN.setAttribute("aria-expanded", ariaExpanded);
    srFieldCN.removeAttribute("aria-activedescendant");
  }
};

/**
 * Callback for the Global Search Field popup opening.  This method copies the 
 * search field value from the base field to the redundant field in the popup.
 * @param event open event.
 * @param sourceFieldId source Field id in local naming container.
 * @param destFieldId destination Field id in local naming container.
 */
FndGlobalSearchObj.prototype.copyFieldValue = function(event, sourceFieldId, destFieldId) 
{
  // Copy the root field value into the popup fielf if in screen reader mode.
  // There are cases where the popup is slow to open and the user types into 
  // the root field.
  var comp = event.getSource();
  var sourceField = comp.findComponent(sourceFieldId);
  var destField = comp.findComponent(destFieldId);
  if (sourceField && destField)
  {
    var sourceFieldCN = AdfDhtmlEditableValuePeer.GetContentNode(sourceField);
    var destFieldCN = AdfDhtmlEditableValuePeer.GetContentNode(destField);
    destFieldCN.value = sourceFieldCN.value;
    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(destField);
    if (behavior)
    {
      behavior._setCaretToEndOfField(destFieldCN);
    }
  }
};

/**
 * The Search field was clicked.  This may be different to focus as the focus may 
 * never be lost from the search field unless you click into the suggest popup 
 * or elsewhere on the page.  
 * If however you just keep clicking the search field, the suggest popup will close and 
 * re-open triggering the callback which needs to know the Search field has focus and
 * not to clear the styles.
 * @param event click event.
 */
FndGlobalSearchObj.prototype.searchFieldClick = function(event) 
{
  FndSearchSuggestBehavior._log("FndGlobalSearch.searchFieldClick called, setting focus on Search field and panel.");
  var page = AdfPage.PAGE;
  var clickedComp = event.getSource();
  var rootComp = FndGlobalSearch._getRootComponent(clickedComp);
  var inputText = rootComp.findComponent("_GSFsf");
  var inputTextSrcId = inputText.getAbsoluteId();
  
  var now = new Date().getTime();
  page.setPageProperty("FndGlobalSearchFieldLastFocus_" + inputTextSrcId, now);
}

/**
 * Cancel the timer stored under page property prop.
 * @param prop property to look for timerId under.
 */
FndGlobalSearchObj.prototype._cancelTimer = function(prop) 
{
  var page = AdfPage.PAGE;
  
  var timerId = page.getPageProperty(prop);
  FndSearchSuggestBehavior._log("FndGlobalSearch.searchFieldFocus _cancelTimer timer: " + prop + " = " + timerId);
  if (timerId)
  {
    page.cancelTimer(timerId);
    page.setPageProperty(prop, null);
  }
}

/**
 * A callback for blur in the search field.  This called from a timer and we
 * examine global variables to determine whether the "focus" is still within the
 * search UI (the field or popup somewhere).  If it is  not, we reset the L&F of 
 * the Search field.
 * @param inputTextCompId component id of Search Field.
 */
FndGlobalSearchObj.prototype._checkNewFocus = function(inputTextCompId) 
{
  // FndSearchSuggestBehavior._log("FndGlobalSearch._checkNewFocus callback with inputTextCompId: " + inputTextCompId);
  var page = AdfPage.PAGE;
  var inputText = page.findComponentByAbsoluteId(inputTextCompId);

  var clickedInPopup = FndSearchSuggestBehavior.getClickOrigin(inputText);
  FndSearchSuggestBehavior._log("FndGlobalSearch._checkNewFocus callback with page property: " + clickedInPopup);
  if (!clickedInPopup)
  {
    FndSearchSuggestBehavior._log("FndGlobalSearch._checkNewFocus callback property not set, resetting focus.");
    FndGlobalSearch._setSearchFieldStyles(inputText, false);
    var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(inputText);
    behavior._hideSuggestPopup(inputText);
    behavior._clearBLURCache();
  }
  FndSearchSuggestBehavior.advertiseClickOrigin(inputText, null);
  
  var inputTextSrcId = inputText.getAbsoluteId();
  page.setPageProperty("FndGlobalSearchTimer_" + inputTextSrcId, null);
}

/**
 * The Global header search field focus lost (blur) listener.
 * @param inputText The Search field.
 * @param focused true to set the focused styles, false foe the unfocused styles.
 */
FndGlobalSearchObj.prototype._setSearchFieldStyles = function(inputText, focused) 
{
  var laf = AdfPage.PAGE.getLookAndFeel();
  var panelGroupLayout = inputText.getParent();
  var searchIcon = panelGroupLayout.findComponent("_GSFsb");
  var inputTextClientId = inputText.getClientId();
  var inputTextContentId = AdfRichUIPeer.CreateSubId(inputTextClientId, "content");
  var inputTextDomNode = AdfAgent.AGENT.getElementById(inputTextContentId);

  if (focused)
  {
    var containerFocusStyle = laf.getStyleClass("fndGlobalSearchContainerFocused");    
    panelGroupLayout.setStyleClass(containerFocusStyle);
    // Need to set the style on the dom directly.  cascading content styles will not work
    // and using ADF JS APIs will flush the change to the server causing required field validation.
    // Cannot work out how to get this value from css.
    inputTextDomNode.setAttribute("style", "color: #333333; width: 200px;");
    
    var iconFocusStyleClass = searchIcon.getProperty("iconFocusStyle");
    FndGlobalSearch._setIconStyleClass(searchIcon, iconFocusStyleClass);
  }
  else
  {
    var containerStyle = laf.getStyleClass("fndGlobalSearchContainer"); 
    panelGroupLayout.setStyleClass(containerStyle);
    inputTextDomNode.removeAttribute("style");
    
    var iconBlurStyleClass = searchIcon.getProperty("iconBlurStyle");
    FndGlobalSearch._setIconStyleClass(searchIcon, iconBlurStyleClass);
  }
}

/**
 * Set the styleClass newIconStyle on component which is assumed to be a commandImageLink.
 * The styleClass will be applied immediately and make the svg icon appear with different color.
 * @param component commandImageLink component.  Required.
 * @param newIconStyle new styleClass value.  Required.
 */
FndGlobalSearchObj.prototype._setIconStyleClass = function(component, newIconStyleClass) 
{
  var laf = AdfPage.PAGE.getLookAndFeel();
  var svgStyleClass = laf.getStyleClass(newIconStyleClass);
  component.setStyleClass(svgStyleClass);
}

/**
 * The Global header search field focus lost (blur) listener.
 * @param event event.
 */
FndGlobalSearchObj.prototype.searchFieldLostFocus = function(event) 
{
  FndSearchSuggestBehavior._log("FndGlobalSearch.searchFieldLostFocus focus lost.");
  if (AdfPage.PAGE.isScreenReaderMode())
  {
    // In Screen reader mode we bring up popup with separate search field, do not worry
    // about keeping track of the search solution as the user will have to select
    // from the search, or explicitly escape to return.
    FndSearchSuggestBehavior._log("FndGlobalSearch.searchFieldLostFocus screen reader mode, aborting.");
    return;
  }
  var page = AdfPage.PAGE;
  var clickedComp = event.getSource();
  var rootComp = FndGlobalSearch._getRootComponent(clickedComp);
  var inputText = rootComp.findComponent("_GSFsf");

  FndSearchSuggestBehavior.advertiseClickOrigin(inputText, null);
  
  FndSearchSuggestBehavior._log("FndGlobalSearch.searchFieldLostFocus scheduling timer.");
  var inputTextSrcId = inputText.getAbsoluteId();
  var existingTimerId = page.getPageProperty("FndGlobalSearchTimer_" + inputTextSrcId);
  if (existingTimerId)
  {
    page.rescheduleTimer(existingTimerId, 500);
  }
  else
  {
    var timerId = page.scheduleTimer(FndGlobalSearch, 
                                     FndGlobalSearch._checkNewFocus, 
                                     inputTextSrcId, 500);
    
    page.setPageProperty("FndGlobalSearchTimer_" + inputTextSrcId, timerId);
  }
}

/**
 * Send custom event for click of personalize of suggestions.
 * @param event click event.
 */
FndGlobalSearchObj.prototype.personalizeSuggestionsClicked = function(event) 
{  
  FndGlobalSearch.searchAreaClick(event);
  var nativeEvent = event.getNativeEvent();  
    
  // Can use shiftKey, ctrlKey, altKey  
  AdfCustomEvent.queue(event.getSource(), 
                       "GlobalSearchPersonalizeSuggestionsClicked",   
                       { controlPressed : nativeEvent.ctrlKey || nativeEvent.metaKey},
                       true);   
  event.cancel();  
};

/**
 * Toggle the visibility of the clear link image.
 * @param event event.
 */
FndGlobalSearchObj.prototype.toggleListSearchClearSearchLink = function(event) 
{  
  var searchField = event.getSource();
  
  var clearLink = searchField.findComponent("_LSCL");
  if (searchField.getSubmittedValue() != "" ) 
  {
    clearLink.setVisible(true);
  }
  else
  {
    clearLink.setVisible(false);
  }
  // event.cancel();  
};

/**
 * Click the clear search field image.
 * @param event event.
 */
FndGlobalSearchObj.prototype.clickListSearchClearSearchLink = function(event) 
{
  var clearLink = event.getSource();
  var searchField = clearLink.findComponent("_LSSF");
  var searchFieldClientId = searchField.getClientId();
  FndSearchSuggestBehavior.initializeKeywordMode(searchFieldClientId, true, "", "");
  
  clearLink.setVisible(false);
  searchField.resetValue();

  // Bring up autosuggest.  
  var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(searchField);
  if (behavior && !AdfPage.PAGE.isScreenReaderMode())
  {
    behavior._processClick(searchField);
  } else {
    FndGlobalSearch.focusComponentByClientId(searchFieldClientId); 
  }
  
//  event.cancel();
};

/**
 * Toggle the visibility of the clear link image in Global Search.
 * @param event event.
 */
FndGlobalSearchObj.prototype.toggleGlobalSearchClearSearchLink = function(event) 
{
  var searchField = event.getSource();
  
  var clearLink = searchField.findComponent("_GSFCL");
  if (searchField.getSubmittedValue() != "" ) 
  {
    clearLink.setVisible(true);
  }
  else
  {
    clearLink.setVisible(false);
  }
  // event.cancel();  
};

/**
 * Click the clear search field button in Global Search and run suggestions.
 * @param event event.
 */
FndGlobalSearchObj.prototype.clickGlobalSearchClearSearchLink = function(event) 
{
  var clearLink = event.getSource();
  var searchField = clearLink.findComponent("_GSFsf");
  var searchFieldClientId = searchField.getClientId();
  
  clearLink.setVisible(false);
  searchField.resetValue();
  FndSearchSuggestBehavior.suggestOn(searchFieldClientId);
  
//  event.cancel();
};

/**
 * Click the search image in Global Search to show the search field.
 * @param event event.
 */
FndGlobalSearchObj.prototype.clickExpandGlobalSearch = function(event) 
{
  var searchIcon = event.getSource();
  var searchFieldPanel = searchIcon.findComponent("_GSFPpgl");
  var searchField = searchIcon.findComponent("_GSFsf");
  var searchFieldClientId = searchField.getClientId();
  // FndSearchSuggestBehavior.initializeKeywordMode(searchFieldClientId, true, "", "");
  
  searchFieldPanel.setVisible(true);
  searchIcon.setVisible(false);

  // Bring up autosuggest.  
  var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(searchField);
  if (behavior && !AdfPage.PAGE.isScreenReaderMode())
  {
    behavior._processClick(searchField);
  }
  FndGlobalSearch.focusComponentByClientId(searchFieldClientId); 
  
//  event.cancel();
};

/**
 * Callback for the newsfeed mobile Global Search Field popup opening.
 * @param event open event.
 */
FndGlobalSearchObj.prototype.newsfeedMobileSearchPopupOpening = function(event) 
{
  var popupComponent = event.getSource();
  var searchField = popupComponent.findComponent("GSSugUP:_GSFsf");
  var searchFieldClientId = searchField.getClientId();
  
  // Bring up autosuggest.  
  var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(searchField);
  if (behavior)
  {
    behavior._processClick(searchField);
  }
  FndGlobalSearch.focusComponentByClientId(searchFieldClientId); 
  
};

/**
 * Process click of the newsfeed Global Search Field icon to show the search field.
 * @param event adf rich client click event from button.
 */
FndGlobalSearchObj.prototype.toggleOnNewsfeedSearchField = function(event) 
{
  FndGlobalSearch.toggleNewsfeedSearchField(true);
};

/**
 * Hide the search field and show the search icon in FuseWelcome.
 * This method is expected to be called from a scroll listener.
 * @param showSearchField do we show the search field (and hide the button), or
 * vice versa?
 */
FndGlobalSearchObj.prototype.toggleNewsfeedSearchField = function(showSearchField)
{
  var searchPanelComp = AdfPage.PAGE.findComponentByAbsoluteId("pt1:_UISGlobalSearch");
  if (!searchPanelComp) 
  {
    // FndOverview.
    searchPanelComp = AdfPage.PAGE.findComponentByAbsoluteId("_FOpt1:_UISGlobalSearch");
  }
  if (!searchPanelComp)
  {
    return;
  }
  var btn = searchPanelComp.findComponent("_UISgsnfsb");
  
  if (!btn)
  {
    // unless we can absolutely switch between the 2 parts of search, leave as is
    // or we may disable the search solution by leaving nothing visible.
    return;
  }
  // Do not use setVisible, it is a bound property that will propogate to the server
  // and cause a ppr of the header area, closing autosuggest.
  // searchPanelComp.setVisible(showSearchField);
  var searchPanelCompDom = AdfDhtmlEditableValuePeer.GetContentNode(searchPanelComp);
  var btnDom = AdfDhtmlEditableValuePeer.GetContentNode(btn);

  if (self._invisibleTimerId) {
    AdfPage.PAGE.cancelTimer(self._invisibleTimerId);
    self._invisibleTimerId = undefined;
  }
  if (showSearchField)
  {
    // immediately make the field visible (it will be still opaque 0 meaning we
    // cannot see it), and start timer to hide the button after fade.
    searchPanelCompDom.style.visibility = "visible";
    self._invisibleTimerId = AdfPage.PAGE.scheduleTimer(FndGlobalSearch, 
                               FndGlobalSearch._setInvisible, 
                               btnDom, 250);
  }
  else 
  {
    // immediately make the button visible (it will be still opaque 0 meaning we
    // cannot see it), and start timer to hide the field after fade.
    btnDom.style.visibility = "visible";
    self._invisibleTimerId = AdfPage.PAGE.scheduleTimer(FndGlobalSearch, 
                               FndGlobalSearch._setInvisible, 
                               searchPanelCompDom, 250);
  }
  // Set opacity which triggers fade in / out.
  searchPanelCompDom.style.opacity = showSearchField ? "1" : "0";
  btnDom.style.opacity = showSearchField ? "0" : "1";
  // btn.setVisible(!showSearchField);
  
  var searchField = searchPanelComp.findComponent("_UISGSr:0:_GSFsf");
  var searchFieldClientId = searchField.getClientId();
  var behavior = FndSearchSuggestBehavior._findBehaviorFromComponent(searchField);
  if (showSearchField)
  {
    FndGlobalSearch.focusComponentByClientId(searchFieldClientId);
    var isHomepage = searchField.getProperty("isHomepage");
    if (isHomepage === 'false')
    {
      // Bring up autosuggest, but not in homepage in response to the header unfloating.  
      behavior._processClick(searchField);
    }
  }
  else
  {
    // close autosuggest if open.
    behavior._hideSuggestPopup(searchField);
  }
};

/**
 * Set domElement to be invisible, i.e. visibility = 'hidden'.
 * @param domElement Some non-null dom element.
 */
FndGlobalSearchObj.prototype._setInvisible = function(domElement)
{
  self._invisibleTimerId = undefined;
  domElement.style.visibility = "hidden";
};


/**
 * Global instantiation of Object.
 */
FndGlobalSearch = new FndGlobalSearchObj();
