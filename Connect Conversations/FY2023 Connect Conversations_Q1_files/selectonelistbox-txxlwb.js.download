AdfUIComponents.createComponentClass("AdfRichSelectOneListbox", {"componentType":"oracle.adf.RichSelectOneListbox", "propertyKeys":[{"name":"changed", "type":"Boolean", "default":false}, {"name":"changedDesc", "type":"String"}, {"name":"autoSubmit", "type":"Boolean", "default":false}, {"name":"accessKey", "type":"String"}, {"name":"contentStyle", "type":"String"}, {"name":"helpTopicId", "type":"String"}, {"name":"disabled", "type":"Boolean", "default":false, "secured":true}, {"name":"label", "type":"String"}, 
{"name":"readOnly", "type":"Boolean", "default":false, "secured":true}, {"name":"showRequired", "type":"Boolean", "default":false}, {"name":"simple", "type":"Boolean", "default":false}, {"name":"inlineStyle", "type":"String"}, {"name":"styleClass", "type":"String"}, {"name":"shortDesc", "type":"String"}, {"name":"unsecure", "type":"Object", "secured":true}, {"name":"visible", "type":"Boolean", "default":true}, {"name":"valuePassThru", "type":"Boolean", "default":false, "secured":true}, {"name":"unselectedLabel", 
"type":"String"}, {"name":"size", "type":"Number", "default":4}], "superclass":AdfUISelectOne});

AdfRichUIPeer.createPeerClass(AdfDhtmlSelectOneListbasePeer, "AdfDhtmlSelectOneListboxPeer");
AdfDhtmlSelectOneListboxPeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentPropertyGetters(this, AdfUIEditableValue.SUBMITTED_VALUE, AdfUISelectOne.SELECT_ITEMS, AdfRichSelectOneListbox.LABEL);
  AdfObject.ensureClassInitialization(AdfRichSelectOneListbox);
  AdfRichUIPeer.addComponentPropertyChanges(this, AdfRichSelectOneListbox.LABEL);
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.CLICK_EVENT_TYPE, AdfUIInputEvent.MOUSE_DOWN_EVENT_TYPE, AdfUIInputEvent.KEY_DOWN_EVENT_TYPE, AdfUIInputEvent.BLUR_EVENT_TYPE);
  this._DISABLED_STYLE_CLASS = "p_AFDisabled";
  this._SELECTED_STYLE_CLASS = "p_AFSelected";
  this._SELECTED_ID = "_afrSelectedId";
  this.LIST_HOLDER_ID = "listHolder";
  this._TITLES_POPULATED_EXPANDO = "_adfTP";
};
AdfDhtmlSelectOneListboxPeer.prototype.BindToComponent = function(component, domElement) {
  AdfDhtmlSelectOneListboxPeer.superclass.BindToComponent.call(this, component, domElement);
  var subid = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlSelectOneListboxPeer.LIST_HOLDER_ID);
  var domNode = AdfAgent.AGENT.getElementById(subid);
  if (domNode) {
    var hasTitles = domNode.getAttribute(AdfDhtmlSelectOneListboxPeer._TITLES_POPULATED_EXPANDO);
    if (!hasTitles) {
      var itmElements = this.GetItemElements(component);
      var rowCount = itmElements.length;
      var itmElement = null;
      var itemValue = null;
      var itemStatus = null;
      for (var i = 0;i < rowCount;i++) {
        itmElement = itmElements[i];
        if (itmElement.title == null || itmElement.title == "") {
          itmElement.setAttribute("title", itmElement.innerHTML);
        }
      }
      domNode.setAttribute(AdfDhtmlSelectOneListboxPeer._TITLES_POPULATED_EXPANDO, true);
    }
  }
};
AdfDhtmlSelectOneListboxPeer.prototype.HandleComponentClick = function(componentEvent) {
  AdfDhtmlSelectOneListboxPeer.superclass.HandleComponentClick.call(this, componentEvent);
  var component = componentEvent.getSource();
  var target = componentEvent.getNativeEventTarget();
  if (this.IsItemEnabled(target)) {
    var newValue = target.getAttribute(AdfDhtmlSelectOneListbasePeer._ITEM_VALUE_EXPANDO);
    var domElement = this.getDomElement();
    var oldSelectElement = this._getSelectedItemElement(component, domElement);
    if (oldSelectElement != null) {
      var ctrlKeyPressed = componentEvent.getNativeEvent().ctrlKey;
      if (ctrlKeyPressed && oldSelectElement == target) {
        newValue = "";
      }
    }
    this._validate(component, domElement, "" + newValue);
  }
};
AdfDhtmlSelectOneListboxPeer.prototype.HandleComponentMouseDown = function(componentEvent) {
  var nativeEvent = componentEvent.getNativeEvent();
  if (nativeEvent.ctrlKey) {
    componentEvent.cancel();
  }
};
AdfDhtmlSelectOneListboxPeer.prototype.HandleComponentKeyDown = function(componentEvent) {
  var evt = componentEvent.getNativeEvent();
  var keyCode = AdfAgent.AGENT.getKeyCode(evt);
  var component = componentEvent.getSource();
  var domElement = this.getDomElement();
  var oldSelectElement = this._getSelectedItemElement(component, domElement);
  var eventTarget = componentEvent.getNativeEventTarget();
  switch(keyCode) {
    case AdfKeyStroke.SPACE_KEY:
      if (evt.ctrlKey) {
        this._validate(component, domElement, "");
      }
      componentEvent.cancel();
      break;
    case AdfKeyStroke.ENTER_KEY:
      this.ValidateIfStashedOldValue(component, domElement);
      break;
    case AdfKeyStroke.ARROWUP_KEY:
    ;
    case AdfKeyStroke.ARROWDOWN_KEY:
      var selectElement;
      if (keyCode == AdfKeyStroke.ARROWUP_KEY) {
        selectElement = this.GetPreviousEnabledItem(oldSelectElement);
      } else {
        selectElement = this.GetNextEnabledItem(oldSelectElement);
      }
      if (!selectElement) {
        selectElement = this.GetFirstEnabledItem(component);
      }
      if (selectElement) {
        this.StashOldValue(component, domElement);
        var newValue = selectElement.getAttribute(AdfDhtmlSelectOneListbasePeer._ITEM_VALUE_EXPANDO);
        this.SetDisplayValue(component, domElement, newValue);
      }
      componentEvent.cancel();
      break;
  }
};
AdfDhtmlSelectOneListboxPeer.prototype.HandleComponentBlur = function(componentEvent) {
  var component = componentEvent.getSource();
  var domElement = this.getDomElement();
  this.ValidateIfStashedOldValue(component, domElement);
};
AdfDhtmlSelectOneListboxPeer.prototype.SetDisplayValue = function(component, domElement, newValue) {
  var domNode = AdfDhtmlEditableValuePeer.GetContentNode(component, domElement);
  AdfAssert.assertString(newValue);
  if (!component.getReadOnly()) {
    var newSelectedItem = this.FindItemElementWithValue(component, newValue);
    var oldSelectElement = this._getSelectedItemElement(component, domElement);
    this.SelectItemElement(component, newSelectedItem, oldSelectElement);
    domNode.value = newValue;
  }
};
AdfDhtmlSelectOneListboxPeer.prototype.GetNoteWindowAlignmentNode = function(component, rootNode) {
  var clientId = component.getClientId();
  var alignSubId = AdfRichUIPeer.CreateSubId(clientId, AdfDhtmlSelectOneListboxPeer.LIST_HOLDER_ID);
  return AdfAgent.AGENT.getElementById(alignSubId);
};
AdfDhtmlSelectOneListboxPeer.prototype.GetItemElementsParent = function(component) {
  var clientId = component.getClientId();
  return AdfAgent.AGENT.getElementById(AdfRichUIPeer.CreateSubId(clientId, AdfDhtmlSelectOneListboxPeer.LIST_HOLDER_ID));
};
AdfDhtmlSelectOneListboxPeer.prototype._getSelectedItemElement = function(component, domElement) {
  var curValue = this.GetSubmittedValue(component, domElement);
  return this.FindItemElementWithValue(component, curValue);
};
AdfDhtmlSelectOneListboxPeer.prototype.GetInlineEditor = function(event) {
  return AdfDhtmlSimpleLabelEditor.getInlineEditor();
};
AdfDhtmlSelectOneListboxPeer.prototype._validate = function(component, domElement, newValue) {
  this.SetDisplayValue(component, domElement, newValue);
  this.Validate(component, newValue);
};
