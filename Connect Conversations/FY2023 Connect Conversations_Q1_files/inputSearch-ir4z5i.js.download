function AdfRestXhrFactory() {
}
AdfObject.createSubclass(AdfRestXhrFactory);
AdfRestXhrFactory._instances = [];
AdfRestXhrFactory.URL_KEY = "url";
AdfRestXhrFactory.CLIENT_ID_LIST_KEY = "clientIdList";
AdfRestXhrFactory.register = function(instance) {
  AdfRestXhrFactory._instances.push(instance);
};
AdfRestXhrFactory.prototype.getXhr = function(xhr, properties) {
  AdfAssert.failedInAbstractFunction();
};
AdfRestXhrFactory.__getXhr = function(xhr, properties) {
  var factoryInstances = AdfRestXhrFactory._instances;
  for (var i = 0, length = factoryInstances.length;i < length;i++) {
    var instance = factoryInstances[i];
    var newXhr = instance.getXhr(xhr, properties);
    if (newXhr) {
      AdfAssert.assertFunction(newXhr.setRequestHeader);
      AdfAssert.assertFunction(newXhr.send);
      AdfAssert.assertNumber(newXhr.readyState);
      return newXhr;
    }
  }
  return xhr;
};

function AdfAutoCompletingEvent(source, submittedValue, autoCompletedValue) {
  this.Init(source, submittedValue, autoCompletedValue);
}
AdfObject.createSubclass(AdfAutoCompletingEvent, AdfComponentEvent);
AdfAutoCompletingEvent._EVENT_TYPE = "autoCompletingEvent";
AdfAutoCompletingEvent.queue = function(component, submittedValue, autoCompletedValue) {
  var event = new AdfAutoCompletingEvent(component, submittedValue, autoCompletedValue);
  event.queue();
  return event;
};
AdfAutoCompletingEvent.prototype.vetoAutoCompletionError = function(shouldVeto) {
  this._vetoAutoCompletionError = shouldVeto == undefined || shouldVeto == true;
};
AdfAutoCompletingEvent.prototype.getSubmittedValue = function() {
  return this._submittedValue;
};
AdfAutoCompletingEvent.prototype.getAutoCompletedValue = function() {
  return this._autoCompletedValue;
};
AdfAutoCompletingEvent.prototype.isAutoCompletionSuppressed = function() {
  return this._vetoAutoCompletionError;
};
AdfAutoCompletingEvent.prototype.Init = function(source, submittedValue, autoCompletedValue) {
  AdfAssert.assertPrototype(source, AdfRichInputSearch);
  AdfAssert.assertString(submittedValue);
  AdfAutoCompletingEvent.superclass.Init.call(this, source, AdfAutoCompletingEvent._EVENT_TYPE);
  this._submittedValue = submittedValue;
  this._autoCompletedValue = autoCompletedValue;
  this._vetoAutoCompletionError = false;
};

function AdfRestDataService() {
  this.Init();
}
AdfObject.createSubclass(AdfRestDataService);
AdfRestDataService.InitClass = function() {
  this.SUCCESS_CALLBACK_KEY = "success";
  this.ERROR_CALLBACK_KEY = "error";
  this.PRIORITIZE = "priority";
  this.CLIENT_ID_KEY = "clientId";
  this.REQUEST_DATA = "request";
};
AdfRestDataService.prototype.Init = function() {
  AdfRestDataService.superclass.Init.call(this);
  this._requestQueueManager = new AdfRestRequestQueueManager;
  this._poolManager = new AdfXhrPoolManager(this._requestQueueManager);
};
AdfRestDataService.normalizeUrl = function(url, queryString) {
  AdfAssert.assertString(url);
  url = url.trim();
  url = AdfRestDataService._removeHash(url);
  url = AdfRestDataService.__removeTrailingSlashQuestionMarkAmpersand(url);
  url = AdfRestDataService._appendAndMergeQueryString(url, queryString);
  url = AdfRestDataService._sortQueryParams(url);
  if (AdfRestDataService.isRelativeUrl(url)) {
    url = AdfAgent.AGENT.getOrigin() + url;
  }
  return url;
};
AdfRestDataService.prototype.isBusy = function() {
  return this._requestQueueManager.hasOutstandingPriorityRequests() || this._poolManager.hasDispatchedPriorityRequests();
};
AdfRestDataService.isRelativeUrl = function(url) {
  return url.indexOf("://") == -1;
};
AdfRestDataService.prototype.queueRequest = function(actionURL, options) {
  options = AdfRestDataService._initializeOptions(options);
  var queryString = options[AdfRestDataService.REQUEST_DATA].queryString;
  actionURL = AdfRestDataService.normalizeUrl(actionURL, queryString);
  this._requestQueueManager.push(actionURL, options);
};
AdfRestDataService.prototype.__xhrCallback = function(request, optionKey, callbackArgs) {
  var options = request.options;
  for (var i = 0;i < options.length;i++) {
    var option = options[i];
    var callback = option[optionKey];
    if (callback) {
      AdfAssert.assertFunction(callback);
      try {
        var args = callbackArgs.slice();
        args.push(option);
        callback.apply(this, args);
      } catch (exe) {
        AdfLogger.LOGGER.severe("Exception ocurred while invoking '" + optionKey + "' callback for the URL '" + request.actionURL + "'.", exe);
      }
    }
  }
};
AdfRestDataService._appendAndMergeQueryString = function(url, queryString) {
  if (!queryString) {
    return url;
  }
  var queryIndex = url.indexOf("?");
  if (queryIndex == -1) {
    return url + "?" + queryString;
  }
  var existingQueryString = url.substring(queryIndex + 1);
  var existingQueryStringArr = existingQueryString.split("\x26");
  var appendableQueryStringArr = queryString.split("\x26");
  var newQueryString = "";
  for (var i = 0, len1 = existingQueryStringArr.length;i < len1;i++) {
    var paramName = existingQueryStringArr[i].split("\x3d")[0];
    for (var j = 0;j < appendableQueryStringArr.length;j++) {
      if (appendableQueryStringArr[j].indexOf(paramName) == 0) {
        existingQueryStringArr[i] = appendableQueryStringArr[j];
        appendableQueryStringArr.splice(j, 1);
        break;
      }
    }
    newQueryString += existingQueryStringArr[i] + "\x26";
  }
  for (var i = 0, len1 = appendableQueryStringArr.length;i < len1;i++) {
    newQueryString += appendableQueryStringArr[i] + "\x26";
  }
  return AdfRestDataService.__removeTrailingSlashQuestionMarkAmpersand(url.substring(0, queryIndex + 1) + newQueryString);
};
AdfRestDataService._initializeOptions = function(options) {
  if (!options) {
    options = {};
  }
  var requestData = options[AdfRestDataService.REQUEST_DATA];
  if (!requestData) {
    requestData = {};
    requestData.method = "GET";
  }
  options[AdfRestDataService.REQUEST_DATA] = requestData;
  options[AdfRestDataService.PRIORITIZE] = options[AdfRestDataService.PRIORITIZE] == true;
  return options;
};
AdfRestDataService.__removeTrailingSlashQuestionMarkAmpersand = function(url) {
  var oldUrl;
  do {
    oldUrl = url;
    url = url.replace(/[\/\?&]+$/, "");
  } while (oldUrl != url);
  return url;
};
AdfRestDataService._removeHash = function(url) {
  var hashPos = url.indexOf("#");
  if (hashPos != -1) {
    url = url.substring(0, url.indexOf("#"));
  }
  return url;
};
AdfRestDataService._sortQueryParams = function(url) {
  var queryIndex = url.indexOf("?");
  if (queryIndex == -1) {
    return url;
  }
  var searchStr = url.substring(queryIndex + 1);
  var searchStrArr = searchStr.split("\x26");
  var sortedSearchStrArr = searchStrArr.sort();
  var sortedSearchStr = "";
  for (var i = 0, length = sortedSearchStrArr.length;i < length;i++) {
    sortedSearchStr += sortedSearchStrArr[i] + "\x26";
  }
  sortedSearchStr = sortedSearchStr.replace(/&$/, "");
  return url.substring(0, queryIndex + 1) + sortedSearchStr;
};

function AdfRestRequestQueueManager() {
  this.Init();
}
AdfObject.createSubclass(AdfRestRequestQueueManager);
AdfRestRequestQueueManager.InitClass = function() {
};
AdfRestRequestQueueManager.prototype.Init = function() {
  AdfRestRequestQueueManager.superclass.Init.call(this);
  this._regularRequestQueue = [];
  this._priorityRequestQueue = [];
};
AdfRestRequestQueueManager.getClientIdList = function(dispatchRequest) {
  var clientIdList = [];
  var options = dispatchRequest.options;
  for (var i = 0, length = options.length;i < length;i++) {
    clientIdList.push(options[i].clientId);
  }
  return clientIdList;
};
AdfRestRequestQueueManager.markDead = function(request) {
  request._isDead = true;
};
AdfRestRequestQueueManager.prototype.first = function() {
  var req = AdfRestRequestQueueManager._peekNextOutstandingRequest(this._priorityRequestQueue);
  if (!req) {
    req = AdfRestRequestQueueManager._peekNextOutstandingRequest(this._regularRequestQueue);
  }
  return req;
};
AdfRestRequestQueueManager.prototype.hasOutstandingPriorityRequests = function() {
  AdfRestRequestQueueManager._deQueueDeadRequests(this._priorityRequestQueue);
  return this._priorityRequestQueue.length != 0;
};
AdfRestRequestQueueManager.prototype.shift = function() {
  var nextReqToProcess = AdfRestRequestQueueManager._shiftNextOutstandingRequest(this._priorityRequestQueue);
  if (!nextReqToProcess) {
    nextReqToProcess = AdfRestRequestQueueManager._shiftNextOutstandingRequest(this._regularRequestQueue);
  }
  return nextReqToProcess;
};
AdfRestRequestQueueManager.prototype.registerRequestQueuedListener = function(callback) {
  this._requestQueuedListener = callback;
};
AdfRestRequestQueueManager.prototype.push = function(actionURL, options) {
  AdfAssert.assertNonEmptyString(actionURL);
  var isPrioritized = options[AdfRestDataService.PRIORITIZE];
  var request = this._getMatchingOutstandingRequest(actionURL, options[AdfRestDataService.REQUEST_DATA]);
  if (request) {
    request.options.push(options);
    if (isPrioritized && !request[AdfRestDataService.PRIORITIZE]) {
      this._upgradeRequest(request);
    }
  } else {
    this._constructAndQueueRequest(actionURL, options, isPrioritized);
  }
};
AdfRestRequestQueueManager._cloneSimpleObject = function(object) {
  var copyObject = {};
  var keys = Object.keys(object);
  for (var i = 0;i < keys.length;i++) {
    copyObject[keys[i]] = object[keys[i]];
  }
  return copyObject;
};
AdfRestRequestQueueManager._deQueueDeadRequests = function(queue) {
  while (queue.length != 0 && queue[0]._isDead) {
    queue.shift();
  }
};
AdfRestRequestQueueManager._findMatchingOutstandingRequest = function(queue, actionURL, requestData) {
  for (var i = 0;i < queue.length;i++) {
    var qItem = queue[i];
    if (qItem.actionURL === actionURL && !qItem._isDead) {
      var qRequestData = qItem.options[0][AdfRestDataService.REQUEST_DATA];
      if (qRequestData.method == requestData.method && qRequestData.body == requestData.body) {
        return qItem;
      }
    }
  }
};
AdfRestRequestQueueManager._peekNextOutstandingRequest = function(queue) {
  AdfRestRequestQueueManager._deQueueDeadRequests(queue);
  return queue[0];
};
AdfRestRequestQueueManager._shiftNextOutstandingRequest = function(queue) {
  AdfRestRequestQueueManager._deQueueDeadRequests(queue);
  return queue.shift();
};
AdfRestRequestQueueManager.prototype._getMatchingOutstandingRequest = function(actionURL, requestData) {
  var request = AdfRestRequestQueueManager._findMatchingOutstandingRequest(this._priorityRequestQueue, actionURL, requestData);
  if (!request) {
    request = AdfRestRequestQueueManager._findMatchingOutstandingRequest(this._regularRequestQueue, actionURL, requestData);
  }
  return request;
};
AdfRestRequestQueueManager.prototype._constructAndQueueRequest = function(actionURL, options, isPrioritized) {
  var request = {};
  request.actionURL = actionURL;
  request.options = [options];
  request[AdfRestDataService.PRIORITIZE] = isPrioritized;
  var queue = isPrioritized ? this._priorityRequestQueue : this._regularRequestQueue;
  queue.push(request);
  this._requestQueuedListener();
};
AdfRestRequestQueueManager.prototype._upgradeRequest = function(request) {
  request._isDead = true;
  var copyRequest = AdfRestRequestQueueManager._cloneSimpleObject(request);
  copyRequest._isDead = false;
  this._priorityRequestQueue.push(copyRequest);
  copyRequest[AdfRestDataService.PRIORITIZE] = true;
};

function AdfXhrPoolManager(requestQueueManager) {
  this.Init(requestQueueManager);
}
AdfObject.createSubclass(AdfXhrPoolManager);
AdfXhrPoolManager.InitClass = function() {
};
AdfXhrPoolManager.prototype.Init = function(requestQueueManager) {
  AdfXhrPoolManager.superclass.Init.call(this);
  this._connectionTokens = this._intializeConnectionTokens();
  if (window.Map) {
    this._progressRequests = new Map;
    if (!this._progressRequests.forEach) {
      this._progressRequests = null;
    }
  }
  this._requestQueueManager = requestQueueManager;
  this._requestQueueManager.registerRequestQueuedListener(this.createCallback(this._drainRequests));
};
AdfXhrPoolManager.prototype.hasDispatchedPriorityRequests = function() {
  if (!this._progressRequests) {
    return false;
  }
  var hasDispatchedPriorityRequests = false;
  this._progressRequests.forEach(function(requestItem, actionUrl) {
    if (requestItem[AdfRestDataService.PRIORITIZE]) {
      hasDispatchedPriorityRequests = true;
    }
  });
  return hasDispatchedPriorityRequests;
};
AdfXhrPoolManager._createConfiguredXhr = function(dispatchRequest, httpMethod) {
  var xhrObject = new XMLHttpRequest;
  xhrObject.open(httpMethod, dispatchRequest.actionURL, true);
  var decoratedXhrObject = AdfRestXhrFactory.__getXhr(xhrObject, AdfXhrPoolManager._getXhrProps(dispatchRequest));
  AdfAssert.assert(decoratedXhrObject.readyState != XMLHttpRequest.HEADERS_RECEIVED && decoratedXhrObject.readyState != XMLHttpRequest.LOADING);
  decoratedXhrObject.setRequestHeader("Accept", "application/json");
  decoratedXhrObject.setRequestHeader("Accept-Language", AdfPage.PAGE.getLocaleContext().getLocale());
  decoratedXhrObject.responseType = "json";
  return decoratedXhrObject;
};
AdfXhrPoolManager._getXhrProps = function(dispatchRequest) {
  var decoratedXhrProps = {};
  decoratedXhrProps[AdfRestXhrFactory.URL_KEY] = dispatchRequest.actionURL;
  decoratedXhrProps[AdfRestXhrFactory.CLIENT_ID_LIST_KEY] = AdfRestRequestQueueManager.getClientIdList(dispatchRequest);
  return decoratedXhrProps;
};
AdfXhrPoolManager.prototype._dispatch = function(dispatchRequest, token) {
  var requestData = dispatchRequest.options[0][AdfRestDataService.REQUEST_DATA];
  var xhrObject = AdfXhrPoolManager._createConfiguredXhr(dispatchRequest, requestData.method);
  var self = this;
  xhrObject.onreadystatechange = function() {
    self._readyStateChangeCallback(xhrObject, dispatchRequest, token);
  };
  if (xhrObject.readyState <= XMLHttpRequest.OPENED) {
    AdfPage.PAGE.__perfTimings(false, false, true, "REST request sent: url\x3d", dispatchRequest.actionURL);
    xhrObject.send(requestData.body);
  } else {
    AdfLogger.LOGGER.warning("XHR request to '" + dispatchRequest.actionURL + "' already issued by the request callback. The connection token used" + "for this request was " + token);
  }
};
AdfXhrPoolManager.prototype._drainRequests = function() {
  if (!this._progressRequests) {
    return;
  }
  do {
    this._mergeRequests();
    var token = this._connectionTokens.pop();
    if (token === undefined) {
      break;
    }
    var nextReqToProcess = this._requestQueueManager.shift();
    if (!nextReqToProcess) {
      this._connectionTokens.push(token);
      break;
    }
    this._progressRequests.set(nextReqToProcess.actionURL, nextReqToProcess);
    this._dispatch(nextReqToProcess, token);
  } while (true);
};
AdfXhrPoolManager.prototype._intializeConnectionTokens = function() {
  var maxAvailableConns = AdfAgent.AGENT.getMaxConnectionsPerDomain() - 2;
  maxAvailableConns = maxAvailableConns <= 0 ? 1 : maxAvailableConns;
  var connectionTokens = [];
  for (var i = 1;i <= maxAvailableConns;i++) {
    connectionTokens[i] = i;
  }
  return connectionTokens;
};
AdfXhrPoolManager.prototype._mergeRequests = function() {
  var peekedRequest = this._requestQueueManager.first();
  while (peekedRequest) {
    var dispatchedRequest = this._progressRequests.get(peekedRequest.actionURL);
    if (!dispatchedRequest) {
      break;
    }
    AdfRestRequestQueueManager.markDead(peekedRequest);
    dispatchedRequest.options = dispatchedRequest.options.concat(peekedRequest.options);
    dispatchedRequest[AdfRestDataService.PRIORITIZE] = dispatchedRequest[AdfRestDataService.PRIORITIZE] || peekedRequest[AdfRestDataService.PRIORITIZE];
    peekedRequest = this._requestQueueManager.first();
  }
};
AdfXhrPoolManager.prototype._readyStateChangeCallback = function(xhrObject, dispatchRequest, token) {
  if (xhrObject.readyState === XMLHttpRequest.DONE) {
    AdfPage.PAGE.__perfTimings(false, false, true, "REST response received: status\x3d ", xhrObject.status, ", url\x3d", dispatchRequest.actionURL);
    this._progressRequests["delete"](dispatchRequest.actionURL);
    this._connectionTokens.push(token);
    this._drainRequests();
    var ds = AdfPage.PAGE.getRestDataService();
    if (xhrObject.status == 200) {
      ds.__xhrCallback(dispatchRequest, AdfRestDataService.SUCCESS_CALLBACK_KEY, [xhrObject.response]);
    } else {
      ds.__xhrCallback(dispatchRequest, AdfRestDataService.ERROR_CALLBACK_KEY, [xhrObject.status, xhrObject.response]);
    }
  }
};

function AdfSuggestionMapInterface() {
  AdfAssert.failedInAbstractFunction();
}
AdfObject.createSubclass(AdfSuggestionMapInterface);
AdfSuggestionMapInterface.prototype.get = function(key) {
  AdfAssert.failedInAbstractFunction();
};

function AdfSuggestionMap(array, suggestionMap) {
  this._array = array;
  this.length = this._array.length;
  if (suggestionMap) {
    this._keyToObjectMap = suggestionMap._keyToObjectMap;
  }
}
AdfObject.createSubclass(AdfSuggestionMap, AdfSuggestionMapInterface);
AdfSuggestionMap.prototype.at = function(index) {
  return this._array[index];
};
AdfSuggestionMap.prototype.forEach = function(callback, thisArg) {
  var newFunc = function(modelObj, arrayIndex) {
    callback.call(this, modelObj.data, modelObj.key, arrayIndex, modelObj);
  };
  this._array.forEach(newFunc, thisArg);
};
AdfSuggestionMap.prototype.filter = function(callback, thisArg) {
  var newFunc = function(modelObj, arrayIndex) {
    return callback.call(this, modelObj.data, modelObj.key, arrayIndex, modelObj);
  };
  return new AdfSuggestionMap(this._array.filter(newFunc, thisArg), this);
};
AdfSuggestionMap.prototype.get = function(key) {
  if (!this._keyToObjectMap) {
    this._buildLookupTable();
  }
  return this._keyToObjectMap[key];
};
AdfSuggestionMap.prototype.getArray = function() {
  return this._array;
};
AdfSuggestionMap.prototype._buildLookupTable = function() {
  var data = this._keyToObjectMap = {};
  var mapFunc = function(item) {
    data[item.key] = item;
  };
  this._array.forEach(mapFunc);
};

function AdfInputSearchScoreUtils() {
}
AdfObject.createSubclass(AdfInputSearchScoreUtils);
AdfInputSearchScoreUtils.InitClass = function() {
  this._MAX_SCORE = 250;
  this._NEW_ITEM_SCORE = 20;
  this._STATE_SAME_SESSION = 1;
  this._STATE_PREVIOUS_SESSION = 2;
  this._STATE_OLD_SESSION = 3;
  this._SCORE_INCREMENTOR_MAP = {};
  this._SCORE_INCREMENTOR_MAP[this._STATE_SAME_SESSION] = 20;
  this._SCORE_INCREMENTOR_MAP[this._STATE_PREVIOUS_SESSION] = 40;
  this._SCORE_INCREMENTOR_MAP[this._STATE_OLD_SESSION] = 20;
  this._DECAY_SCORE_MAP = {};
  this._DECAY_SCORE_MAP[this._STATE_SAME_SESSION] = 4;
  this._DECAY_SCORE_MAP[this._STATE_PREVIOUS_SESSION] = 4;
  this._DECAY_SCORE_MAP[this._STATE_OLD_SESSION] = 8;
};
AdfInputSearchScoreUtils.getMinScoredSuggestionKey = function(scoreMap) {
  var minScoredSuggestionKey;
  var minScore = Number.POSITIVE_INFINITY;
  var suggestionKeys = Object.keys(scoreMap);
  for (var i = 0, length = suggestionKeys.length;i < length;i++) {
    var currenItemKey = suggestionKeys[i];
    var currentItemScore = scoreMap[currenItemKey].value;
    if (currentItemScore < minScore) {
      minScore = currentItemScore;
      minScoredSuggestionKey = currenItemKey;
    }
  }
  return minScoredSuggestionKey;
};
AdfInputSearchScoreUtils.sortPerScore = function(suggestionsList, scoreMap) {
  return suggestionsList.sort(function(suggestionA, suggestionB) {
    return scoreMap[suggestionB.key].value - scoreMap[suggestionA.key].value;
  });
};
AdfInputSearchScoreUtils.updateScores = function(storageKey, preferredSuggestions, currentValue) {
  var sessionTimeStamps = AdfInputSearchScoreUtils._updateSessionState(storageKey, preferredSuggestions);
  var scoreMap = preferredSuggestions.score;
  AdfInputSearchScoreUtils._decrementScores(scoreMap, sessionTimeStamps);
  var currentItemScore = scoreMap[currentValue];
  if (!currentItemScore) {
    currentItemScore = {};
    currentItemScore.time = Date.now();
    currentItemScore.value = AdfInputSearchScoreUtils._NEW_ITEM_SCORE;
    scoreMap[currentValue] = currentItemScore;
  } else {
    AdfInputSearchScoreUtils._incrementScore(currentItemScore, sessionTimeStamps);
    currentItemScore.time = Date.now();
  }
};
AdfInputSearchScoreUtils._decrementScores = function(scoreMap, sessionTimeStamps) {
  var suggestionKeys = Object.keys(scoreMap);
  for (var i = 0, length = suggestionKeys.length;i < length;i++) {
    var score = scoreMap[suggestionKeys[i]];
    var sessionState = AdfInputSearchScoreUtils._getSessionState(score.time, sessionTimeStamps);
    score.value -= AdfInputSearchScoreUtils._DECAY_SCORE_MAP[sessionState];
  }
};
AdfInputSearchScoreUtils._incrementScore = function(currentItemScore, sessionTimeStamps) {
  var sessionState = AdfInputSearchScoreUtils._getSessionState(currentItemScore.time, sessionTimeStamps);
  if (currentItemScore.value < 0) {
    currentItemScore.value = 0;
  }
  currentItemScore.value += AdfInputSearchScoreUtils._SCORE_INCREMENTOR_MAP[sessionState];
  if (currentItemScore.value > AdfInputSearchScoreUtils._MAX_SCORE) {
    currentItemScore.value = AdfInputSearchScoreUtils._MAX_SCORE;
  }
};
AdfInputSearchScoreUtils._getSessionState = function(itemTimeStamp, sessionTimeStamps) {
  var isCurrentSession = itemTimeStamp >= sessionTimeStamps.current;
  var isNextSession = itemTimeStamp >= sessionTimeStamps.previous;
  if (itemTimeStamp >= sessionTimeStamps.current) {
    return AdfInputSearchScoreUtils._STATE_SAME_SESSION;
  } else {
    if (itemTimeStamp >= sessionTimeStamps.previous) {
      return AdfInputSearchScoreUtils._STATE_PREVIOUS_SESSION;
    } else {
      AdfInputSearchScoreUtils._STATE_OLD_SESSION;
    }
  }
};
AdfInputSearchScoreUtils._updateSessionState = function(storageKey, preferredSuggestions) {
  var sessionStartTime = preferredSuggestions.sessionStartTime ? preferredSuggestions.sessionStartTime : Date.now();
  var sessionTimeStamps = sessionStorage.getItem(storageKey);
  if (!sessionTimeStamps) {
    sessionTimeStamps = {};
    sessionTimeStamps.current = Date.now();
    sessionTimeStamps.previous = sessionStartTime;
    sessionStorage.setItem(storageKey, JSON.stringify(sessionTimeStamps));
    preferredSuggestions.sessionStartTime = sessionTimeStamps.current;
    return sessionTimeStamps;
  }
  return JSON.parse(sessionTimeStamps);
};

function AdfPreferredSuggestionsManager() {
}
AdfObject.createSubclass(AdfPreferredSuggestionsManager);
AdfPreferredSuggestionsManager.InitClass = function() {
  this._DONT_CACHE_REPLACEMENT_STR = "\u2022\u2022\u2022\u2022\u2022";
  this._SUGGESTIONS_TOO_LESS_COUNT = 16;
};
AdfPreferredSuggestionsManager.add = function(inputSearch, newValues, suggestionMap) {
  var suggestionsSection = AdfInputSearchUtils.getSuggestionsSection(inputSearch);
  if (!suggestionsSection || !suggestionMap) {
    return;
  }
  var storageKey = AdfPreferredSuggestionsManager._getCacheKey(inputSearch, suggestionsSection);
  var preferredSuggestions = AdfPreferredSuggestionsManager._read(storageKey, suggestionsSection.getDisplayCount());
  var preferredSuggestionsList = preferredSuggestions.suggestions;
  var scoreMap = preferredSuggestions.score;
  for (var i = 0, length = newValues.length;i < length;i++) {
    var newValue = newValues[i];
    if (!scoreMap[newValue]) {
      preferredSuggestionsList.unshift(AdfPreferredSuggestionsManager._getCacheableSuggestionData(suggestionsSection, suggestionMap.get(newValue)));
      if (preferredSuggestionsList.length > preferredSuggestions.maxDisplayCount) {
        var minScoredSuggestionKey = AdfInputSearchScoreUtils.getMinScoredSuggestionKey(scoreMap);
        delete scoreMap[minScoredSuggestionKey];
        var minScoredItemIndex = AdfPreferredSuggestionsManager._findIndex(preferredSuggestionsList, minScoredSuggestionKey);
        preferredSuggestionsList.splice(minScoredItemIndex, 1);
      }
    }
    AdfInputSearchScoreUtils.updateScores(storageKey, preferredSuggestions, newValue);
  }
  localStorage.setItem(storageKey, JSON.stringify(preferredSuggestions));
};
AdfPreferredSuggestionsManager.get = function(inputSearch) {
  var suggestionsSection = AdfInputSearchUtils.getSuggestionsSection(inputSearch);
  if (!suggestionsSection) {
    return;
  }
  var storageKey = AdfPreferredSuggestionsManager._getCacheKey(inputSearch, suggestionsSection);
  var preferredSuggestions = localStorage.getItem(storageKey);
  if (!preferredSuggestions) {
    return;
  }
  preferredSuggestions = JSON.parse(preferredSuggestions);
  var version = preferredSuggestions.version;
  if (version == 1) {
    var totalSuggestionsCount = preferredSuggestions.totalSize;
    var preferredSuggestionsList = preferredSuggestions.suggestions;
    if (AdfPreferredSuggestionsManager._isSuggestionsTooLess(inputSearch, totalSuggestionsCount, preferredSuggestionsList.length)) {
      return;
    }
    preferredSuggestionsList = AdfSequencedSections.prefilter(inputSearch, preferredSuggestionsList);
    preferredSuggestionsList = AdfInputSearchScoreUtils.sortPerScore(preferredSuggestionsList, preferredSuggestions.score);
    preferredSuggestionsList = AdfPreferredSuggestionsManager._capPreferredSuggestions(preferredSuggestionsList, suggestionsSection.getDisplayCount());
    AdfPreferredSuggestionsManager._substituteDontCacheAttributes(suggestionsSection, preferredSuggestionsList);
    var preferredSuggestionMap = new AdfSuggestionMap(preferredSuggestionsList);
    if (preferredSuggestionMap.length > 0) {
      return preferredSuggestionMap;
    }
  }
};
AdfPreferredSuggestionsManager.update = function(inputSearch, isMasterList, suggestions) {
  var suggestionsSection = AdfInputSearchUtils.getSuggestionsSection(inputSearch);
  if (!suggestionsSection) {
    return;
  }
  var storageKey = AdfPreferredSuggestionsManager._getCacheKey(inputSearch, suggestionsSection);
  var preferredSuggestions = AdfPreferredSuggestionsManager._read(storageKey, suggestionsSection.getDisplayCount(), isMasterList ? suggestions : null);
  var preferredSuggestionsList = preferredSuggestions.suggestions;
  var length = preferredSuggestionsList.length;
  var updatedList = [];
  for (var i = 0, j = 0;i < length;i++) {
    var suggestionItem = suggestions.get(preferredSuggestionsList[i].key);
    if (suggestionItem) {
      updatedList[j++] = AdfPreferredSuggestionsManager._getCacheableSuggestionData(suggestionsSection, suggestionItem);
    } else {
      if (isMasterList) {
        delete preferredSuggestions.score[preferredSuggestionsList[i].key];
      } else {
        updatedList[j++] = preferredSuggestionsList[i];
      }
    }
  }
  preferredSuggestions.suggestions = updatedList;
  localStorage.setItem(storageKey, JSON.stringify(preferredSuggestions));
};
AdfPreferredSuggestionsManager.isDisplayAttributesCacheable = function(inputSearch) {
  var suggestionsSection = AdfInputSearchUtils.getSuggestionsSection(inputSearch);
  var dontCache = suggestionsSection.getDontCache();
  if (!dontCache) {
    return true;
  }
  var displayAttributes = inputSearch.getDisplayAttributes();
  var isCacheable = true;
  for (var i = 0, length = displayAttributes.length;i < length;i++) {
    if (dontCache[displayAttributes[i]]) {
      isCacheable = false;
      break;
    }
  }
  return isCacheable;
};
AdfPreferredSuggestionsManager._capPreferredSuggestions = function(preferredSuggestionsList, displayCount) {
  if (preferredSuggestionsList.length <= displayCount) {
    return preferredSuggestionsList;
  }
  var cappedCollection = new Array(displayCount);
  for (var i = 0;i < displayCount;i++) {
    cappedCollection[i] = preferredSuggestionsList[i];
  }
  return cappedCollection;
};
AdfPreferredSuggestionsManager._findIndex = function(preferredSuggestionsList, value) {
  for (var i = 0, length = preferredSuggestionsList.length;i < length;i++) {
    var suggestion = preferredSuggestionsList[i];
    if (preferredSuggestionsList[i].key == value) {
      return i;
    }
  }
  return -1;
};
AdfPreferredSuggestionsManager._getCacheKey = function(inputSearch, suggestionsSection) {
  var dataUrl = AdfInputSearchUtils.getDefaultSearchSection(inputSearch).getDataUrl();
  dataUrl = AdfRestDataService.normalizeUrl(dataUrl);
  var cacheKeyGeneratorFuncName = suggestionsSection.getCacheKeyGenerator();
  var cacheKey = dataUrl;
  if (cacheKeyGeneratorFuncName) {
    var cacheKeyGeneratorFunc = AdfInputSearchUtils.getFunction(cacheKeyGeneratorFuncName);
    if (cacheKeyGeneratorFunc) {
      try {
        cacheKey = cacheKeyGeneratorFunc.call(inputSearch, dataUrl);
      } catch (e) {
        AdfLogger.LOGGER.severe("cacheKeyGenerator ", cacheKeyGeneratorFuncName, " set on the component ", suggestionsSection.getClientId(), " has thrown an exception");
        throw e;
      }
    }
  }
  return AdfRestDataService.__removeTrailingSlashQuestionMarkAmpersand(cacheKey);
};
AdfPreferredSuggestionsManager._getCacheableSuggestionData = function(suggestionsSection, suggestionItem) {
  var dontCache = suggestionsSection.getDontCache();
  if (!dontCache) {
    return suggestionItem;
  }
  dontCache = Object.keys(dontCache);
  var copySuggestion = AdfInputSearchUtils.cloneSimpleObject(suggestionItem);
  copySuggestion.data = AdfInputSearchUtils.cloneSimpleObject(suggestionItem.data);
  for (var i = 0, length = dontCache.length;i < length;i++) {
    var dontCacheAttr = dontCache[i];
    delete copySuggestion.data[dontCacheAttr];
  }
  return copySuggestion;
};
AdfPreferredSuggestionsManager._isSuggestionsTooLess = function(inputSearch, totalSuggestionsCount, preferredSuggestionsLength) {
  return totalSuggestionsCount <= inputSearch.getRowCount() && totalSuggestionsCount <= AdfPreferredSuggestionsManager._SUGGESTIONS_TOO_LESS_COUNT;
};
AdfPreferredSuggestionsManager._read = function(storageKey, limit, suggestions) {
  var preferredSuggestions = localStorage.getItem(storageKey);
  if (!preferredSuggestions) {
    preferredSuggestions = {};
    preferredSuggestions.version = 1;
    preferredSuggestions.suggestions = [];
    preferredSuggestions.maxDisplayCount = limit;
    preferredSuggestions.score = {};
  } else {
    preferredSuggestions = JSON.parse(preferredSuggestions);
    preferredSuggestions.maxDisplayCount = limit > preferredSuggestions.maxDisplayCount ? limit : preferredSuggestions.maxDisplayCount;
  }
  preferredSuggestions.totalSize = suggestions ? suggestions.length : preferredSuggestions.totalSize;
  if (preferredSuggestions.totalSize == null) {
    preferredSuggestions.totalSize = AdfDhtmlInputSearchPeer.__SUGGESTIONS_RENDERING_CHUNK_SIZE;
  }
  return preferredSuggestions;
};
AdfPreferredSuggestionsManager._substituteDontCacheAttributes = function(suggestionsSection, preferredSuggestionsList) {
  var dontCache = suggestionsSection.getDontCache();
  if (!dontCache) {
    return;
  }
  dontCache = Object.keys(dontCache);
  for (var i = 0, len1 = preferredSuggestionsList.length;i < len1;i++) {
    var suggestion = preferredSuggestionsList[i];
    for (var j = 0, len2 = dontCache.length;j < len2;j++) {
      suggestion.data[dontCache[j]] = AdfPreferredSuggestionsManager._DONT_CACHE_REPLACEMENT_STR;
    }
  }
};

function AdfInputSearchMruCache(size) {
  this.Init(size);
}
AdfObject.createSubclass(AdfInputSearchMruCache);
AdfInputSearchMruCache.InitClass = function() {
  this._SEARCH_TERMS = 0;
  this.SUGGESTIONS = 1;
  this.IS_COMPREHENSIVE = 2;
  this._SPLIT_REGEX = new RegExp(/\s\s*/);
};
AdfInputSearchMruCache.prototype.Init = function(size) {
  AdfInputSearchMruCache.superclass.Init.call(this);
  this._size = size;
  this._cache = new Array(size);
  this._oldestSlot = 0;
  this._hasEmptySlots = true;
};
AdfInputSearchMruCache.prototype.get = function(searchTerms) {
  if (searchTerms === undefined) {
    return this._cache[this._getRecentIndex()];
  }
  searchTerms = AdfInputSearchMruCache.__splitAndSort(searchTerms);
  var index = this._isDuplicate(searchTerms);
  if (index === undefined) {
    return;
  }
  var cacheItem = this._cache[index];
  this._promote(index);
  return cacheItem;
};
AdfInputSearchMruCache.prototype.getBestMatch = function(searchTerms) {
  searchTerms = AdfInputSearchMruCache.__splitAndSort(searchTerms);
  var maxCountMatch = 0;
  var matchLength = 0;
  var maxMatchIndex = -1;
  var currentSlot = this._getRecentIndex();
  for (var index = currentSlot, i = 0, size = this._size;i < size;i++, index = this._getPreviousIndex(index)) {
    var cache = this._cache[index];
    if (!cache) {
      break;
    }
    var countObj = AdfInputSearchMruCache._getMatchCount(cache[AdfInputSearchMruCache._SEARCH_TERMS], searchTerms);
    if (maxCountMatch == countObj.count) {
      if (matchLength < countObj.matchLength) {
        maxMatchIndex = index;
        matchLength = countObj.matchLength;
      }
    } else {
      if (maxCountMatch < countObj.count) {
        maxCountMatch = countObj.count;
        maxMatchIndex = index;
        matchLength = countObj.matchLength;
      }
    }
  }
  if (maxCountMatch >= 1) {
    var cacheItem = this._cache[maxMatchIndex];
    this._promote(maxMatchIndex);
    return cacheItem;
  }
};
AdfInputSearchMruCache.prototype.put = function(searchTerms, suggestions, isComprehensive) {
  searchTerms = AdfInputSearchMruCache.__splitAndSort(searchTerms);
  var duplicateIndex = this._isDuplicate(searchTerms);
  if (duplicateIndex === undefined) {
    var nextSlot = this._getNextSlot();
    this._cache[nextSlot][AdfInputSearchMruCache._SEARCH_TERMS] = searchTerms;
    this._cache[nextSlot][AdfInputSearchMruCache.SUGGESTIONS] = suggestions;
    this._cache[nextSlot][AdfInputSearchMruCache.IS_COMPREHENSIVE] = isComprehensive;
  } else {
    this._cache[duplicateIndex][AdfInputSearchMruCache.SUGGESTIONS] = suggestions;
    this._cache[duplicateIndex][AdfInputSearchMruCache.IS_COMPREHENSIVE] = isComprehensive;
    this._promote(duplicateIndex);
  }
};
AdfInputSearchMruCache.__splitAndSort = function(str) {
  if (Array.isArray(str)) {
    return str;
  }
  return str.trim().split(AdfInputSearchMruCache._SPLIT_REGEX).sort();
};
AdfInputSearchMruCache._getMatchCount = function(list1, list2) {
  var len1 = list1.length;
  var len2 = list2.length;
  if (len2 < len1) {
    return 0;
  }
  var rem = 0, i = 0, count = 0, matchLength = 0;
  for (;i < len1;i++) {
    for (var j = rem;j < len2;j++) {
      if (list2[j].indexOf(list1[i]) === 0) {
        rem = j + 1;
        matchLength += list1[i].length;
        count++;
        break;
      }
    }
  }
  var returnObj = {};
  returnObj.count = count;
  returnObj.matchLength = matchLength;
  return returnObj;
};
AdfInputSearchMruCache._isArrayEqual = function(list1, list2) {
  var length = list1.length;
  if (length != list2.length) {
    return false;
  }
  for (var i = 0;i < length;i++) {
    if (list1[i] != list2[i]) {
      return false;
    }
  }
  return true;
};
AdfInputSearchMruCache._isSubset = function(list1, list2) {
  return list1.length == AdfInputSearchMruCache._getMatchCount(list1, list2).count;
};
AdfInputSearchMruCache.prototype._getNextIndex = function(index) {
  return (index + 1) % this._size;
};
AdfInputSearchMruCache.prototype._getPreviousIndex = function(index) {
  index = index - 1;
  return index == -1 ? this._size - 1 : index;
};
AdfInputSearchMruCache.prototype._getRecentIndex = function() {
  if (this._hasEmptySlots) {
    for (var i = 0;i < this._size;i++) {
      if (!this._cache[i]) {
        break;
      }
    }
    return i == 0 ? 0 : i - 1;
  }
  return this._getPreviousIndex(this._oldestSlot);
};
AdfInputSearchMruCache.prototype._getNextSlot = function() {
  if (this._hasEmptySlots) {
    for (var i = 0;i < this._size;i++) {
      if (!this._cache[i]) {
        this._cache[i] = new Array(3);
        return i;
      }
    }
    this._hasEmptySlots = false;
  }
  var nextSlot = this._oldestSlot;
  this._oldestSlot = this._getNextIndex(this._oldestSlot);
  return nextSlot;
};
AdfInputSearchMruCache.prototype._isDuplicate = function(searchTerms) {
  for (var i = 0;i < this._size;i++) {
    var cache = this._cache[i];
    if (!cache) {
      return;
    }
    var cachedSearchTerms = cache[AdfInputSearchMruCache._SEARCH_TERMS];
    if (cache[AdfInputSearchMruCache.IS_COMPREHENSIVE]) {
      if (AdfInputSearchMruCache._isSubset(cachedSearchTerms, searchTerms)) {
        return i;
      }
    } else {
      if (AdfInputSearchMruCache._isArrayEqual(cachedSearchTerms, searchTerms)) {
        return i;
      }
    }
  }
  return;
};
AdfInputSearchMruCache.prototype._promote = function(index) {
  var size = this._size;
  var temp = this._cache[index];
  var newIndex = this._getPreviousIndex(this._oldestSlot);
  for (var currentPointer = index, nextItemPointer = this._getNextIndex(index);currentPointer != newIndex;nextItemPointer = this._getNextIndex(nextItemPointer)) {
    var nextItem = this._cache[nextItemPointer];
    if (!nextItem) {
      newIndex = currentPointer;
      break;
    }
    this._cache[currentPointer] = this._cache[nextItemPointer];
    currentPointer = nextItemPointer;
  }
  this._cache[newIndex] = temp;
};

function AdfSequencedSections(searchSections) {
  this.Init(searchSections);
}
AdfObject.createSubclass(AdfSequencedSections);
AdfSequencedSections.InitClass = function() {
};
AdfSequencedSections.prototype.Init = function(searchSections) {
  AdfSequencedSections.superclass.Init.call(this);
  var sectionsLength = searchSections.length;
  this._sectionalData = new Array(sectionsLength);
  for (var i = 0;i < sectionsLength;i++) {
    this._sectionalData[i] = new AdfSectionalData(searchSections[i], i);
  }
};
function AdfSectionalData(searchSection, index) {
  this.searchSection = searchSection;
  this.data = null;
  this.isComprehensive = true;
  this.options = null;
  this.index = index;
  this.notified = false;
}
AdfSequencedSections.prefilter = function(component, collection) {
  var filterFuncName = component.getFilter();
  if (filterFuncName) {
    var filterFunc = AdfInputSearchUtils.getFunction(filterFuncName);
    if (filterFunc && filterFunc instanceof Function) {
      var filteredCollection = [];
      for (var i = 0, length = collection.length;i < length;i++) {
        var suggestion = collection[i];
        if (filterFunc.call(component, suggestion, i)) {
          filteredCollection.push(suggestion);
        }
      }
      return filteredCollection;
    }
    AdfLogger.LOGGER.severe("Couldn't locate filter function ", filterFuncName, " for component ", component.getClientId());
  }
  return collection;
};
AdfSequencedSections.fetchSpecificSuggestions = function(inputSearch, values) {
  var defaultSearchSection = AdfInputSearchUtils.getDefaultSearchSection(inputSearch);
  var endpoint = defaultSearchSection.getDataUrl();
  var options = {};
  options[AdfRestDataService.CLIENT_ID_KEY] = inputSearch.getClientId();
  options[AdfRestDataService.PRIORITIZE] = false;
  options[AdfRestDataService.SUCCESS_CALLBACK_KEY] = AdfSequencedSections._fetchingSpecificSuggestionsComplete;
  options[AdfRestDataService.ERROR_CALLBACK_KEY] = AdfSequencedSections._fetchingSpecificSuggestionsFailed;
  var context = {};
  context.filterAttributes = [inputSearch.getValueAttribute()];
  context.criteria = AdfRichInputSearch.CRITERIA_VALUE_EQUALS;
  context.searchTerms = values;
  options[AdfRestDataService.REQUEST_DATA] = AdfDhtmlSearchSectionPeer.executeFilterParametersFunc(defaultSearchSection, context);
  var page = AdfPage.PAGE;
  page.__perfTimings(false, false, true, "inputSearch: fetch row objects: id\x3d", inputSearch.getClientId(), ", url\x3d", endpoint, ", for values\x3d", values);
  var ds = page.getRestDataService();
  ds.queueRequest(endpoint, options);
};
AdfSequencedSections._fetchingSpecificSuggestionsComplete = function(response, options) {
  var clientId = options[AdfRestDataService.CLIENT_ID_KEY];
  var inputSearch = AdfPage.PAGE.findComponent(clientId);
  if (!inputSearch) {
    return;
  }
  var parsedResponse = AdfSequencedSections._parse(response, inputSearch);
  var suggestions = AdfSequencedSections._wrapSuggestions(parsedResponse.items, inputSearch.getValueAttribute());
  var multiSelectPeer = inputSearch.getPeer();
  multiSelectPeer.__fetchSpecificSuggestionsComplete(inputSearch, new AdfSuggestionMap(suggestions));
};
AdfSequencedSections._fetchingSpecificSuggestionsFailed = function(statusCode, response, options) {
  var clientId = options[AdfRestDataService.CLIENT_ID_KEY];
  AdfLogger.LOGGER.severe("A REST call made for fetching selected row objects for inputSearch component '", clientId, "' failed");
};
AdfSequencedSections.fetchSection = function(inputSearch, searchSection, isPrefetch, options) {
  var endpoint = searchSection.getDataUrl();
  var isDefaultSection = searchSection.getType() == AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT;
  AdfAssert.assert(isPrefetch || isDefaultSection);
  if (!endpoint) {
    if (!isPrefetch && isDefaultSection) {
      AdfLogger.LOGGER.severe("dataUrl attribute isn't set");
    }
    return;
  }
  if (isDefaultSection) {
    options = AdfSequencedSections._getDefaultOptions(inputSearch, searchSection, isPrefetch, options);
  } else {
    options = AdfSequencedSections._getPrefetchOptions(inputSearch, searchSection);
  }
  var page = AdfPage.PAGE;
  page.__perfTimings(false, false, true, "inputSearch: fetch data: id\x3d", inputSearch.getClientId(), ", url\x3d", endpoint, ", prefetch\x3d", isPrefetch);
  var ds = page.getRestDataService();
  ds.queueRequest(endpoint, options);
};
AdfSequencedSections._getDefaultOptions = function(inputSearch, searchSection, isPrefetch, options) {
  if (!options) {
    options = {};
  }
  options[AdfRestDataService.CLIENT_ID_KEY] = inputSearch.getClientId();
  options[AdfRestDataService.PRIORITIZE] = !isPrefetch;
  options[AdfRestDataService.SUCCESS_CALLBACK_KEY] = AdfSequencedSections._defaultFetchComplete;
  options[AdfRestDataService.ERROR_CALLBACK_KEY] = AdfSequencedSections._defaultFetchFailed;
  if (!options._isServerFiltering) {
    options._isServerFiltering = AdfSequencedSections.isServerFilterMode(inputSearch);
  }
  if (!isPrefetch) {
    options = inputSearch.getPeer().__getFetchOptions(inputSearch, searchSection, options, true);
  }
  return options;
};
AdfSequencedSections._getPrefetchOptions = function(inputSearch, searchSection) {
  var options = {};
  options[AdfRestDataService.CLIENT_ID_KEY] = inputSearch.getClientId();
  options[AdfRestDataService.PRIORITIZE] = false;
  if (AdfSequencedSections._shouldProcessPrefetchRequests(inputSearch)) {
    options[AdfRestDataService.SUCCESS_CALLBACK_KEY] = AdfSequencedSections._prefetchComplete;
    options[AdfRestDataService.ERROR_CALLBACK_KEY] = AdfSequencedSections._prefetchFailed;
  }
  return options;
};
AdfSequencedSections._defaultFetchComplete = function(response, options) {
  var clientId = options[AdfRestDataService.CLIENT_ID_KEY];
  var inputSearch = AdfPage.PAGE.findComponent(clientId);
  if (!inputSearch) {
    return;
  }
  var parsedResponse = AdfSequencedSections._parse(response, inputSearch);
  var suggestions = AdfSequencedSections._wrapSuggestions(parsedResponse.items, inputSearch.getValueAttribute());
  var peer = inputSearch.getPeer();
  var isComprehensive = !parsedResponse.hasMore;
  if (options[AdfRestDataService.PRIORITIZE]) {
    var unfilteredSuggestionsMap = new AdfSuggestionMap(suggestions);
    var shouldPrefilter = AdfSequencedSections._beforePrefilter(inputSearch, unfilteredSuggestionsMap, isComprehensive, options);
    if (shouldPrefilter) {
      suggestions = AdfSequencedSections.prefilter(inputSearch, suggestions);
    }
    suggestions = new AdfSuggestionMap(suggestions, unfilteredSuggestionsMap);
    var isServerFilterMode = AdfSequencedSections.isServerFilterMode(inputSearch);
    if (isServerFilterMode) {
      peer.__fetchCompleteServerMode(inputSearch, suggestions, options);
    } else {
      peer.__fetchComplete(inputSearch, suggestions, isComprehensive, options);
    }
  } else {
    suggestions = new AdfSuggestionMap(suggestions);
    AdfDhtmlInputSearchPeer.propagateValueAttributeDataType(inputSearch, suggestions);
    peer.PrefetchComplete(inputSearch, suggestions, isComprehensive);
  }
};
AdfSequencedSections._prefetchComplete = function(response, options) {
  var clientId = options[AdfRestDataService.CLIENT_ID_KEY];
  var inputSearch = AdfPage.PAGE.findComponent(clientId);
  if (!inputSearch) {
    return;
  }
  var parsedResponse = AdfSequencedSections._parse(response, inputSearch);
  var suggestions = AdfSequencedSections._wrapSuggestions(parsedResponse.items, inputSearch.getValueAttribute());
  suggestions = new AdfSuggestionMap(suggestions);
  AdfDhtmlInputSearchPeer.propagateValueAttributeDataType(inputSearch, suggestions);
  var multiSelectPeer = inputSearch.getPeer();
  multiSelectPeer.__resolveLocalSelections(inputSearch, suggestions);
};
AdfSequencedSections._defaultFetchFailed = function(statusCode, response, options) {
  var clientId = options[AdfRestDataService.CLIENT_ID_KEY];
  AdfLogger.LOGGER.severe("A REST call made by inputSearch component '", clientId, "' failed");
  var inputSearch = AdfPage.PAGE.findComponent(clientId);
  if (!inputSearch) {
    return;
  }
  if (options[AdfRestDataService.PRIORITIZE]) {
    inputSearch.getPeer().__fetchFailed(inputSearch, statusCode, response, options);
  } else {
    inputSearch.getPeer().__prefetchFailed(inputSearch, statusCode, response);
  }
};
AdfSequencedSections._prefetchFailed = function(statusCode, response, options) {
  var clientId = options[AdfRestDataService.CLIENT_ID_KEY];
  AdfLogger.LOGGER.severe("A REST call made by inputSearch component '", clientId, "' failed");
};
AdfSequencedSections.prototype.sendRequests = function() {
  this._sectionalData.forEach(this._sendRequest, this);
};
AdfSequencedSections.prototype._sendRequest = function(sectionalData) {
  var searchSection = sectionalData.searchSection;
  var inputSearch = searchSection.getParent();
  var endpoint = searchSection.getDataUrl();
  if (!endpoint) {
    return;
  }
  var page = AdfPage.PAGE;
  page.__perfTimings(false, false, true, "inputSearch: fetch data: id\x3d", inputSearch.getClientId(), ", url\x3d", endpoint);
  var ds = page.getRestDataService();
  ds.queueRequest(endpoint, this._getOptions(inputSearch, searchSection, sectionalData.index));
};
AdfSequencedSections.prototype._getOptions = function(inputSearch, searchSection, index) {
  var options = {};
  options[AdfRestDataService.CLIENT_ID_KEY] = inputSearch.getClientId();
  options[AdfRestDataService.PRIORITIZE] = true;
  options[AdfRestDataService.SUCCESS_CALLBACK_KEY] = this.createCallback(this._fetchComplete);
  options[AdfRestDataService.ERROR_CALLBACK_KEY] = this.createCallback(this._fetchFailed);
  options._index = index;
  if (searchSection.getType() == AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT) {
    options = inputSearch.getPeer().__getFetchOptions(inputSearch, searchSection, options, false);
  }
  return options;
};
AdfSequencedSections.prototype._fetchComplete = function(response, options) {
  var clientId = options[AdfRestDataService.CLIENT_ID_KEY];
  var inputSearch = AdfPage.PAGE.findComponent(clientId);
  if (!inputSearch) {
    return;
  }
  var index = options._index;
  var sectionalData = this._sectionalData[index];
  var parsedResponse = AdfSequencedSections._parse(response, inputSearch);
  sectionalData.data = AdfSequencedSections._wrapSuggestions(parsedResponse.items, inputSearch.getValueAttribute());
  if (sectionalData.searchSection.getType() == AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT) {
    sectionalData.options = options;
    sectionalData.isComprehensive = !parsedResponse.hasMore;
    var shouldPrefilter = AdfSequencedSections._beforePrefilter(inputSearch, new AdfSuggestionMap(sectionalData.data), !parsedResponse.hasMore, options);
    if (shouldPrefilter) {
      sectionalData.data = AdfSequencedSections.prefilter(inputSearch, sectionalData.data);
    }
    this._popuplateNonUrlSections(inputSearch, sectionalData.data);
  } else {
    sectionalData.data = AdfSequencedSections.prefilter(inputSearch, sectionalData.data);
  }
  this._notify(index, inputSearch);
};
AdfSequencedSections.prototype._fetchFailed = function(statusCode, response, options) {
  var clientId = options[AdfRestDataService.CLIENT_ID_KEY];
  AdfLogger.LOGGER.severe("The REST call made by inputSearch component '", clientId, "' failed");
  var inputSearch = AdfPage.PAGE.findComponent(clientId);
  if (!inputSearch) {
    return;
  }
  var index = options._index;
  var sectionalData = this._sectionalData[index];
  if (sectionalData.searchSection.getType() == AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT) {
    inputSearch.getPeer().__fetchFailed(inputSearch, statusCode, response, options);
    return;
  }
  this._fetchComplete([], options);
};
AdfSequencedSections.prototype._notify = function(fetchedIndex, inputSearch) {
  if (!this._shouldNotify(fetchedIndex)) {
    return;
  }
  for (var i = this._getIndexToStartNotify(fetchedIndex), len = this._sectionalData.length;i < len;i++) {
    var sectionalData = this._sectionalData[i];
    AdfAssert.assert(!sectionalData.notified);
    if (!sectionalData.data) {
      break;
    }
    var searchSection = sectionalData.searchSection;
    sectionalData.notified = true;
    searchSection.getParent().getPeer().__sequencedCallback(inputSearch, searchSection, new AdfSuggestionMap(sectionalData.data), sectionalData.isComprehensive, sectionalData.options, sectionalData.index);
  }
};
AdfSequencedSections.prototype._getIndexToStartNotify = function(fetchedIndex) {
  var indexToStartNotify = 0;
  for (;indexToStartNotify <= fetchedIndex;indexToStartNotify++) {
    if (!this._sectionalData[indexToStartNotify].notified) {
      break;
    }
  }
  return indexToStartNotify;
};
AdfSequencedSections.prototype._shouldNotify = function(fetchedIndex) {
  return fetchedIndex === 0 || this._sectionalData[fetchedIndex - 1].notified;
};
AdfSequencedSections.prototype._popuplateNonUrlSections = function(inputSearch, masterSuggestions) {
  for (var i = 0, len = this._sectionalData.length;i < len;i++) {
    var searchSection = this._sectionalData[i].searchSection;
    if (searchSection.getFilter()) {
      this._sectionalData[i].data = AdfSequencedSections.prefilter(searchSection, masterSuggestions);
      this._notify(i, inputSearch);
    }
  }
};
AdfSequencedSections._beforePrefilter = function(component, suggestions, isListComprehensive, options) {
  var isSimpleFetch = AdfDhtmlInputSearchPeer.__isSimpleFetchRequest(options);
  var isMasterList = isSimpleFetch && isListComprehensive;
  AdfPreferredSuggestionsManager.update(component, isMasterList, suggestions);
  return isSimpleFetch;
};
AdfSequencedSections._shouldProcessPrefetchRequests = function(inputSearch) {
  if (inputSearch.getSelectionMode() == AdfDhtmlInputSearchPeer.__SELECTION_MODE_MULTIPLE) {
    var defaultSearchSection = AdfInputSearchUtils.getDefaultSearchSection(inputSearch);
    return !!defaultSearchSection.getFilterParameters();
  }
  return false;
};
AdfSequencedSections._wrapSuggestion = function(suggestionItem, index) {
  var keyAttribute = this;
  var rowObj = {};
  rowObj.data = suggestionItem;
  rowObj.index = index;
  rowObj.key = suggestionItem[keyAttribute];
  return rowObj;
};
AdfSequencedSections._wrapSuggestions = function(collection, keyAttribute) {
  return collection.map(AdfSequencedSections._wrapSuggestion, keyAttribute);
};
AdfSequencedSections._parse = function(xhrResponse, component) {
  var xhrResponseObject = null;
  if (typeof xhrResponse == "string") {
    try {
      xhrResponseObject = JSON.parse(xhrResponse);
    } catch (e) {
      AdfLogger.LOGGER.severe("Failed to parse the response as JSON object.", e);
      return;
    }
  } else {
    xhrResponseObject = xhrResponse;
  }
  if (!xhrResponseObject) {
    AdfLogger.LOGGER.severe("Failed to parse the response as JSON object.");
    return;
  }
  var returnObject = {};
  var isServerFilterMode = AdfSequencedSections.isServerFilterMode(component);
  if (isServerFilterMode) {
    returnObject.hasMore = true;
  } else {
    returnObject.hasMore = !!xhrResponseObject.hasMore;
  }
  if (xhrResponseObject instanceof Array) {
    returnObject.items = xhrResponseObject;
    return returnObject;
  }
  var defaultArrayPropertyKey = "items";
  if (xhrResponseObject[defaultArrayPropertyKey]) {
    returnObject.items = xhrResponseObject[defaultArrayPropertyKey];
    return returnObject;
  }
  for (var prop in xhrResponseObject) {
    if (xhrResponseObject.hasOwnProperty(prop)) {
      if (xhrResponseObject[prop] instanceof Array) {
        returnObject.items = xhrResponseObject[prop];
        return returnObject;
      }
    }
  }
  AdfLogger.LOGGER.severe("Couldn't locate the collection property");
};
AdfSequencedSections.isServerFilterMode = function(component) {
  var searchSection = AdfInputSearchUtils.getDefaultSearchSection(component);
  var filterMode = searchSection.getFilterMode();
  return filterMode == AdfDhtmlInputSearchPeer.__SEARCH_SECTION_FILTERMODE_SERVER;
};

function AdfChainSuggestionsMap() {
  this.Init();
}
AdfObject.createSubclass(AdfChainSuggestionsMap, AdfSuggestionMap);
AdfChainSuggestionsMap.InitClass = function() {
};
AdfChainSuggestionsMap.prototype.Init = function() {
  AdfChainSuggestionsMap.superclass.Init.call(this);
  this._chain = [];
  this._source = [];
  this.length = 0;
  this.inclusiveHeaderLength = 0;
};
AdfChainSuggestionsMap.prototype.addSuggestionMap = function(suggestionMap, section) {
  AdfAssert.assertPrototype(suggestionMap, AdfSuggestionMap);
  this._chain.push(suggestionMap);
  this._source.push(section);
  this.length += suggestionMap.length;
  this.inclusiveHeaderLength += section ? suggestionMap.length + 1 : suggestionMap.length;
};
AdfChainSuggestionsMap.prototype.getSuggestionMap = function(index) {
  return this._chain[index];
};
AdfChainSuggestionsMap.prototype.updateSuggestionMap = function(index, suggestionMap) {
  this.length -= this._chain[index].length;
  this.inclusiveHeaderLength -= this._chain[index].length;
  this._chain[index] = suggestionMap;
  this.length += suggestionMap.length;
  this.inclusiveHeaderLength += suggestionMap.length;
};
AdfChainSuggestionsMap.prototype.at = function(chainedIndex) {
  var accumulatedIndex = 0;
  for (var i = 0, chainLen = this._chain.length;i < chainLen;i++) {
    var suggestionMap = this._chain[i];
    var index = chainedIndex - accumulatedIndex;
    if (suggestionMap.length - 1 >= index) {
      return suggestionMap.at(index);
    }
    accumulatedIndex += suggestionMap.length;
  }
};
AdfChainSuggestionsMap.prototype.get = function(key) {
  for (var i = 0, chainLen = this._chain.length;i < chainLen;i++) {
    var item = this._chain[i].get(key);
    if (item) {
      return item;
    }
  }
};
AdfChainSuggestionsMap.prototype.forEach = function(callback, thisArg) {
  var chainedIndex = 0;
  for (var i = 0, chainLen = this._chain.length;i < chainLen;i++) {
    var array = this._chain[i].getArray();
    for (var j = 0, arrayLen = array.length;j < arrayLen;j++) {
      var item = array[j];
      callback.call(thisArg, item.data, item.key, chainedIndex, item);
      chainedIndex++;
    }
  }
};
AdfChainSuggestionsMap.prototype.filter = function(callback, thisArg) {
  var newArray = [];
  var chainedIndex = 0;
  for (var i = 0, chainLen = this._chain.length;i < chainLen;i++) {
    var array = this._chain[i].getArray();
    for (var j = 0, arrayLen = array.length;j < arrayLen;j++) {
      var item = array[j];
      if (callback.call(thisArg, item.data, item.key, chainedIndex, item)) {
        newArray.push(item);
      }
      chainedIndex++;
    }
  }
  return newArray;
};
AdfChainSuggestionsMap.prototype.getArray = function() {
  var newArray = [];
  for (var i = 0, chainLen = this._chain.length;i < chainLen;i++) {
    var array = this._chain[i].getArray();
    for (var j = 0, arrayLen = array.length;j < arrayLen;j++) {
      newArray.push(array[j]);
    }
  }
  return newArray;
};
AdfChainSuggestionsMap.prototype.inclusiveHeaderForEach = function(inclusiveHeaderStartIndex, inclusiveHeaderEndIndex, callback, thisArg) {
  var chainNoAndIndex = this._getChainNoAndIndex(inclusiveHeaderStartIndex);
  if (!chainNoAndIndex) {
    return;
  }
  var startChainNo = chainNoAndIndex.chainNo;
  var startIndex = chainNoAndIndex.index;
  var chainedIndex = chainNoAndIndex.chainedIndex;
  if (startIndex < 0) {
    if (this._shouldCountSectionHeader(startChainNo)) {
      callback.call(thisArg, this._source[startChainNo], inclusiveHeaderStartIndex);
      startIndex++;
      inclusiveHeaderStartIndex++;
      chainedIndex++;
    }
  }
  for (var i = startIndex, len = this._chain[startChainNo].length;i < len && inclusiveHeaderStartIndex < inclusiveHeaderEndIndex;i++, inclusiveHeaderStartIndex++, chainedIndex++) {
    callback.call(thisArg, this._chain[startChainNo].at(i), inclusiveHeaderStartIndex, chainedIndex);
  }
  for (var i = startChainNo + 1, chainLen = this._chain.length;i < chainLen && inclusiveHeaderStartIndex < inclusiveHeaderEndIndex;i++) {
    if (this._shouldCountSectionHeader(i)) {
      callback.call(thisArg, this._source[i]);
    }
    var suggestionMap = this._chain[i];
    for (var j = 0, len = suggestionMap.length;j < len && inclusiveHeaderStartIndex < inclusiveHeaderEndIndex;j++, inclusiveHeaderStartIndex++, chainedIndex++) {
      callback.call(thisArg, suggestionMap.at(j), inclusiveHeaderStartIndex, chainedIndex);
    }
  }
};
AdfChainSuggestionsMap.prototype.getInclusiveHeaderIndex = function(chainedIndex) {
  var inclusiveIndex = 0;
  var accumulatedIndex = 0;
  for (var i = 0, chainLen = this._chain.length;i < chainLen;i++) {
    inclusiveIndex += this._shouldCountSectionHeader(i) ? 1 : 0;
    var suggestionMap = this._chain[i];
    var index = chainedIndex - accumulatedIndex;
    if (suggestionMap.length - 1 >= index) {
      return inclusiveIndex + index;
    }
    accumulatedIndex += suggestionMap.length;
    inclusiveIndex += suggestionMap.length;
  }
};
AdfChainSuggestionsMap.prototype.getChainedIndex = function(inclusiveIndex) {
  var chainNoAndIndex = this._getChainNoAndIndex(inclusiveIndex);
  return chainNoAndIndex.chainedIndex;
};
AdfChainSuggestionsMap.prototype._getChainNoAndIndex = function(inclusiveIndex) {
  var chainedIndex = 0;
  var accumulatedIndex = 0;
  for (var i = 0, chainLen = this._chain.length;i < chainLen;i++) {
    accumulatedIndex += this._shouldCountSectionHeader(i) ? 1 : 0;
    var suggestionMap = this._chain[i];
    var index = inclusiveIndex - accumulatedIndex;
    if (suggestionMap.length - 1 >= index) {
      return {"index":index, "chainNo":i, "chainedIndex":chainedIndex += index};
    }
    accumulatedIndex += suggestionMap.length;
    chainedIndex += suggestionMap.length;
  }
};
AdfChainSuggestionsMap.prototype._shouldCountSectionHeader = function(index) {
  var source = this._source[index];
  return source && AdfDhtmlSuggestionsSectionPeer.hasHeader(source) && this._chain[index].length > 0;
};

AdfUIComponents.createComponentClass("AdfRichInputSearch", {"componentType":"oracle.adf.RichInputSearch", "propertyKeys":[{"name":"inlineStyle", "type":"String"}, {"name":"styleClass", "type":"String"}, {"name":"shortDesc", "type":"String"}, {"name":"unsecure", "type":"Object", "secured":true}, {"name":"visible", "type":"Boolean", "default":true}, {"name":"changed", "type":"Boolean", "default":false}, {"name":"changedDesc", "type":"String"}, {"name":"autoSubmit", "type":"Boolean", "default":false}, 
{"name":"accessKey", "type":"String"}, {"name":"contentStyle", "type":"String"}, {"name":"helpTopicId", "type":"String"}, {"name":"disabled", "type":"Boolean", "default":false, "secured":true}, {"name":"label", "type":"String"}, {"name":"readOnly", "type":"Boolean", "default":false, "secured":true}, {"name":"showRequired", "type":"Boolean", "default":false}, {"name":"simple", "type":"Boolean", "default":false}, {"name":"editable", "type":"String", "default":"inherit"}, {"name":"placeholder", "type":"String"}, 
{"name":"usage", "type":"String", "default":"auto"}, {"name":"columns", "type":"Number"}, {"name":"contentMode", "type":"Enum", "default":"LIST"}, {"name":"criteria", "type":"Enum", "default":"AUTO"}, {"name":"valueAttribute", "type":"String"}, {"name":"displayAttributes", "type":"Array"}, {"name":"filterAttributes", "type":"Array"}, {"name":"filter", "type":"String"}, {"name":"rowCount", "type":"Number", "default":-1}, "selectionConverter", {"name":"selectionMode", "type":"Enum", "default":"SINGLE"}], 
"superclass":AdfUIInput});

AdfRichInputSearch.InitSubclass = function() {
  this._SELECTION_PROPERTY = "_selection";
};
AdfRichInputSearch.CRITERIA_STARTS_WITH = "STARTS_WITH";
AdfRichInputSearch.CRITERIA_CONTAINS = "CONTAINS";
AdfRichInputSearch.CRITERIA_ATTRIBUTE_STARTS_WITH = "ATTRIBUTE_STARTS_WITH";
AdfRichInputSearch.CRITERIA_VALUE_EQUALS = "V";
AdfRichInputSearch.prototype.broadcast = function(event) {
  AdfRichInputSearch.superclass.broadcast.call(this, event);
  if (event instanceof AdfAutoCompletingEvent) {
    this.getPeer().delayedHandleAutoCompletingEvent(event);
  }
};
AdfRichInputSearch.prototype.getDisplayedValue = function() {
  return this.getPeer().getDisplayedValue(this);
};
AdfRichInputSearch.prototype.getSearchSections = function() {
  return this.getPeer().getSearchSections(this);
};
AdfRichInputSearch.prototype.getSelection = function() {
  return this.getProperty(AdfRichInputSearch._SELECTION_PROPERTY);
};
AdfRichInputSearch.prototype.getSuggestions = function() {
  return this.getPeer().getSuggestions();
};
AdfRichInputSearch.prototype.ComparePropertyValues = function(propName, oldValues, newValues) {
  if (propName == AdfUIValue.VALUE) {
    return this.getPeer().compareValues(oldValues, newValues);
  }
  if (propName == AdfRichInputSearch._SELECTION_PROPERTY) {
    return AdfRichInputSearch._compareSelections(oldValues, newValues);
  }
  return AdfRichInputSearch.superclass.ComparePropertyValues.call(this, propName, oldValues, newValues);
};
AdfRichInputSearch.prototype.GetChanges = function() {
  var changes = AdfRichInputSearch.superclass.GetChanges.call(this);
  if (changes[AdfRichInputSearch._SELECTION_PROPERTY]) {
    var agent = AdfAgent.AGENT;
    var doc = agent.createXmlDocument();
    var parentNode = doc.createElement("TEMP");
    doc.appendChild(parentNode);
    var node = AdfMarshalingService.getDefault().marshal(parentNode, changes[AdfRichInputSearch._SELECTION_PROPERTY], null);
    changes[AdfRichInputSearch._SELECTION_PROPERTY] = agent.getNodeXml(node);
  }
  return changes;
};
AdfRichInputSearch.prototype.setTextAndShowSuggestions = function(newText) {
  AdfAssert.assertString(newText);
  var readOnly = this.getReadOnly();
  var disabled = this.getDisabled();
  if (readOnly || disabled) {
    AdfLogger.LOGGER.warning("AdfRichInputSearch.prototype.setTextAndShowSuggestions called when readOnly or disabled true. New value ignored.");
  } else {
    this.getPeer().setTextAndShowSuggestions(this, newText);
  }
};
AdfRichInputSearch._compareSelections = function(oldSelections, newSelections) {
  oldSelections = oldSelections ? oldSelections : [];
  newSelections = newSelections ? newSelections : [];
  AdfAssert.assertArray(oldSelections);
  AdfAssert.assertArray(newSelections);
  if (newSelections == oldSelections) {
    return true;
  }
  if (newSelections.length != oldSelections.length) {
    return false;
  }
  outer: for (var i = 0, len = newSelections.length;i < len;i++) {
    var newKeyValue = newSelections[i].key;
    for (var j = 0;j < len;j++) {
      var jKeyValue = oldSelections[j].key;
      if (newKeyValue == jKeyValue) {
        if (oldSelections[j].data == newSelections[i].data || AdfUIUtils.compareObjects(oldSelections[j].data, newSelections[i].data)) {
          continue outer;
        }
        return false;
      }
    }
    return false;
  }
  return true;
};

AdfUIComponents.createComponentClass("AdfRichMultiSelectInputSearch", {componentType:"oracle.adfinternal.RichMultiSelectInputSearch", propertyKeys:[{name:"selectionMode", type:"Enum", "default":"MULTIPLE"}], "superclass":AdfRichInputSearch});

AdfUIComponents.createComponentClass("AdfRichSearchSection", {"componentType":"oracle.adf.RichSearchSection", "propertyKeys":[{"name":"dataUrl", "type":"String"}, {"name":"filter", "type":"String"}, {"name":"filterParameters", "type":"String"}, {"name":"type", "type":"String", "default":"default"}, {"name":"filterMode", "type":"String", "default":"auto"}], "superclass":AdfUIObject});

AdfRichSearchSection.prototype.GetChanges = function() {
  var changes = AdfRichSearchSection.superclass.GetChanges.call(this);
  var dataUrl = changes[AdfRichSearchSection.DATA_URL];
  if (dataUrl && AdfRestDataService.isRelativeUrl(dataUrl)) {
    changes[AdfRichSearchSection.DATA_URL] = "/" + dataUrl;
  }
  return changes;
};

AdfUIComponents.createComponentClass("AdfRichSuggestionsSection", {"componentType":"oracle.adf.RichSuggestionsSection", "propertyKeys":[{"name":"cacheKeyGenerator", "type":"String"}, {"name":"displayCount", "type":"Number", "default":5}, "dontCache"], "superclass":AdfUIObject});

AdfRichUIPeer.createPeerClass(AdfDhtmlInputBasePeer, "AdfDhtmlInputSearchPeer", false);
AdfDhtmlInputSearchPeer.InitSubclass = function() {
  AdfObject.ensureClassInitialization(AdfRichPopup);
  AdfObject.ensureClassInitialization(AdfRestDataService);
  AdfObject.ensureClassInitialization(AdfInputSearchScrollManager);
  AdfObject.ensureClassInitialization(AdfInputSearchScoreUtils);
  AdfObject.ensureClassInitialization(AdfInputSearchMruCache);
  AdfObject.ensureClassInitialization(AdfPreferredSuggestionsManager);
  AdfObject.ensureClassInitialization(AdfSuggestionsContainer);
  AdfObject.ensureClassInitialization(AdfSuggestionsPanel);
  AdfObject.ensureClassInitialization(AdfToolbarPanel);
  AdfObject.ensureClassInitialization(AdfDhtmlSuggestionsSectionPeer);
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.CLICK_EVENT_TYPE, AdfUIInputEvent.KEY_DOWN_EVENT_TYPE, AdfUIInputEvent.KEY_UP_EVENT_TYPE, AdfUIInputEvent.FOCUS_EVENT_TYPE, AdfUIInputEvent.PASTE_EVENT_TYPE);
  this.SELECTION_PROPERTY = "_selection";
  this._VALUE_ATTRIBUTE_DATA_TYPE = "_valJsType";
  AdfRichUIPeer.addComponentPropertyGetters(this, AdfRichInputSearch.LABEL);
  AdfRichUIPeer.addComponentPropertyChanges(this, AdfRichInputSearch.LABEL, this._VALUE_ATTRIBUTE_DATA_TYPE);
  this._CUSTOM_NAME_EXPANDO = "data-afr-name";
  this._BUTTON_SUB_ID = "btn";
  this._SUGGESTIONS_POPUP_SUB_ID = "suggestions-popup";
  this._CONTENT_MODE_LIST = "LIST";
  this.__CONTENT_MODE_TABLE = "TABLE";
  this._SELECTION_MODE_SINGLE = "SINGLE";
  this.__SELECTION_MODE_MULTIPLE = "MULTIPLE";
  this.__SEARCH_SECTION_TYPE_DEFAULT = "default";
  this._VALUE_UPDATING_STYLE_CLASS = "p_AFValueUpdating";
  this.__SUGGESTIONS_RENDERING_CHUNK_SIZE = 300;
  this._SPECIAL_CHARS_REGEX_STR = "~`!@#$%^\x26*()_+{}|:;\"'\x3c,\x3e.?/[\\]\\-\\\\";
  this.__SEARCH_SECTION_FILTERMODE_SERVER = "server";
};
AdfDhtmlInputSearchPeer.prototype.InitDomElement = function(component, element) {
  this.BindToComponent(component, element);
  AdfDhtmlInputSearchPeer.superclass.InitDomElement.call(this, component, element);
  this._suggestionsContainer = new AdfSuggestionsContainer(this);
  this._toolbarPanel = new AdfToolbarPanel(this);
  if (!AdfInputSearchUtils.isReadOnlyOrDisabled(component)) {
    var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, element);
    AdfDhtmlInputBasePeer.setLastValue(contentNode);
    AdfDhtmlInputSearchPeer._setIdOnLabelElement(component, contentNode);
  }
};
AdfDhtmlInputSearchPeer.prototype.compareValues = function(oldValues, newValues) {
  if (!newValues) {
    newValues = [];
  }
  AdfAssert.assertArray(oldValues);
  AdfAssert.assertArray(newValues);
  if (newValues == oldValues) {
    return true;
  }
  if (newValues.length != oldValues.length) {
    return false;
  }
  for (var i = 0, len = newValues.length;i < len;i++) {
    if (oldValues.indexOf(newValues[i]) == -1) {
      return false;
    }
  }
  return true;
};
AdfDhtmlInputSearchPeer.prototype.getDisplayedValue = function(component) {
  return this.GetDisplayValue(component, this.getDomElement());
};
AdfDhtmlInputSearchPeer.prototype.getSearchSections = function(component) {
  var searchSections = AdfInputSearchUtils.getChildrenSection(component, AdfRichSearchSection);
  var searchSectionMap = {};
  for (var i = 0, length = searchSections.length;i < length;i++) {
    var searchSection = searchSections[i];
    searchSectionMap[searchSection.getType()] = searchSection;
  }
  return searchSectionMap;
};
AdfDhtmlInputSearchPeer.prototype.getSuggestions = function() {
  var displayedSuggestions = this.GetSuggestionsPanel().getDisplayedSuggestions();
  return displayedSuggestions && displayedSuggestions.getArray();
};
AdfDhtmlInputSearchPeer.prototype.getConvertedObject = function(component, newValues) {
  AdfAssert.assertArray(newValues);
  var converter = component.getConverter();
  var hasConverter = !(converter == null || converter instanceof AdfMissingConverter);
  var isClientOnly = hasConverter && converter.isClientOnly && converter.isClientOnly();
  if (hasConverter && !isClientOnly) {
    newValues = AdfDhtmlInputSearchPeer._deriveDisplayValueFromConv(component, converter, newValues);
  } else {
    var suggestions = this.GetSuggestionMapContainingSelections();
    if (!suggestions) {
      suggestions = new Map;
    }
    newValues = AdfDhtmlInputSearchPeer._defaultDisplayValueDerivation(component, suggestions, newValues);
    if (isClientOnly) {
      newValues = this._doDisplayValueFormatting(component, this.getDomElement(), converter, newValues);
    }
  }
  return newValues;
};
AdfDhtmlInputSearchPeer.prototype.getConvertedValue = function(component, submittedValues) {
  AdfAssert.assertArray(submittedValues);
  var valueDataType = AdfDhtmlInputSearchPeer.getValueAttributeType(component);
  if (valueDataType == "Number") {
    for (var i = 0, len = submittedValues.length;i < len;i++) {
      submittedValues[i] = Number(submittedValues[i]);
    }
  }
  return submittedValues;
};
AdfDhtmlInputSearchPeer.prototype.ComponentValueChanged = function(component, domElement, newValues, oldValues) {
  if (!newValues) {
    newValues = [];
  } else {
    if (!Array.prototype.isPrototypeOf(newValues)) {
      newValues = [newValues];
    }
  }
  AdfAssert.assertArray(oldValues);
  var suggestionMap = this.GetSuggestionMapContainingSelections(newValues);
  AdfDhtmlInputSearchPeer._deriveAndSetSelection(component, newValues, suggestionMap);
  var realNewValues = this.GetRealNewValues(newValues, oldValues);
  AdfPreferredSuggestionsManager.add(component, realNewValues, suggestionMap);
  AdfDhtmlInputSearchPeer.superclass.ComponentValueChanged.call(this, component, domElement, newValues, oldValues);
  this._setHiddenValueElementsValue(component, domElement, newValues, oldValues);
};
AdfDhtmlInputSearchPeer.prototype.LazyInitialize = function(component, domElement) {
};
AdfDhtmlInputSearchPeer.prototype.GetComponentValue = function(component, domElement) {
  var hiddenValueElems = AdfDhtmlInputSearchPeer._getHiddenValueElements(component, domElement);
  var selections = [];
  if (hiddenValueElems) {
    for (var i = 0;i < hiddenValueElems.length;i++) {
      var value = hiddenValueElems[i].value;
      if (value && value.length > 0) {
        selections.push(value);
      }
    }
  }
  return this.getConvertedValue(component, selections);
};
AdfDhtmlInputSearchPeer.prototype.GetFormattedDisplayValue = function(component, domElement, clientConverter) {
  var rawDisplayValues = this.GetDisplayValue(component, domElement, true);
  return this._doDisplayValueFormatting(component, domElement, clientConverter, rawDisplayValues);
};
AdfDhtmlInputSearchPeer.prototype.GetInlineEditor = function(event) {
  return AdfDhtmlSimpleLabelEditor.getInlineEditor();
};
AdfDhtmlInputSearchPeer.prototype.GetNullDefault = function() {
  return AdfCollections.EMPTY_ARRAY;
};
AdfDhtmlInputSearchPeer.prototype.GetSubmittedValue = function(component, domElement) {
  return this.GetComponentValue(component, domElement);
};
AdfDhtmlInputSearchPeer.prototype.GetCombinedDisplayValue = function(newValues) {
  AdfAssert.failedInAbstractFunction();
};
AdfDhtmlInputSearchPeer.prototype.SetDisplayValue = function(component, domElement, newValues, restoringDirtyDisplayValue) {
  AdfAssert.assertArray(newValues);
  var newValue = this.GetCombinedDisplayValue(newValues);
  AdfAssert.assertString(newValue);
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, domElement);
  if ((newValue == null || newValue == "") && restoringDirtyDisplayValue) {
    var currentValue = contentNode.value;
    contentNode.selectionStart = currentValue ? currentValue.length : 0;
    return;
  }
  this._lastValue = newValue;
  AdfDhtmlInputBasePeer.setLastValue(contentNode, newValue);
  if (contentNode.tagName == "INPUT") {
    contentNode.value = newValue;
  } else {
    AdfAgent.AGENT.setTextContent(contentNode, newValue);
  }
};
AdfDhtmlInputSearchPeer.prototype.VetoBlurValidation = function() {
  return true;
};
AdfDhtmlInputSearchPeer.prototype.setTextAndShowSuggestions = function(component, newText) {
  var domElement = this.getDomElement();
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, domElement);
  contentNode.value = newText;
  this._filterSuggestions(component);
};
AdfDhtmlInputSearchPeer.GetValue = function(component) {
  return component.getProperty(AdfUIValue.VALUE);
};
AdfDhtmlInputSearchPeer.prototype.DeriveAndSetDisplayValue = function(component, domElement, values) {
  if (!values) {
    values = AdfDhtmlInputSearchPeer.GetValue(component);
  }
  var newDisplayValues = this.getConvertedObject(component, values);
  this.SetDisplayValue(component, domElement, newDisplayValues);
};
AdfDhtmlInputSearchPeer.prototype._doDisplayValueFormatting = function(component, domElement, clientConverter, rawDisplayValues) {
  var label = this.GetComponentLabel(component, domElement);
  try {
    var formattedValues = [];
    for (var i = 0, len = rawDisplayValues.length;i < len;i++) {
      formattedValues.push(clientConverter.getAsString(rawDisplayValues[i], label));
    }
    return formattedValues;
  } catch (e) {
    AdfLogger.LOGGER.logErrorAsSevere(e, "Invoking TrClientConverter.getAsString on component (id\x3d'" + component.getClientId() + "') resulted in an unexpected exception. The component's display value will not be formatted.");
  }
  return rawDisplayValues;
};
AdfDhtmlInputSearchPeer._defaultDisplayValueDerivation = function(component, suggestions, newValues) {
  if (!suggestions || suggestions.size == 0) {
    return newValues;
  }
  var values = [];
  for (var i = 0, length = newValues.length;i < length;i++) {
    var newValue = newValues[i];
    if (newValue != null) {
      var selectedItem = suggestions.get(newValue);
      if (selectedItem) {
        newValue = AdfDhtmlInputSearchPeer._getDisplayValueFromSelection(component, selectedItem);
      } else {
        newValue = String(newValue);
      }
      values.push(newValue);
    }
  }
  return values;
};
AdfDhtmlInputSearchPeer._deriveDisplayValueFromConv = function(component, converter, newValues) {
  var values = [];
  var label = component.getProperty("label");
  for (var i = 0, length = newValues.length;i < length;i++) {
    var newValue = newValues[i];
    if (newValue) {
      newValue = converter.getAsString(newValue, label);
      if (newValue) {
        values.push(newValue);
      }
    }
  }
  return values;
};
AdfDhtmlInputSearchPeer._getDisplayValueFromSelection = function(component, selectedItem) {
  if (selectedItem) {
    var displayValues = "";
    selectedItem = selectedItem.data;
    var displayAttributes = component.getDisplayAttributes();
    for (var i = 0, len = displayAttributes.length;i < len;i++) {
      var displayValue = selectedItem[displayAttributes[i]];
      if (displayValue != null) {
        displayValues += displayValue + " ";
      }
    }
    return displayValues.trim();
  }
  return null;
};
AdfDhtmlInputSearchPeer._deriveAndSetSelection = function(component, newValues, suggestionMap) {
  if (!suggestionMap) {
    return;
  }
  var newSuggestionsObjs = [];
  for (var i = 0;i < newValues.length;i++) {
    var suggestionObj = suggestionMap.get(newValues[i]);
    if (suggestionObj) {
      newSuggestionsObjs.push(suggestionObj);
    }
  }
  AdfDhtmlInputSearchPeer.SetSelectionProp(component, newSuggestionsObjs);
};
AdfDhtmlInputSearchPeer.prototype.prefetchOrUpdate = function(component, searchSection) {
  this._isPrefetchListComprehensive = null;
  if (this.IsSuggestionPopupVisible(component)) {
    this._lastFilteredText = "";
    this.CacheServerSuggestionsList(null);
    var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement());
    this.ShowSuggestionsPopup(component, AdfDhtmlInputBasePeer.getLastValue(contentNode) != contentNode.value) ? "filtering" : "initial";
  } else {
    this._prefetch(component, searchSection);
  }
};
AdfDhtmlInputSearchPeer.getValueAttributeType = function(component) {
  return component.getProperty(AdfDhtmlInputSearchPeer._VALUE_ATTRIBUTE_DATA_TYPE);
};
AdfDhtmlInputSearchPeer.propagateValueAttributeDataType = function(component, suggestions) {
  var sampleValue = suggestions && suggestions.at(0) && suggestions.at(0).key;
  if (sampleValue != null) {
    var typeFunc = sampleValue.constructor;
    var type = null;
    if (typeFunc == Number) {
      type = "Number";
    }
    if (type) {
      component.setProperty(AdfDhtmlInputSearchPeer._VALUE_ATTRIBUTE_DATA_TYPE, type, false, AdfUIComponent.PROPAGATE_ALWAYS);
    } else {
      component.setProperty(AdfDhtmlInputSearchPeer._VALUE_ATTRIBUTE_DATA_TYPE, "String", false, AdfUIComponent.PROPAGATE_NEVER);
    }
  }
};
AdfDhtmlInputSearchPeer.prototype.Component_valJsTypeChanged = function(component, domElement, newValue, oldValue) {
  var values = this.GetComponentValue(component, domElement);
  component.initializeProperty(AdfUIValue.VALUE, values);
};
AdfDhtmlInputSearchPeer.prototype.HandleComponentClick = function(componentEvent) {
  AdfDhtmlInputSearchPeer.superclass.HandleComponentClick.call(this, componentEvent);
  this._state = "initial";
  var component = this.getComponent();
  if (!componentEvent.isLeftButtonPressed() || AdfInputSearchUtils.isReadOnlyOrDisabled(component)) {
    return;
  }
  var clientId = component.getClientId();
  var eventTarget = componentEvent.getNativeEventTarget();
  var contentContainer = AdfInputSearchUtils.getContentContainer(component);
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement());
  if (eventTarget == AdfInputSearchUtils.getSelectionsButton(component)) {
    this.ShowSelectionsPopup(component, contentNode);
    return;
  }
  if (eventTarget == contentNode || eventTarget == contentContainer || eventTarget.parentElement == contentContainer) {
    if (this.IsSelectionsShown(component)) {
      this.ShowSuggestionsPopup(component, "initial");
      component.focus();
      return;
    }
    if (this.IsSuggestionPopupVisible(component)) {
      return;
    }
    contentNode.select();
    component.focus();
    this.ShowSuggestionsPopup(component, "initial");
    return;
  }
  if (this.IsSuggestionPopupVisible(component)) {
    this.GetSuggestionsPanel().handleClick(eventTarget);
  }
};
AdfDhtmlInputSearchPeer.prototype.HandleComponentKeyDown = function(componentEvent) {
  var component = this.getComponent();
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement());
  if (!this._keyUpNotExecuted) {
    this._keyUpNotExecuted = true;
    this._lastValue = contentNode.value.trim();
  }
  if (this.IsSuggestionPopupVisible(component)) {
    this._toolbarPanel.handleKeyDown(componentEvent, contentNode);
    this.GetSuggestionsPanel().handleKeyDown(componentEvent, contentNode);
  }
};
AdfDhtmlInputSearchPeer.prototype.HandleComponentKeyUp = function(componentEvent) {
  this._keyUpNotExecuted = null;
  var component = this.getComponent();
  var domElement = this.getDomElement();
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement());
  var keyCode = componentEvent.getKeyCode();
  var isSuggestionPopupVisible = this.IsSuggestionPopupVisible(component);
  if (!isSuggestionPopupVisible) {
    if (keyCode == AdfKeyStroke.ARROWDOWN_KEY) {
      this.ShowSuggestionsPopup(component, "initial");
      return;
    }
    var isRTL = AdfPage.PAGE.getLocaleContext().isRightToLeft();
    var isEndArrowKey = isRTL && keyCode == AdfKeyStroke.ARROWLEFT_KEY || !isRTL && keyCode == AdfKeyStroke.ARROWRIGHT_KEY;
    var isTextCaretAtEndPos = contentNode.selectionEnd == contentNode.value.length;
    if (isEndArrowKey && isTextCaretAtEndPos) {
      this.ShowSelectionsPopup(component, contentNode);
      return;
    }
  } else {
    if (keyCode == AdfKeyStroke.ESC_KEY) {
      this.RestoreSelectionOnEscape(component, domElement, contentNode);
      this.HideSuggestionPopup(component);
    }
  }
  if (keyCode == AdfKeyStroke.TAB_KEY || keyCode == 16) {
    return;
  }
  if (this._hasValueChanged(contentNode.value.trim())) {
    if (!isSuggestionPopupVisible) {
      this.ToggleDisplayValueToFiltering(contentNode, keyCode);
    }
    this._filterSuggestions(component);
  }
};
AdfDhtmlInputSearchPeer.prototype.HandleComponentPaste = function(componentEvent) {
  this._keyUpNotExecuted = null;
  var component = this.getComponent();
  this._filterSuggestions(component);
};
AdfDhtmlInputSearchPeer.prototype.HandleComponentFocus = function(componentEvent, contentNode) {
  var component = this.getComponent();
  if (!contentNode) {
    contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement());
  }
  var targetNode = componentEvent.getNativeEventTarget();
  if (targetNode == contentNode) {
    AdfDhtmlInputBasePeer.setLastValue(contentNode);
  }
  AdfDhtmlInputSearchPeer.superclass.HandleComponentFocus.call(this, componentEvent);
};
AdfDhtmlInputSearchPeer.prototype._handleSuggestionsPopupClosed = function(component) {
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement());
  this.RunValidation(component, contentNode, true);
  var container = contentNode.parentElement;
  container.setAttribute("aria-expanded", "false");
  container.removeAttribute("aria-controls");
  this._toolbarPanel.detach(component);
  this._suggestionsContainer.detach(component, contentNode, this.GetSuggestionsPanel(), this.IsUnderAutocompletion());
  this.ClearTemporaryStorage();
};
AdfDhtmlInputSearchPeer.prototype._handleSuggestionsPopupOpening = function(component) {
  var container = AdfInputSearchUtils.getContentContainer(component);
  container.setAttribute("aria-expanded", "true");
  container.setAttribute("aria-controls", AdfSuggestionsPanel.getSuggestionsBodyId(component));
};
AdfDhtmlInputSearchPeer.SetSelectionProp = function(component, selection) {
  component.setProperty(AdfDhtmlInputSearchPeer.SELECTION_PROPERTY, selection, false, AdfUIComponent.PROPAGATE_ALWAYS);
};
AdfDhtmlInputSearchPeer.prototype.ClearTemporaryStorage = function() {
  if (this._fastKeyInputTimer) {
    AdfPage.PAGE.cancelTimer(this._fastKeyInputTimer);
    this._fastKeyInputTimer = null;
  }
  if (this._serverFilterTimer) {
    AdfPage.PAGE.cancelTimer(this._serverFilterTimer);
    this._serverFilterTimer = null;
  }
  this._keyUpNotExecuted = null;
  this._lastFilteredText = null;
  this.CacheServerSuggestionsList(null);
};
AdfDhtmlInputSearchPeer.prototype.DerivePropsFromPrefSuggestions = function(component, preferredSuggestions) {
  AdfDhtmlInputSearchPeer.propagateValueAttributeDataType(component, preferredSuggestions);
};
AdfDhtmlInputSearchPeer.prototype.GetRealNewValues = function(newValues, oldValues) {
  AdfAssert.failedInAbstractFunction();
};
AdfDhtmlInputSearchPeer.prototype.GetSuggestionMapContainingSelections = function(newValues) {
  AdfAssert.failedInAbstractFunction();
};
AdfDhtmlInputSearchPeer.prototype.GetSuggestionsPanel = function() {
  AdfAssert.failedInAbstractFunction();
};
AdfDhtmlInputSearchPeer.prototype.ShowSelectionsPopup = function(component, contentNode) {
  AdfAssert.failedInAbstractFunction();
};
AdfDhtmlInputSearchPeer.prototype.IsUnderAutocompletion = function() {
  AdfAssert.failedInAbstractFunction();
};
AdfDhtmlInputSearchPeer.prototype.RestoreSelectionOnEscape = function(component, domElement, contentNode) {
  AdfAssert.failedInAbstractFunction();
};
AdfDhtmlInputSearchPeer.prototype.RenderSelections = function(component) {
  AdfAssert.failedInAbstractFunction();
};
AdfDhtmlInputSearchPeer.prototype.ToggleDisplayValueToFiltering = function(contentNode, keyCode) {
  this._lastFilteredText = "";
  this._lastValue = "";
  if (keyCode === AdfKeyStroke.BACKSPACE_KEY || keyCode === AdfKeyStroke.DELETE_KEY) {
    this._lastFilteredText = null;
  }
  AdfDhtmlInputBasePeer.setLastValue(contentNode, "");
};
AdfDhtmlInputSearchPeer.prototype.UpdateDisplayValueAndSelection = function(component, domElement, values, freshSuggestions, isMasterList) {
  var suggestionMap = this.GetSuggestionMapContainingSelections();
  AdfDhtmlInputSearchPeer._deriveAndSetSelection(component, values, suggestionMap);
  this.DeriveAndSetDisplayValue(component, domElement, values);
};
AdfDhtmlInputSearchPeer.__isSimpleFetchRequest = function(options) {
  var serverFilterContext = options._serverFilterContext;
  var request = options[AdfRestDataService.REQUEST_DATA];
  return !serverFilterContext || request.method == "GET" && request.queryString == null;
};
AdfDhtmlInputSearchPeer.prototype._prefetch = function(component, searchSection) {
  var endpoint = searchSection.getDataUrl();
  if (!endpoint) {
    return;
  }
  var isReadonlyOrDisabled = AdfInputSearchUtils.isReadOnlyOrDisabled(component);
  if (searchSection.getType() == AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT) {
    var value = AdfDhtmlInputSearchPeer.GetValue(component);
    var domElement = this.getDomElement();
    var displayValue = AdfDhtmlEditableValuePeer.getContentNodeText(component, domElement);
    if (value.length !== 0 && displayValue.length === 0) {
      AdfDomUtils.addCSSClassName(domElement, AdfDhtmlInputSearchPeer._VALUE_UPDATING_STYLE_CLASS);
    } else {
      if (isReadonlyOrDisabled) {
        return;
      }
    }
  } else {
    if (isReadonlyOrDisabled) {
      return;
    }
  }
  AdfSequencedSections.fetchSection(component, searchSection, true);
};
AdfDhtmlInputSearchPeer.prototype._fetchAll = function(component) {
  var preferredSuggestions = AdfPreferredSuggestionsManager.get(component);
  var searchSections = AdfInputSearchUtils.getChildrenSection(component, AdfRichSearchSection);
  if (preferredSuggestions) {
    var suggestionsSection = AdfInputSearchUtils.getSuggestionsSection(component);
    var renderingContext = {};
    renderingContext.isPreferredList = true;
    renderingContext.isPartialList = searchSections.length > 1;
    renderingContext.source = suggestionsSection;
    this.GetSuggestionsPanel().render(component, preferredSuggestions, renderingContext);
    if (suggestionsSection.getDontCache()) {
      AdfDomUtils.addCSSClassName(this.getDomElement(), AdfDhtmlInputSearchPeer._VALUE_UPDATING_STYLE_CLASS);
    }
  }
  (new AdfSequencedSections(searchSections)).sendRequests();
};
AdfDhtmlInputSearchPeer.prototype._fetch = function(component, options) {
  var type = AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT;
  var searchSection = component.getSearchSections()[type];
  if (!searchSection) {
    AdfLogger.LOGGER.severe("Can't locate the searchSection component of type ", type);
    return;
  }
  AdfSequencedSections.fetchSection(component, searchSection, false, options);
};
AdfDhtmlInputSearchPeer.prototype.__getFetchOptions = function(component, searchSection, options, isFiltering) {
  if (!isFiltering) {
    options._isPreferredSuggestionsDisplayed = !!AdfPreferredSuggestionsManager.get(component);
  }
  options._lastValue = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement()).value;
  var isServerFilterMode = AdfSequencedSections.isServerFilterMode(component);
  if (!this._getPrefetchListComprehensive(component) || isServerFilterMode) {
    var context = {};
    context.filterAttributes = component.getFilterAttributes();
    context.criteria = component.getCriteria();
    if (isServerFilterMode) {
      context.searchTerms = options._isServerFiltering && options._lastValue ? options._lastValue.trim() : null;
    } else {
      context.searchTerms = options._isServerFiltering && options._lastValue ? AdfInputSearchMruCache.__splitAndSort(options._lastValue) : null;
    }
    options._serverFilterContext = context;
    options[AdfRestDataService.REQUEST_DATA] = AdfDhtmlSearchSectionPeer.executeFilterParametersFunc(searchSection, context);
  }
  return options;
};
AdfDhtmlInputSearchPeer.prototype.__sequencedCallback = function(component, searchSection, suggestions, isListComprehensive, options, searchSectionIndex) {
  if (searchSection.getType() == AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT) {
    var hasOtherSearchSections = AdfSuggestionsPanel.removePartialSuggestionsLoadingIndicator(component);
    this.__fetchComplete(component, suggestions, isListComprehensive, options, hasOtherSearchSections);
    return;
  }
  if (!this.IsSuggestionPopupVisible(component) || suggestions.length == 0) {
    return;
  }
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement());
  var lastValue = AdfDhtmlInputBasePeer.getLastValue(contentNode);
  if (lastValue && lastValue !== contentNode.value) {
    return;
  }
  var renderingContext = {};
  renderingContext.isPartialList = true;
  renderingContext.source = searchSection;
  this.GetSuggestionsPanel().render(component, suggestions, renderingContext);
};
AdfDhtmlInputSearchPeer.prototype.__fetchComplete = function(component, prefilteredSuggestions, isListComprehensive, options, hasOtherSearchSections) {
  var isMasterList = false;
  if (AdfDhtmlInputSearchPeer.__isSimpleFetchRequest(options)) {
    this._isPrefetchListComprehensive = isListComprehensive;
    isMasterList = isListComprehensive;
  }
  var domElement = this.getDomElement();
  if (options._isPreferredSuggestionsDisplayed) {
    AdfDomUtils.removeCSSClassName(domElement, AdfDhtmlInputSearchPeer._VALUE_UPDATING_STYLE_CLASS);
  }
  if (!this.IsSuggestionPopupVisible(component)) {
    if (options._isPreferredSuggestionsDisplayed) {
      this._updateIncompleteDisplayValue(component, domElement, prefilteredSuggestions, isMasterList);
    } else {
      AdfLogger.LOGGER.info("Popup dismissed while fetching the suggestions for InputSearch with client id ", component.getClientId());
    }
    return;
  }
  var serverFilterContext = options._serverFilterContext;
  var cacheTerm = serverFilterContext && serverFilterContext.searchTerms ? serverFilterContext.searchTerms : "";
  this.CacheServerSuggestionsList(prefilteredSuggestions, cacheTerm, isListComprehensive);
  var isServerFilterMode = AdfSequencedSections.isServerFilterMode(component);
  if (options._lastValue !== AdfDhtmlEditableValuePeer.getContentNode(component, domElement).value || options._isClientFiltering) {
    if (isServerFilterMode) {
      this._state = "filtering";
      this.__fetchCompleteServerMode(component, prefilteredSuggestions, options);
    } else {
      this._filterSuggestionsImpl(component, options._isServerFiltering || !isListComprehensive);
    }
  } else {
    if (options._isPreferredSuggestionsDisplayed) {
      this.GetSuggestionsPanel().update(component, prefilteredSuggestions, isMasterList);
    } else {
      if (!hasOtherSearchSections) {
        var renderingContext = {};
        if (options._isServerFiltering) {
          if (this._isFilteredResultsDisplayed(component, options._lastValue)) {
            return;
          }
          this._lastFilteredText = options._lastValue;
          renderingContext.shouldHighlight = !isServerFilterMode;
        }
        this.GetSuggestionsPanel().render(component, prefilteredSuggestions, renderingContext);
      }
    }
  }
};
AdfDhtmlInputSearchPeer.prototype.__fetchFailed = function(component, statusCode, response, options) {
  AdfDomUtils.removeCSSClassName(this.getDomElement(), AdfDhtmlInputSearchPeer._VALUE_UPDATING_STYLE_CLASS);
  if (!this.GetSuggestionsPanel().getDisplayedSuggestions()) {
    this.GetSuggestionsPanel().render(component, new AdfSuggestionMap([]));
  }
};
AdfDhtmlInputSearchPeer.prototype.__fetchCompleteServerMode = function(component, prefilteredSuggestions, options) {
  if (!this.IsSuggestionPopupVisible(component)) {
    AdfLogger.LOGGER.info("Popup dismissed while fetching the suggestions for InputSearch with client id ", component.getClientId());
    return;
  }
  var searchText = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement()).value.trim();
  if (options._lastValue.trim() != searchText || this._state == "initial") {
    AdfLogger.LOGGER.info("Rendering of the response for search text " + options._lastValue.trim() + "is skipped" + "since the user has altered the search text in the interim");
    return;
  }
  this._lastFilteredText = options._lastValue;
  var renderingContext = {};
  renderingContext.shouldHighlight = false;
  var suggestionsPopup = this._getSuggestionsPopupDomElement(component);
  if (suggestionsPopup) {
    var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement());
    this._suggestionsContainer.reset(component, contentNode, this.GetSuggestionsPanel());
  }
  this.GetSuggestionsPanel().render(component, prefilteredSuggestions, renderingContext);
};
AdfDhtmlInputSearchPeer.prototype._isFilteredResultsDisplayed = function(component, searchText) {
  return this._lastFilteredText == searchText && !AdfSuggestionsContainer.needsUpdate(component);
};
AdfDhtmlInputSearchPeer.prototype.PrefetchComplete = function(component, suggestions, isListComprehensive, needsFurtherFetching) {
  this._isPrefetchListComprehensive = isListComprehensive;
  this.SetDisplayValueOnPrefetch(component, suggestions, isListComprehensive, needsFurtherFetching);
};
AdfDhtmlInputSearchPeer.prototype.__prefetchFailed = function(component, statusCode, response) {
  AdfDomUtils.removeCSSClassName(this.getDomElement(), AdfDhtmlInputSearchPeer._VALUE_UPDATING_STYLE_CLASS);
};
AdfDhtmlInputSearchPeer.prototype.SetDisplayValueOnPrefetch = function(component, suggestions, isListComprehensive, needsFurtherFetching) {
  AdfPreferredSuggestionsManager.update(component, isListComprehensive, suggestions);
  var domElement = AdfRichUIPeer.getDomElementForComponent(component);
  var displayValue = AdfDhtmlEditableValuePeer.getContentNodeText(component, domElement);
  if (displayValue !== "") {
    AdfDomUtils.removeCSSClassName(domElement, AdfDhtmlInputSearchPeer._VALUE_UPDATING_STYLE_CLASS);
    return;
  }
  if (needsFurtherFetching) {
    return;
  }
  AdfDomUtils.removeCSSClassName(domElement, AdfDhtmlInputSearchPeer._VALUE_UPDATING_STYLE_CLASS);
  if (this.IsSuggestionPopupVisible(component)) {
    return;
  }
  var contentNodeValue = AdfDhtmlEditableValuePeer.getContentNodeText(component, domElement);
  if (contentNodeValue == "") {
    this.DeriveAndSetDisplayValue(component, domElement);
  }
};
AdfDhtmlInputSearchPeer.prototype._updateIncompleteDisplayValue = function(component, domElement, prefilteredSuggestions, isMasterList) {
  if (!AdfPreferredSuggestionsManager.isDisplayAttributesCacheable(component)) {
    var values = component.getValue();
    if (values == null || values.length == 0) {
      return;
    }
    this.UpdateDisplayValueAndSelection(component, domElement, values, prefilteredSuggestions, isMasterList);
  }
};
AdfDhtmlInputSearchPeer.prototype.CacheServerSuggestionsList = function(data, searchTerms, isListComprehensive) {
  if (!data) {
    this._suggestionsCacheMap = null;
    return;
  }
  if (isListComprehensive === undefined) {
    isListComprehensive = true;
  }
  if (!this._suggestionsCacheMap) {
    this._suggestionsCacheMap = new AdfInputSearchMruCache(3);
  }
  this._suggestionsCacheMap.put(searchTerms, data, isListComprehensive);
};
AdfDhtmlInputSearchPeer.prototype.GetCachedServerSuggestionsList = function(searchTerms) {
  if (!this._suggestionsCacheMap) {
    return;
  }
  var data = this._suggestionsCacheMap.get(searchTerms);
  if (data) {
    return data[AdfInputSearchMruCache.SUGGESTIONS];
  }
};
AdfDhtmlInputSearchPeer.prototype._getCachedPartialSuggestionsList = function(searchTerms) {
  if (!this._suggestionsCacheMap) {
    this._suggestionsCacheMap = new AdfInputSearchMruCache(3);
  }
  var data = this._suggestionsCacheMap.getBestMatch(searchTerms);
  if (data) {
    return data[AdfInputSearchMruCache.SUGGESTIONS];
  }
};
AdfDhtmlInputSearchPeer._attributeStartsWithFilter = function(component, searchText, suggestions) {
  var filterAttrs = component.getFilterAttributes();
  var userOrderedSearchTerms = searchText.split(" ");
  var searchTerms = searchText.split(" ").sort(function(a, b) {
    return a.length - b.length;
  });
  var filterFunc = function(item) {
    return AdfDhtmlInputSearchPeer._isAttributeStartsWithMatch(item, searchTerms, filterAttrs, userOrderedSearchTerms);
  };
  return suggestions.filter(filterFunc);
};
AdfDhtmlInputSearchPeer._isAttributeStartsWithMatch = function(suggestion, searchTerms, filterAttrs, userOrderedSearchTerms) {
  searchTerms = searchTerms.slice();
  for (var i = filterAttrs.length - 1;i >= 0;i--) {
    var attrValue = suggestion[filterAttrs[i]];
    if (attrValue === null || attrValue === undefined) {
      continue;
    }
    attrValue = attrValue + "";
    for (var j = searchTerms.length - 1;j >= 0;j--) {
      var term = searchTerms[j];
      var whitespaceIndex = AdfDhtmlInputSearchPeer._startsWithWhitespaceIndex(attrValue, term, 0);
      if (whitespaceIndex >= 0) {
        searchTerms.splice(j, 1);
        if (whitespaceIndex > 0) {
          var currentLength = searchTerms.length;
          AdfDhtmlInputSearchPeer._doNextWordMatch(attrValue, whitespaceIndex + 1, term, searchTerms, userOrderedSearchTerms);
          j -= currentLength - searchTerms.length;
        }
        break;
      }
    }
  }
  return searchTerms.length == 0;
};
AdfDhtmlInputSearchPeer._doNextWordMatch = function(attrValue, startIndex, currentTerm, searchTerms, userOrderedSearchTerms) {
  var nextTermIndex = userOrderedSearchTerms.indexOf(currentTerm) + 1;
  if (nextTermIndex >= userOrderedSearchTerms.length) {
    return;
  }
  var nextTerm = userOrderedSearchTerms[nextTermIndex];
  var whitespaceIndex = AdfDhtmlInputSearchPeer._startsWithWhitespaceIndex(attrValue, nextTerm, startIndex);
  if (whitespaceIndex >= 0) {
    var nextTermPosInSearchTerms = searchTerms.indexOf(nextTerm);
    if (nextTermPosInSearchTerms == -1) {
      return;
    }
    searchTerms.splice(nextTermPosInSearchTerms, 1);
    if (whitespaceIndex > 0) {
      AdfDhtmlInputSearchPeer._doNextWordMatch(attrValue, whitespaceIndex + 1, nextTerm, searchTerms, userOrderedSearchTerms);
    }
  }
};
AdfDhtmlInputSearchPeer._startsWithWhitespaceIndex = function(attrValue, term, startIndex) {
  if (attrValue.length - startIndex < term.length) {
    return;
  }
  var i, len;
  for (i = 0, len = term.length;i < len;i++) {
    if (term.charAt(i).toLocaleLowerCase() != attrValue.charAt(i + startIndex).toLocaleLowerCase()) {
      return -1;
    }
  }
  if (attrValue.charAt(len + startIndex) == " ") {
    return len + startIndex;
  }
  return 0;
};
AdfDhtmlInputSearchPeer._getBoundaryRegex = function(word) {
  var specialCharsRegexStr = AdfDhtmlInputSearchPeer._SPECIAL_CHARS_REGEX_STR;
  var firstChar = word.charAt(0);
  if (firstChar == "\\") {
    firstChar = word.charAt(1);
  }
  switch(firstChar) {
    case "\\":
      firstChar = "\\\\";
      break;
    case "-":
      firstChar = "\\-";
      break;
    case "]":
      firstChar = "\\]";
      break;
  }
  if (specialCharsRegexStr.indexOf(firstChar)) {
    specialCharsRegexStr = specialCharsRegexStr.replace(firstChar, "");
  }
  return "(?:^|[\\s" + specialCharsRegexStr + "])+" + "(?\x3d[^\\s" + specialCharsRegexStr + "])";
};
AdfDhtmlInputSearchPeer._getBoundaryRegexList = function(searchTextList) {
  var list = [];
  for (var i = 0, len = searchTextList.length;i < len;i++) {
    list.push(AdfDhtmlInputSearchPeer._getBoundaryRegex(searchTextList[i]));
  }
  return list;
};
AdfDhtmlInputSearchPeer._getContainsFilterRegex = function(searchText) {
  searchText = AdfInputSearchUtils.escapeRegexChars(searchText);
  var searchTextList = AdfInputSearchUtils.splitAndSort(searchText);
  var boundaryRegexList = AdfDhtmlInputSearchPeer._getBoundaryRegexList(searchTextList);
  var regex = "^";
  for (var z = 0, lenz = searchTextList.length;z < lenz;z++) {
    regex += "(?\x3d[\\s\\S]*?" + boundaryRegexList[z] + "(\\w*?)(";
    if (z != 0) {
      regex += "?!";
      for (var y = 1;y <= z;y++) {
        regex += "\\" + 2 * y + "$|";
      }
      regex = regex.substr(0, regex.length - 1) + ")(";
      regex += searchTextList[z] + "(?:(?\x3d[\\s\\S]*?" + boundaryRegexList[z] + "(?:";
      for (var y = 1;y <= z;y++) {
        regex += "\\" + 2 * y + "$|";
      }
      regex = regex.substr(0, regex.length - 1) + "))|(?![\\s\\S]*?" + boundaryRegexList[z] + searchTextList[z] + "))";
    } else {
      regex += searchTextList[z] + "(?![\\s\\S]*?" + boundaryRegexList[z] + searchTextList[z] + ")";
    }
    regex += "[\\s\\S]*))";
  }
  var re = new RegExp(regex, "gi");
  AdfLogger.LOGGER.config("The regex used for filtering is ", re);
  return re;
};
AdfDhtmlInputSearchPeer._getStartsWithFilterRegex = function(searchText) {
  searchText = AdfInputSearchUtils.escapeRegexChars(searchText);
  var searchTextList = AdfInputSearchUtils.splitAndSort(searchText);
  var boundaryRegexList = AdfDhtmlInputSearchPeer._getBoundaryRegexList(searchTextList);
  var preSearchTextMatcher = "(?\x3d[\\s\\S]*?";
  var regex = "^";
  for (var z = 0, lenz = searchTextList.length;z < lenz;z++) {
    regex = regex + preSearchTextMatcher + boundaryRegexList[z] + "(";
    if (z != 0) {
      regex += "?!";
      for (var y = 1;y <= z;y++) {
        regex += "\\" + y + "$|";
      }
      regex = regex.substr(0, regex.length - 1) + ")(";
    }
    regex += searchTextList[z] + "[\\s\\S]*))";
  }
  var re = new RegExp(regex, "gi");
  AdfLogger.LOGGER.config("The regex used for filtering is ", re);
  return re;
};
AdfDhtmlInputSearchPeer._concatenateFilterAttributeValues = function(filterAttributes, suggestionItem) {
  var filterStr = "";
  for (var j = 0, lenj = filterAttributes.length;j < lenj;j++) {
    var filterKey = filterAttributes[j];
    var value = suggestionItem[filterKey];
    if (value) {
      filterStr += value + " ";
    }
  }
  return filterStr;
};
AdfDhtmlInputSearchPeer._containsFilter = function(component, searchText, data) {
  var re = AdfDhtmlInputSearchPeer._getContainsFilterRegex(searchText);
  var filterAttributes = component.getFilterAttributes();
  var scoredCollection = new Array(searchText.split(" ").length + 1);
  for (var i = 0, len = scoredCollection.length;i < len;i++) {
    scoredCollection[i] = [];
  }
  var filterFunc = function(item, key, index, suggestionObj) {
    var filterStr = AdfDhtmlInputSearchPeer._concatenateFilterAttributeValues(filterAttributes, item);
    var matchProps = re.exec(filterStr);
    if (matchProps != null) {
      var score = 0;
      for (var k = 1, len = matchProps.length;k < len;k += 2) {
        if (matchProps[k] == "") {
          score++;
        }
      }
      scoredCollection[score].push(suggestionObj);
    }
    re.lastIndex = 0;
  };
  data.forEach(filterFunc);
  var scoredOrderedSuggestions = [];
  for (var i = scoredCollection.length - 1;i >= 0;i--) {
    scoredOrderedSuggestions = scoredOrderedSuggestions.concat(scoredCollection[i]);
  }
  return new AdfSuggestionMap(scoredOrderedSuggestions, data);
};
AdfDhtmlInputSearchPeer._startsWithFilter = function(component, searchText, data) {
  var re = AdfDhtmlInputSearchPeer._getStartsWithFilterRegex(searchText);
  var filterAttributes = component.getFilterAttributes();
  var filterFunc = function(item) {
    var filterStr = AdfDhtmlInputSearchPeer._concatenateFilterAttributeValues(filterAttributes, item);
    var hasMatched = re.test(filterStr);
    re.lastIndex = 0;
    return hasMatched;
  };
  return data.filter(filterFunc);
};
AdfDhtmlInputSearchPeer.prototype._filterSuggestions = function(component) {
  var page = AdfPage.PAGE;
  var time = 70;
  if (this._fastKeyInputTimer) {
    page.rescheduleTimer(this._fastKeyInputTimer, time);
  } else {
    this._fastKeyInputTimer = page.scheduleTimer(this, this._filterSuggestionsCallback, component, time, {"isSynchronized":true});
  }
  if (this._serverFilterTimer) {
    AdfPage.PAGE.cancelTimer(this._serverFilterTimer);
    this._serverFilterTimer = null;
  }
};
AdfDhtmlInputSearchPeer.prototype._filterSuggestionsCallback = function(component) {
  this._fastKeyInputTimer = null;
  var isServerFilterMode = AdfSequencedSections.isServerFilterMode(component);
  if (isServerFilterMode) {
    this._filterSuggestionsServerImpl(component);
  } else {
    this._filterSuggestionsImpl(component);
  }
};
AdfDhtmlInputSearchPeer.prototype._filterSuggestionsServerImpl = function(component) {
  this._state = "filtering";
  var searchText = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement()).value.trim();
  this._lastValue = searchText;
  var time = AdfDhtmlInputSearchPeer._getServerFilterDelay(searchText.length);
  var page = AdfPage.PAGE;
  if (this._serverFilterTimer) {
    page.rescheduleTimer(this._serverFilterTimer, time);
  } else {
    this._serverFilterTimer = page.scheduleTimer(this, this._serverFiltering, component, time, {"isSynchronized":true});
  }
  var suggestionsPopup = this._getSuggestionsPopupDomElement(component);
  if (!this.IsSuggestionPopupVisible(component)) {
    this._toolbarPanel.attach(component, suggestionsPopup);
    this._suggestionsContainer.attach(component, suggestionsPopup);
    var popupHints = this._getSuggestionsPopupHints(component);
    this.showPopup(component, suggestionsPopup, popupHints, AdfDhtmlInputSearchPeer._SUGGESTIONS_POPUP_SUB_ID);
  }
  if (suggestionsPopup) {
    var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement());
    if (contentNode) {
      this._suggestionsContainer.reset(component, contentNode, this.GetSuggestionsPanel());
    } else {
      this._suggestionsContainer.attach(component, suggestionsPopup);
    }
  }
};
AdfDhtmlInputSearchPeer.prototype._filterSuggestionsImpl = function(component, knownPartialListCase, forceFiltering) {
  var searchText = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement()).value.trim();
  this._lastValue = searchText;
  if (!forceFiltering && this._isFilteredResultsDisplayed(component, searchText)) {
    return;
  }
  var renderingContext = {};
  renderingContext.shouldHighlight = !!searchText;
  if (knownPartialListCase) {
    renderingContext.isPartialList = true;
  } else {
    this.ShowSuggestionsPopup(component, "filtering");
  }
  var list = this.GetCachedServerSuggestionsList(searchText);
  if (!list) {
    list = this._getCachedPartialSuggestionsList(searchText);
    renderingContext.isPartialList = true;
    if (!list) {
      return;
    }
  }
  var criteria = component.getCriteria();
  if (!searchText) {
    this.GetSuggestionsPanel().render(component, list, renderingContext);
  } else {
    if (criteria == AdfRichInputSearch.CRITERIA_CONTAINS) {
      var suggestions = AdfDhtmlInputSearchPeer._containsFilter(component, searchText, list);
      this.GetSuggestionsPanel().render(component, suggestions, renderingContext);
    } else {
      if (criteria == AdfRichInputSearch.CRITERIA_ATTRIBUTE_STARTS_WITH) {
        var suggestions = AdfDhtmlInputSearchPeer._attributeStartsWithFilter(component, searchText, list);
        this.GetSuggestionsPanel().render(component, suggestions, renderingContext);
      } else {
        var suggestions = AdfDhtmlInputSearchPeer._startsWithFilter(component, searchText, list);
        this.GetSuggestionsPanel().render(component, suggestions, renderingContext);
      }
    }
  }
  this._lastFilteredText = searchText;
};
AdfDhtmlInputSearchPeer.prototype._getPrefetchListComprehensive = function(component) {
  AdfAssert.assert(this._isPrefetchListComprehensive !== undefined, "This method should not be invoked before prefetchOrUpdate is invoked");
  if (this._isPrefetchListComprehensive === null) {
    var ss = component.getSearchSections()[AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT];
    this._isPrefetchListComprehensive = !ss.getFilterParameters();
  }
  return this._isPrefetchListComprehensive;
};
AdfDhtmlInputSearchPeer.prototype._hasValueChanged = function(contentNodeValue) {
  if (contentNodeValue != this._lastValue) {
    this._lastValue = contentNodeValue;
    return true;
  }
  return false;
};
AdfDhtmlInputSearchPeer._createHiddenValueElement = function(component, contentContainer) {
  var hiddenValueElem = document.createElement("input");
  hiddenValueElem.setAttribute("type", "hidden");
  hiddenValueElem.setAttribute("name", component.getClientId());
  contentContainer.appendChild(hiddenValueElem);
  return hiddenValueElem;
};
AdfDhtmlInputSearchPeer._getHiddenValueElements = function(component, domElement) {
  if (!domElement) {
    domElement = component.getDomElement();
  }
  var attributeName = component.getReadOnly() ? AdfDhtmlInputSearchPeer._CUSTOM_NAME_EXPANDO : "name";
  return domElement.querySelectorAll("[" + attributeName + "\x3d'" + component.getClientId() + "']");
};
AdfDhtmlInputSearchPeer.prototype._setHiddenValueElementsValue = function(component, domElement, newValues, oldValues) {
  var hiddenValueElems = AdfDhtmlInputSearchPeer._getHiddenValueElements(component, domElement);
  var contentContainer = AdfInputSearchUtils.getContentContainer(component);
  var i = 0;
  for (var length = newValues.length;i < length;i++) {
    var hiddenValueElem = hiddenValueElems[i];
    if (!hiddenValueElem) {
      hiddenValueElem = AdfDhtmlInputSearchPeer._createHiddenValueElement(component, contentContainer);
    }
    hiddenValueElem.value = newValues[i];
  }
  for (var length = hiddenValueElems.length;i < length;i++) {
    contentContainer.removeChild(hiddenValueElems[i]);
  }
};
AdfDhtmlInputSearchPeer._setIdOnLabelElement = function(component, contentNode) {
  var labelElement = AdfDhtmlEditableValuePeer.GetLabelElement(contentNode);
  if (labelElement) {
    labelElement.setAttribute("id", AdfInputSearchUtils.getLabelId(component));
  } else {
    AdfLogger.LOGGER.severe("Label not defined or for attribute not set for inputSearch ", contentNode.id);
  }
};
AdfDhtmlInputSearchPeer.prototype._getSuggestionsPopupDomElement = function(component) {
  var clientId = component.getClientId();
  var suggestionsPopupId = AdfRichUIPeer.createSubId(clientId, AdfDhtmlInputSearchPeer._SUGGESTIONS_POPUP_SUB_ID);
  var suggestionsPopup = document.getElementById(suggestionsPopupId);
  if (suggestionsPopup) {
    return suggestionsPopup;
  }
  suggestionsPopup = document.createElement("div");
  suggestionsPopup.setAttribute("id", suggestionsPopupId);
  if (component.getStyleClass()) {
    suggestionsPopup.setAttribute("class", component.getStyleClass());
  }
  return suggestionsPopup;
};
AdfDhtmlInputSearchPeer.prototype.IsSelectionsShown = function(component) {
  var popupWindow = this.__getSuggestionPopupWindow(component);
  return popupWindow && popupWindow._isSelections;
};
AdfDhtmlInputSearchPeer.prototype.__getSuggestionPopupWindow = function(component) {
  return this.getPopupWindow(component, AdfDhtmlInputSearchPeer._SUGGESTIONS_POPUP_SUB_ID);
};
AdfDhtmlInputSearchPeer.prototype.IsSuggestionPopupVisible = function(component) {
  return this.isPopupVisible(component, AdfDhtmlInputSearchPeer._SUGGESTIONS_POPUP_SUB_ID);
};
AdfDhtmlInputSearchPeer.prototype.HideSuggestionPopup = function(component) {
  this.hidePopup(component, AdfDhtmlInputSearchPeer._SUGGESTIONS_POPUP_SUB_ID);
};
AdfDhtmlInputSearchPeer.prototype._getSuggestionsPopupHints = function(component) {
  var clientId = component.getClientId();
  var hints = {};
  hints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_MENU;
  hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU;
  hints[AdfDhtmlPopupWindow.HINT_FOCUS] = false;
  hints[AdfDhtmlPopupWindow.HINT_CLOSE_ON_ESCAPE] = true;
  hints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER] = this.createCallback(this._handleSuggestionsPopupClosed);
  hints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER_PARAM] = component;
  hints[AdfDhtmlPopupWindow.HINT_OPENED_HANDLER] = this.createCallback(this._handleSuggestionsPopupOpening);
  hints[AdfDhtmlPopupWindow.HINT_OPENED_HANDLER_PARAM] = component;
  hints[AdfRichPopup.HINT_ALIGN_ID] = AdfDhtmlEditableValuePeer.GetContentNodeId(component);
  hints[AdfRichPopup.HINT_ALIGN] = AdfRichPopup.ALIGN_AFTER_START;
  hints[AdfRichPopup.HINT_LAUNCH_ID] = clientId;
  hints[AdfDhtmlPopupWindow.HINT_ANIMATE] = AdfRichPopup.ANIMATE_FALSE;
  hints[AdfDhtmlPopupWindow.HINT_UNSCOPED] = AdfDhtmlPopupWindow.HINT_UNSCOPED_ALWAYS;
  hints[AdfDhtmlPopupWindow.COMPONENT_EVENTS_ENABLED] = true;
  hints[AdfDhtmlPopupWindow.RETAIN_FOCUS] = true;
  return hints;
};
AdfDhtmlInputSearchPeer.prototype.ShowSuggestionsPopup = function(component, state) {
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, this.getDomElement());
  var popupWindow = this.__getSuggestionPopupWindow(component);
  if (popupWindow) {
    popupWindow._isSelections = false;
    this._suggestionsContainer.reset(component, contentNode, this.GetSuggestionsPanel());
  } else {
    if (state != "filtering") {
      this.ToggleDisplayValueToFiltering(contentNode);
    }
    var suggestionsPopup = this._getSuggestionsPopupDomElement(component);
    this._toolbarPanel.attach(component, suggestionsPopup);
    this._suggestionsContainer.attach(component, suggestionsPopup);
    var popupHints = this._getSuggestionsPopupHints(component);
    this.showPopup(component, suggestionsPopup, popupHints, AdfDhtmlInputSearchPeer._SUGGESTIONS_POPUP_SUB_ID);
  }
  this._showSuggestions(component, state, contentNode);
};
AdfDhtmlInputSearchPeer.prototype._showSuggestions = function(component, state, contentNode) {
  if (state == "selections") {
    this.__getSuggestionPopupWindow(component)._isSelections = true;
    this.RenderSelections(component);
  } else {
    if (state == "initial") {
      AdfPage.PAGE.__perfTimings(true, true, true, "inputSearch: user click: show suggestions: id\x3d", component.getClientId());
      this._fetchAll(component);
    } else {
      var searchText = contentNode.value.trim();
      AdfPage.PAGE.__perfTimings(true, true, true, "inputSearch: user click: filter values: id\x3d", component.getClientId(), ", terms\x3d", searchText);
      this._fetchSuggestionsIfNeeded(component, searchText);
    }
  }
};
AdfDhtmlInputSearchPeer.prototype._fetchSuggestionsIfNeeded = function(component, searchText) {
  var data = this.GetCachedServerSuggestionsList(searchText);
  if (!data) {
    if (this._getPrefetchListComprehensive(component)) {
      var options = {};
      options._isClientFiltering = true;
      this._fetch(component, options);
    } else {
      var time = AdfDhtmlInputSearchPeer._getServerFilterDelay(searchText.length);
      var page = AdfPage.PAGE;
      if (this._serverFilterTimer) {
        page.rescheduleTimer(this._serverFilterTimer, time);
      } else {
        this._serverFilterTimer = page.scheduleTimer(this, this._serverFiltering, component, time, {"isSynchronized":true});
      }
    }
  }
};
AdfDhtmlInputSearchPeer.prototype._serverFiltering = function(component) {
  this._serverFilterTimer = null;
  var options = {};
  options._isServerFiltering = true;
  this._fetch(component, options);
};
AdfDhtmlInputSearchPeer._getServerFilterDelay = function(searchTermsLength) {
  switch(searchTermsLength) {
    case 0:
      return 500;
    case 1:
      return 1E3;
    case 2:
      return 700;
    case 3:
      return 500;
    default:
      return 300;
  }
};

AdfRichUIPeer.createPeerClass(AdfDhtmlInputSearchPeer, "AdfSingleSelectInputSearchPeer", false);
AdfSingleSelectInputSearchPeer.InitSubclass = function() {
  AdfObject.ensureClassInitialization(AdfSingleSelectPanel);
  this._AUTOCOMPLETE_ANNOUNCE_MSG = "af_inputSearch.AUTOCOMPLETE_ANNOUNCE_MSG";
  this._MSG_AUTOCOMPLETE_FAILED = "af_inputSearch.MSG_AUTOCOMPLETE_FAILED";
  this._MSG_AUTCOMPLETE_FAILED_DETAIL = "af_inputSearch.MSG_AUTOCOMPLETE_FAILED_DETAIL";
};
AdfSingleSelectInputSearchPeer.prototype.InitDomElement = function(component, element) {
  AdfSingleSelectInputSearchPeer.superclass.InitDomElement.call(this, component, element);
  this._suggestionsPanel = new AdfSingleSelectPanel(this);
};
AdfSingleSelectInputSearchPeer.prototype.delayedHandleAutoCompletingEvent = function(componentEvent) {
  var component = this.getComponent();
  if (componentEvent.isCanceled()) {
    if (component.getProperty(AdfDhtmlInputSearchPeer.SELECTION_PROPERTY)) {
      AdfDhtmlInputSearchPeer.SetSelectionProp(component, null);
    }
  } else {
    var autoCompletedValue = componentEvent.getAutoCompletedValue();
    if (autoCompletedValue) {
      this.__setComponentValue(component, autoCompletedValue);
      var page = AdfPage.PAGE;
      page.announceToAssistiveTechnology(page.getLookAndFeel().getTranslatedString(AdfSingleSelectInputSearchPeer._AUTOCOMPLETE_ANNOUNCE_MSG, AdfDhtmlEditableValuePeer.GetLabelText(component), AdfDhtmlEditableValuePeer.getContentNodeText(component)));
    } else {
      if (!componentEvent.isAutoCompletionSuppressed()) {
        AdfInputSearchUtils.showFacesMessage(component, AdfFacesMessage.TYPE_ERROR, AdfSingleSelectInputSearchPeer._MSG_AUTOCOMPLETE_FAILED, AdfSingleSelectInputSearchPeer._MSG_AUTCOMPLETE_FAILED_DETAIL);
      }
    }
  }
  this.GetSuggestionsPanel().clear();
};
AdfSingleSelectInputSearchPeer.prototype.RunValidation = function(component, targetNode, isChangeRequired) {
  AdfSingleSelectInputSearchPeer.superclass.RunValidation.call(this, component, targetNode, isChangeRequired);
  this.HideSuggestionPopup(component);
};
AdfSingleSelectInputSearchPeer.prototype.Validate = function(component, submittedValue) {
  if (!submittedValue) {
    this.__setComponentValue(component, null);
  } else {
    if (typeof submittedValue === "string") {
      var autoCompletedValue = this._autoComplete(component);
      AdfAutoCompletingEvent.queue(component, submittedValue, autoCompletedValue);
      this._underAutocompletion = true;
    } else {
      AdfAssert.assertArray(submittedValue);
      AdfSingleSelectInputSearchPeer.superclass.Validate.call(this, component, submittedValue);
    }
  }
};
AdfSingleSelectInputSearchPeer.prototype.GetDisplayValue = function(component, domElement, unconditional) {
  var displayValues = [];
  var contentNodeValue = AdfDhtmlEditableValuePeer.getContentNodeText(component, domElement).trim();
  if (contentNodeValue) {
    displayValues.push(contentNodeValue);
  }
  return displayValues;
};
AdfSingleSelectInputSearchPeer.prototype.ClearTemporaryStorage = function() {
  AdfSingleSelectInputSearchPeer.superclass.ClearTemporaryStorage.call(this);
  this._underAutocompletion = null;
};
AdfSingleSelectInputSearchPeer.prototype.GetCombinedDisplayValue = function(newValues) {
  return newValues.length > 0 ? newValues[0] : "";
};
AdfSingleSelectInputSearchPeer.prototype.GetRealNewValues = function(newValues, oldValues) {
  var oldValue = oldValues.length ? oldValues[0] : null;
  var newValue = newValues.length ? newValues[0] : null;
  if (newValue == oldValue) {
    return AdfCollections.EMPTY_ARRAY;
  }
  return newValues;
};
AdfSingleSelectInputSearchPeer.prototype.GetSuggestionMapContainingSelections = function(newValues) {
  var suggestions = this.GetSuggestionsPanel().getDisplayedSuggestions();
  if (!suggestions) {
    suggestions = this.GetCachedServerSuggestionsList();
  }
  return suggestions;
};
AdfSingleSelectInputSearchPeer.prototype.GetSuggestionsPanel = function() {
  return this._suggestionsPanel;
};
AdfSingleSelectInputSearchPeer.prototype.ShowSelectionsPopup = function(component, contentNode) {
  AdfAssert.assert(false, "not expected to be invoked on single select inputSearch");
};
AdfSingleSelectInputSearchPeer.prototype.IsUnderAutocompletion = function() {
  return this._underAutocompletion;
};
AdfSingleSelectInputSearchPeer.prototype.RestoreSelectionOnEscape = function(component, domElement, contentNode) {
  var lastValue = AdfDhtmlInputBasePeer.getLastValue(contentNode);
  if (lastValue === "") {
    var componentValue = AdfDhtmlInputSearchPeer.GetValue(component);
    if (componentValue.length !== 0) {
      var value = componentValue[0];
      if (this.GetSuggestionMapContainingSelections().get(value)) {
        this.DeriveAndSetDisplayValue(component, domElement, componentValue);
      }
      return;
    }
  }
  this.SetDisplayValue(component, domElement, [lastValue]);
};
AdfSingleSelectInputSearchPeer.prototype.SetDisplayValueOnPrefetch = function(component, suggestions, isMasterList) {
  this.CacheServerSuggestionsList(suggestions, "", isMasterList);
  AdfSingleSelectInputSearchPeer.superclass.SetDisplayValueOnPrefetch.call(this, component, suggestions, isMasterList);
  if (!this.IsSuggestionPopupVisible(component)) {
    this.CacheServerSuggestionsList(null);
  }
};
AdfSingleSelectInputSearchPeer.prototype.RenderSelections = function(component) {
  AdfAssert.assert(false, "not expected to be invoked on single select inputSearch");
};
AdfSingleSelectInputSearchPeer.prototype.ToggleDisplayValueToFiltering = function(contentNode, keyCode) {
};
AdfSingleSelectInputSearchPeer.prototype.UpdateDisplayValueAndSelection = function(component, domElement, values, freshSuggestions, isMasterList) {
  if (freshSuggestions.get(values[0])) {
    this.CacheServerSuggestionsList(freshSuggestions, "", isMasterList);
    AdfSingleSelectInputSearchPeer.superclass.UpdateDisplayValueAndSelection.call(this, component, domElement, values, freshSuggestions, isMasterList);
    this.CacheServerSuggestionsList(null);
  }
};
AdfSingleSelectInputSearchPeer.prototype.__setComponentValue = function(component, newValue) {
  var oldValues = AdfDhtmlInputSearchPeer.GetValue(component);
  var oldValue = oldValues.length ? oldValues[0] : null;
  var newValues = newValue === null ? [] : [newValue];
  if (oldValue != newValue) {
    AdfSingleSelectInputSearchPeer.superclass.Validate.call(this, component, newValues);
  } else {
    this.DeriveAndSetDisplayValue(component, this.getDomElement(), newValues);
    AdfPage.PAGE.clearMessages(component.getClientId());
  }
  this.HideSuggestionPopup(component);
};
AdfSingleSelectInputSearchPeer.prototype._autoComplete = function(component) {
  var displayedSuggestions = this.GetSuggestionsPanel().getDisplayedSuggestions();
  if (displayedSuggestions && displayedSuggestions.length == 1) {
    return displayedSuggestions.at(0).key;
  }
};
AdfSingleSelectInputSearchPeer._isDisplayValueUpdatePossible = function(component, domElement, suggestionMap, values) {
  var contentNodeValue = AdfDhtmlEditableValuePeer.getContentNodeText(component, domElement);
  if (contentNodeValue == "") {
    return true;
  }
  return !!suggestionMap.get(values[0]);
};

AdfRichUIPeer.createPeerClass(AdfDhtmlInputSearchPeer, "AdfMultiSelectInputSearchPeer", false);
AdfMultiSelectInputSearchPeer.InitSubclass = function() {
  AdfObject.ensureClassInitialization(AdfMultiSelectPanel);
  this._DISPLAY_VALUE_SEPARATOR = ", ";
  this.__SELECTIONS_LENGTH_EXPANDO = "data-afr-sel";
  this.__HAS_SELECTIONS_STATE_STYLE_CLASS = "p_AFHasSelections";
};
AdfMultiSelectInputSearchPeer.prototype.InitDomElement = function(component, element) {
  AdfMultiSelectInputSearchPeer.superclass.InitDomElement.call(this, component, element);
  this._suggestionsPanel = new AdfMultiSelectPanel(this);
  var values = AdfDhtmlInputSearchPeer.GetValue(component);
  AdfMultiSelectInputSearchPeer._setSelectionsCount(component, element, values.length);
};
AdfMultiSelectInputSearchPeer.prototype.GetReadyState = function() {
  if (!this._selectionSeedingDone) {
    return AdfUIComponent.STATE_LOADING;
  }
  return AdfMultiSelectInputSearchPeer.superclass.GetReadyState.call(this);
};
AdfMultiSelectInputSearchPeer.prototype.GetDisplayValue = function(component, domElement, unconditional) {
  var contentNodeValue = AdfDhtmlEditableValuePeer.getContentNodeText(component, domElement).trim();
  if (contentNodeValue) {
    return contentNodeValue.split(AdfMultiSelectInputSearchPeer._DISPLAY_VALUE_SEPARATOR);
  }
  return AdfCollections.EMPTY_ARRAY;
};
AdfMultiSelectInputSearchPeer.prototype.RunValidation = function(component, contentNode, isChangeRequired) {
  var values = AdfInputSearchUtils.mapKeys(this.__getLocalSelections());
  if (values.length == 0) {
    var oldValues = AdfDhtmlInputSearchPeer.GetValue(component);
    if (oldValues.length == 0) {
      this.SetDisplayValue(component, this.getDomElement(), values);
    }
  }
  this.Validate(component, values);
};
AdfMultiSelectInputSearchPeer.prototype.DerivePropsFromPrefSuggestions = function(component, preferredSuggestions) {
  AdfMultiSelectInputSearchPeer.superclass.DerivePropsFromPrefSuggestions.call(this, component, preferredSuggestions);
  this.__resolveLocalSelections(component, preferredSuggestions);
};
AdfMultiSelectInputSearchPeer.prototype.GetCombinedDisplayValue = function(newValues) {
  return newValues.join(AdfMultiSelectInputSearchPeer._DISPLAY_VALUE_SEPARATOR);
};
AdfMultiSelectInputSearchPeer.prototype.GetRealNewValues = function(newValues, oldValues) {
  var oldValObj = {};
  for (var i = 0, length = oldValues.length;i < length;i++) {
    oldValObj[oldValues[i]] = true;
  }
  var realNewValues = [];
  for (var i = 0, length = newValues.length;i < length;i++) {
    if (!oldValObj[newValues[i]]) {
      realNewValues.push(newValues[i]);
    }
  }
  return realNewValues;
};
AdfMultiSelectInputSearchPeer.prototype.GetSuggestionMapContainingSelections = function(newValues) {
  var localSelections = this.__getLocalSelections();
  if (newValues && !this.compareValues(AdfInputSearchUtils.mapKeys(localSelections), newValues)) {
    var displayedSuggestions = this.GetSuggestionsPanel().getDisplayedSuggestions();
    localSelections = this._updateLocalSelections(newValues, localSelections, displayedSuggestions);
    AdfMultiSelectInputSearchPeer._updateSelectionsCount(this.getComponent(), this.getDomElement(), newValues.length);
  }
  return localSelections;
};
AdfMultiSelectInputSearchPeer.prototype.GetSuggestionsPanel = function() {
  return this._suggestionsPanel;
};
AdfMultiSelectInputSearchPeer.prototype.ShowSelectionsPopup = function(component, contentNode) {
  var hasSelections = AdfDomUtils.containsCSSClassName(this.getDomElement(), AdfMultiSelectInputSearchPeer.__HAS_SELECTIONS_STATE_STYLE_CLASS);
  if (!hasSelections) {
    return;
  }
  if (!this.IsSelectionsShown(component)) {
    this.ToggleDisplayValueToFiltering(contentNode);
    this.ShowSuggestionsPopup(component, "selections");
  }
  component.focus();
};
AdfMultiSelectInputSearchPeer.prototype.IsUnderAutocompletion = function() {
  return false;
};
AdfMultiSelectInputSearchPeer.prototype.RestoreSelectionOnEscape = function(component, domElement, contentNode) {
  return;
};
AdfMultiSelectInputSearchPeer.prototype.RenderSelections = function(component) {
  if (!this._selectionSeedingDone) {
    var page = AdfPage.PAGE;
    page.unregisterLoadingComponent(component);
    page.registerLoadingComponent(component);
  }
  var selections = this.__getLocalSelections();
  if (!selections || !this._selectionSeedingDone && this._hasUnresolvedValues(component)) {
    return;
  }
  var suggestionMap = new AdfSuggestionMap(AdfInputSearchUtils.mapValues(selections));
  var suggestionsPanel = this.GetSuggestionsPanel();
  if (suggestionsPanel.getDisplayedSuggestions()) {
    suggestionsPanel.update(component, suggestionMap, true);
  } else {
    var renderingContext = {};
    renderingContext.source = AdfInputSearchUtils.getDefaultSearchSection(component);
    suggestionsPanel.render(component, suggestionMap, renderingContext);
  }
};
AdfMultiSelectInputSearchPeer.prototype.ToggleDisplayValueToFiltering = function(contentNode, keyCode) {
  if (keyCode !== undefined && keyCode !== AdfKeyStroke.BACKSPACE_KEY && keyCode !== AdfKeyStroke.DELETE_KEY) {
    contentNode.value = String.fromCodePoint ? String.fromCodePoint(keyCode) : String.fromCharCode(keyCode);
  } else {
    contentNode.value = "";
  }
  AdfMultiSelectInputSearchPeer.superclass.ToggleDisplayValueToFiltering.call(this, contentNode, keyCode);
};
AdfMultiSelectInputSearchPeer.prototype.UpdateDisplayValueAndSelection = function(component, domElement, values, freshSuggestions) {
  var selections = this.__getLocalSelections();
  for (var i = 0, len = values.length;i < len;i++) {
    var value = values[i];
    var suggestion = freshSuggestions.get(value);
    if (suggestion) {
      selections.set(value, suggestion);
    }
  }
  AdfMultiSelectInputSearchPeer.superclass.UpdateDisplayValueAndSelection.call(this, component, domElement, values, freshSuggestions);
};
AdfMultiSelectInputSearchPeer.prototype.PrefetchComplete = function(component, suggestions, isListComprehensive) {
  this.__resolveLocalSelections(component, suggestions);
  var needsFurtherFetching = false;
  var leftOutValues = this._getUnresolvedValues(component);
  if (!isListComprehensive) {
    if (leftOutValues.length > 0) {
      needsFurtherFetching = true;
      AdfSequencedSections.fetchSpecificSuggestions(component, leftOutValues);
    }
  } else {
    if (leftOutValues.length > 0) {
      AdfLogger.LOGGER.severe("There are values for which the suggestion objects are not available. Component: ", component.getClientId(), ". Values are ", leftOutValues);
    }
  }
  AdfMultiSelectInputSearchPeer.superclass.PrefetchComplete.call(this, component, suggestions, isListComprehensive, needsFurtherFetching);
  if (!needsFurtherFetching) {
    this._selectionSeedingComplete(component);
    if (this.IsSelectionsShown(component)) {
      this.RenderSelections(component);
    }
  }
};
AdfMultiSelectInputSearchPeer.prototype._selectionSeedingComplete = function(component) {
  this._selectionSeedingDone = true;
  AdfPage.PAGE.unregisterLoadingComponent(component);
};
AdfMultiSelectInputSearchPeer.prototype.__fetchSpecificSuggestionsComplete = function(component, suggestions) {
  this._selectionSeedingComplete(component);
  this.__resolveLocalSelections(component, suggestions);
  var leftOutValues = this._getUnresolvedValues(component);
  if (leftOutValues.length > 0) {
    AdfLogger.LOGGER.severe("There are values for which the suggestion objects are not available. Component: ", component.getClientId(), ". Values are ", leftOutValues);
  }
  this.SetDisplayValueOnPrefetch(component, suggestions, false, false);
  if (this.IsSelectionsShown(component)) {
    this.RenderSelections(component);
  }
};
AdfMultiSelectInputSearchPeer.prototype.__getLocalSelections = function() {
  return this._localSelections;
};
AdfMultiSelectInputSearchPeer.prototype._getUnresolvedValues = function(component) {
  var values = AdfDhtmlInputSearchPeer.GetValue(component);
  var localSelections = this._localSelections;
  var leftOutValues = [];
  for (var i = 0, len = values.length;i < len;i++) {
    if (localSelections.get(values[i]) == null) {
      leftOutValues.push(values[i]);
    }
  }
  return leftOutValues;
};
AdfMultiSelectInputSearchPeer.prototype._hasUnresolvedValues = function(component) {
  return !this.__getLocalSelections() || this._getUnresolvedValues(component).length > 0;
};
AdfMultiSelectInputSearchPeer.prototype.__resolveLocalSelections = function(component, suggestions) {
  if (!this.__getLocalSelections()) {
    this._createLocalSelections(component);
  }
  var values = AdfDhtmlInputSearchPeer.GetValue(component);
  for (var i = 0, len = values.length;i < len;i++) {
    var suggestion = suggestions.get(values[i]);
    if (suggestion) {
      this._localSelections.set(values[i], suggestion);
    }
  }
};
AdfMultiSelectInputSearchPeer.prototype._createLocalSelections = function(component) {
  AdfAssert.assert(AdfDhtmlInputSearchPeer.getValueAttributeType(component) != null);
  var values = AdfDhtmlInputSearchPeer.GetValue(component);
  var selections = component.getSelection() || [];
  var localSelections = new Map;
  for (var i = 0, len = values.length;i < len;i++) {
    var selection = AdfMultiSelectInputSearchPeer._getSelectionForValue(values[i], selections);
    localSelections.set(values[i], selection);
  }
  this._localSelections = localSelections;
};
AdfMultiSelectInputSearchPeer.prototype._updateLocalSelections = function(newValues, oldLocalSelections, displayedSuggestions) {
  var newLocalSelections = new Map;
  for (var i = 0, len = newValues.length;i < len;i++) {
    var newerValue = newValues[i];
    if (oldLocalSelections && oldLocalSelections.has(newerValue)) {
      newLocalSelections.set(newerValue, oldLocalSelections.get(newerValue));
    } else {
      if (displayedSuggestions) {
        newLocalSelections.set(newerValue, displayedSuggestions.get(newerValue));
      } else {
        newLocalSelections.set(newerValue, null);
      }
    }
  }
  this._localSelections = newLocalSelections;
  return newLocalSelections;
};
AdfMultiSelectInputSearchPeer._getSelectionForValue = function(value, selections) {
  for (var i = 0, len = selections.length;i < len;i++) {
    if (value == selections[i].key) {
      return selections[i];
    }
  }
  return;
};
AdfMultiSelectInputSearchPeer._setSelectionsCount = function(component, element, size) {
  var selectionsButton = AdfInputSearchUtils.getSelectionsButton(component);
  if (selectionsButton && size > 0) {
    selectionsButton.setAttribute(AdfMultiSelectInputSearchPeer.__SELECTIONS_LENGTH_EXPANDO, size);
    AdfDomUtils.addCSSClassName(element, AdfMultiSelectInputSearchPeer.__HAS_SELECTIONS_STATE_STYLE_CLASS);
  }
};
AdfMultiSelectInputSearchPeer._updateSelectionsCount = function(component, element, size) {
  if (size === 0) {
    AdfDomUtils.removeCSSClassName(element, AdfMultiSelectInputSearchPeer.__HAS_SELECTIONS_STATE_STYLE_CLASS);
    var selectionsButton = AdfInputSearchUtils.getSelectionsButton(component);
    selectionsButton.removeAttribute(AdfMultiSelectInputSearchPeer.__SELECTIONS_LENGTH_EXPANDO);
  } else {
    AdfMultiSelectInputSearchPeer._setSelectionsCount(component, element, size);
  }
};

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlSearchSectionPeer");
AdfDhtmlSearchSectionPeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentPropertyChanges(this, AdfRichSearchSection.DATA_URL);
  this._LIST_HEADER_STYLE_CLASS = "af|searchSection::list-header";
  this._ROW_HEADER_STYLE_CLASS = "af|searchSection::row-header";
};
AdfDhtmlSearchSectionPeer.prototype.InitDomElement = function(component, element) {
  AdfDhtmlSearchSectionPeer.superclass.InitDomElement.call(this, component, element);
  AdfDhtmlSuggestionsSectionPeer.__prepareTemplates(component);
  var inputSearch = component.getParent();
  inputSearch.getPeer().prefetchOrUpdate(inputSearch, component);
};
AdfDhtmlSearchSectionPeer.prototype.ComponentDataUrlChanged = function(component, domElement, newValue, oldValue) {
  var inputSearch = component.getParent();
  inputSearch.getPeer().prefetchOrUpdate(inputSearch, component);
};
AdfDhtmlSearchSectionPeer.prototype.getHeaderStyleClass = function(isTableMode) {
  return isTableMode ? AdfDhtmlSearchSectionPeer._ROW_HEADER_STYLE_CLASS : AdfDhtmlSearchSectionPeer._LIST_HEADER_STYLE_CLASS;
};
AdfDhtmlSearchSectionPeer.executeFilterParametersFunc = function(searchSection, context) {
  var request = {};
  request.queryString = null;
  request.method = "GET";
  request.body = null;
  var filterParamsCallbackName = searchSection.getFilterParameters();
  if (filterParamsCallbackName) {
    var filterParamsCallback = AdfInputSearchUtils.getFunction(filterParamsCallbackName);
    if (filterParamsCallback && filterParamsCallback instanceof Function) {
      request = filterParamsCallback.call(searchSection, request, context);
    } else {
      AdfLogger.LOGGER.severe("Couldn't locate filterParameters function ", filterParamsCallbackName, " for component ", searchSection.getClientId());
    }
  } else {
    AdfLogger.LOGGER.severe("filterParameters attribute is not set for the component", searchSection.getClientId());
  }
  AdfDhtmlSearchSectionPeer._validateRequestObject(request);
  return request;
};
AdfDhtmlSearchSectionPeer._validateRequestObject = function(request) {
  if (request.method != "POST" || !request.body) {
    request.method = "GET";
    request.body = null;
  }
};

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlSuggestionsSectionPeer");
AdfDhtmlSuggestionsSectionPeer.InitSubclass = function() {
  this._HEADER_SUB_ID = "hdr";
  this._LIST_HEADER_STYLE_CLASS = "af|suggestionsSection::list-header";
  this._ROW_HEADER_STYLE_CLASS = "af|suggestionsSection::row-header";
};
AdfDhtmlSuggestionsSectionPeer.prototype.InitDomElement = function(component, element) {
  AdfDhtmlSuggestionsSectionPeer.superclass.InitDomElement.call(this, component, element);
  AdfDhtmlSuggestionsSectionPeer.__prepareTemplates(component);
  var inputSearch = component.getParent();
  var preferredSuggestions = AdfPreferredSuggestionsManager.get(inputSearch);
  if (preferredSuggestions) {
    inputSearch.getPeer().DerivePropsFromPrefSuggestions(inputSearch, preferredSuggestions);
  }
};
AdfDhtmlSuggestionsSectionPeer.prototype.getHeaderStyleClass = function(isTableMode) {
  return isTableMode ? AdfDhtmlSuggestionsSectionPeer._ROW_HEADER_STYLE_CLASS : AdfDhtmlSuggestionsSectionPeer._LIST_HEADER_STYLE_CLASS;
};
AdfDhtmlSuggestionsSectionPeer.appendHeader = function(component, suggestionsDomFragment, id) {
  var headerHtml = AdfDhtmlSuggestionsSectionPeer._getHeaderFacetContent(component);
  if (headerHtml) {
    var isTableMode = component.getParent().getContentMode() == AdfDhtmlInputSearchPeer.__CONTENT_MODE_TABLE;
    AdfSuggestionsPanel.appendHeader(isTableMode, headerHtml, suggestionsDomFragment, component.getPeer().getHeaderStyleClass(isTableMode), id);
  }
};
AdfDhtmlSuggestionsSectionPeer.hasHeader = function(component) {
  return !!AdfDhtmlSuggestionsSectionPeer._getHeaderFacetContent(component);
};
AdfDhtmlSuggestionsSectionPeer._getHeaderFacetContent = function(component) {
  var templateElem = AdfDhtmlSuggestionsSectionPeer._getHeaderFacetElement(component);
  if (templateElem) {
    return templateElem.innerHTML;
  }
};
AdfDhtmlSuggestionsSectionPeer._getHeaderFacetElement = function(component) {
  var clientId = component.getClientId();
  var templateId = AdfRichUIPeer.createSubId(clientId, AdfDhtmlSuggestionsSectionPeer._HEADER_SUB_ID);
  return AdfAgent.AGENT.getElementById(templateId);
};
AdfDhtmlSuggestionsSectionPeer.__prepareTemplates = function(component) {
  var headerFacet = AdfDhtmlSuggestionsSectionPeer._getHeaderFacetElement(component);
  if (headerFacet) {
    var inputSearch = component.getParent();
    var parsedTemplate = AdfInputSearchUtils.parseTemplate(headerFacet.innerHTML);
    headerFacet.innerHTML = inputSearch.getPeer().GetSuggestionsPanel().WrapSectionHeaderTemplate(inputSearch, component, parsedTemplate);
  }
};

function AdfInputSearchScrollManager(clientId, collection, container, dataBody, domFragmentGeneratorFunc, options) {
  this.Init(clientId, collection, container, dataBody, domFragmentGeneratorFunc, options);
}
AdfObject.createSubclass(AdfInputSearchScrollManager);
AdfInputSearchScrollManager.InitClass = function() {
  this._SCROLLER_SUB_ID = "scroller";
  this._SCROLL_TOP_EXPANDO = "data-afr-scrollTop";
  this._SUGGESTIONS_SCROLLER_STYLE_CLASS = "af|inputSearch::suggestions-scroller";
  this._SUGGESTIONS_STATUS_MESSAGE_STYLE_CLASS = "af|inputSearch::suggestions-status-message";
  this._LABEL_FETCHING = "af_inputSearch.LABEL_FETCHING";
};
AdfInputSearchScrollManager.prototype.Init = function(clientId, collection, container, dataBody, domFragmentGeneratorFunc, options) {
  AdfInputSearchScrollManager.superclass.Init.call(this);
  this._clientId = clientId;
  this._collection = collection;
  this._container = container;
  this._dataBody = dataBody;
  this._domFragmentGeneratorFunc = domFragmentGeneratorFunc;
  this._options = options;
  this._headerHeight = options.headerHeight ? options.headerHeight : 0;
  this._idPrefix = AdfSuggestionsPanel.getSuggestItemIdPrefix(clientId);
  this._setupScroller();
};
AdfInputSearchScrollManager.prototype.release = function() {
  if (this._scroller) {
    this._container.removeEventListener("scroll", this._arrowKeyNavigationHandle);
    this._dataBody.removeEventListener("wheel", this._mouseWheelHandle);
    this._scroller.removeEventListener("scroll", this._scrollHandle);
    this._arrowKeyNavigationHandle = null;
    this._mouseWheelHandle = null;
    this._scrollHandle = null;
    var paddingEnd = AdfPage.PAGE.getLocaleContext().isRightToLeft() ? "padding-left" : "padding-right";
    var containerStyle = this._container.style;
    containerStyle.removeProperty(paddingEnd);
    containerStyle.removeProperty("overflow");
    this._swipeMgr.release();
    this._swipeMgr = null;
  } else {
    if (this._infiniteScrollHandle) {
      this._container.removeEventListener("scroll", this._infiniteScrollHandle);
      this._infiniteScrollHandle = null;
    }
  }
  this._container.scrollTop = 0;
  this._container.removeAttribute(AdfInputSearchScrollManager._SCROLL_TOP_EXPANDO);
};
AdfInputSearchScrollManager.prototype.updateCollection = function(collection) {
  this._collection = collection;
  var scrollTop = this._scroller ? this._scroller.scrollTop : this._container.scrollTop;
  var notionalTopDisplayedItemIndex = this._getNotionalDataIndexFromScrollTop(scrollTop);
  var diff = this._getDataIndexFromElem(this._getLastDisplayedItem()) - notionalTopDisplayedItemIndex;
  if (diff < 100) {
    this._addMoreElements(AdfSuggestionsPanel.__SUGGESTIONS_RENDERING_CHUNK_SIZE);
  }
  if (!this._infiniteScrollHandle) {
    if (this._isDefaultScroller()) {
      this.release();
      this._setupScroller();
    }
    if (!this._isDefaultScroller()) {
      this._restoreScrollPos(notionalTopDisplayedItemIndex, scrollTop);
    }
  }
};
AdfInputSearchScrollManager.prototype.isElementHidden = function(element) {
  var container = this._container;
  var isAboveScrollableRegion = container.scrollTop + container.offsetTop + this._headerHeight > element.offsetTop;
  var isBelowScrollableRegion = container.scrollTop + container.offsetTop + container.offsetHeight < element.offsetTop + element.offsetHeight;
  return isAboveScrollableRegion || isBelowScrollableRegion;
};
AdfInputSearchScrollManager.prototype.scrollIntoView = function(element, alignToTop) {
  var container = this._container;
  if (alignToTop) {
    container.scrollTop = element.offsetTop - container.offsetTop - this._headerHeight;
  } else {
    container.scrollTop = element.offsetTop + element.offsetHeight - container.offsetTop - container.clientHeight;
  }
};
AdfInputSearchScrollManager.prototype._addMoreElements = function(size, atTop) {
  AdfAssert.assertNumber(size);
  var newItemStartIndex;
  if (atTop) {
    var firstElemInDom = this._getFirstDisplayedItem();
    var firstItemIndex = this._getDataIndexFromElem(firstElemInDom);
    if (firstItemIndex <= 0) {
      return;
    }
    var newItemStartIndex = firstItemIndex - size;
    if (newItemStartIndex < 0) {
      newItemStartIndex = 0;
      size = firstItemIndex;
    }
    var newElements = this._domFragmentGeneratorFunc(this._collection, this._options, false, newItemStartIndex, size);
    this._dataBody.insertBefore(newElements, firstElemInDom);
  } else {
    var lastElemInDom = this._getLastDisplayedItem();
    var lastItemIndex = this._getDataIndexFromElem(lastElemInDom);
    var newItemStartIndex = lastItemIndex + 1;
    var newElements = this._domFragmentGeneratorFunc(this._collection, this._options, false, newItemStartIndex, size);
    this._dataBody.appendChild(newElements);
  }
};
AdfInputSearchScrollManager.prototype._adjustScrollHeight = function(notionalTopDisplayedItemIndex) {
  var perItemHeight = this._getPerItemHeight();
  var totalHeight = this._getScrollerHeightInPx(perItemHeight);
  this._scroller.firstChild.style.height = totalHeight;
  AdfLogger.LOGGER.fine("Total height of the scroller adjusted to ", totalHeight);
  this._preventScrollerScrollEvent = notionalTopDisplayedItemIndex * perItemHeight;
  this._preventScrollerScrollEvent = this._preventScrollerScrollEvent < 0 ? 0 : Math.round(this._preventScrollerScrollEvent);
};
AdfInputSearchScrollManager.prototype._adjustScrollPos = function(notionalTopDisplayedItemIndex) {
  AdfLogger.LOGGER.fine("Adjusting the scroll position to item index ", notionalTopDisplayedItemIndex);
  this._adjustScrollHeight(notionalTopDisplayedItemIndex);
  AdfLogger.LOGGER.fine("Scroll top adjusted to ", this._preventScrollerScrollEvent);
  this._scroller.scrollTop = this._preventScrollerScrollEvent;
};
AdfInputSearchScrollManager.prototype._restoreScrollPos = function(notionalTopDisplayedItemIndex, scrollPos) {
  this._adjustScrollHeight(notionalTopDisplayedItemIndex);
  this._scroller.scrollTop = scrollPos;
};
AdfInputSearchScrollManager.prototype._arrowKeyNavigation = function(event) {
  var newScrollTop = this._container.scrollTop;
  var oldScrollTop = this._container.getAttribute(AdfInputSearchScrollManager._SCROLL_TOP_EXPANDO);
  oldScrollTop = oldScrollTop ? oldScrollTop : 0;
  this._container.setAttribute(AdfInputSearchScrollManager._SCROLL_TOP_EXPANDO, newScrollTop);
  var topDisplayedElementIndex;
  if (this._preventContainerScrollEvent && newScrollTop == this._preventContainerScrollEvent.containerScrollTop) {
    topDisplayedElementIndex = this._preventContainerScrollEvent.notionalTopDisplayedItemIndex;
    this._preventContainerScrollEvent = null;
  }
  if (topDisplayedElementIndex == null) {
    var topDisplayedElement = this._dataBody.querySelector("." + AdfRichUIPeer.SELECTED_STYLECLASS);
    if (!topDisplayedElement) {
      return;
    }
    topDisplayedElementIndex = this._getDataIndexFromElem(topDisplayedElement);
  }
  AdfAssert.assert(topDisplayedElementIndex != null);
  AdfLogger.LOGGER.fine("Scrolled into view of element with index ", topDisplayedElementIndex);
  var deltaScroll = newScrollTop - oldScrollTop;
  var diff = deltaScroll > 0 ? this._getDataIndexFromElem(this._getLastDisplayedItem()) - topDisplayedElementIndex : topDisplayedElementIndex - this._getDataIndexFromElem(this._getFirstDisplayedItem());
  if (diff < 100) {
    this._addMoreElements(AdfSuggestionsPanel.__SUGGESTIONS_RENDERING_CHUNK_SIZE, deltaScroll < 0);
  }
  this._adjustScrollPos(topDisplayedElementIndex);
};
AdfInputSearchScrollManager.prototype._delayedCallback = function(callback, param) {
  var page = AdfPage.PAGE;
  var time = 150;
  if (this._isScrolling) {
    page.rescheduleTimer(this._isScrolling, time);
  } else {
    this._isScrolling = page.scheduleTimer(this, callback, param, time, {"isSynchronized":true});
  }
};
AdfInputSearchScrollManager.prototype._getDataIndexFromElem = function(element) {
  AdfAssert.assertDomElement(element);
  return parseInt(element.id.substring(this._idPrefix.length));
};
AdfInputSearchScrollManager.prototype._isHeaderOrSuggestItem = function(elem) {
  var id = elem.getAttribute("id");
  return id && id.indexOf(this._idPrefix) === 0;
};
AdfInputSearchScrollManager.prototype._getFirstDisplayedItem = function() {
  var firstChild = this._dataBody.firstElementChild;
  while (!this._isHeaderOrSuggestItem(firstChild)) {
    firstChild = firstChild.nextElementSibling;
  }
  return firstChild;
};
AdfInputSearchScrollManager.prototype._getLastDisplayedItem = function() {
  var lastChild = this._dataBody.lastElementChild;
  while (!this._isHeaderOrSuggestItem(lastChild)) {
    lastChild = lastChild.previousElementSibling;
  }
  return lastChild;
};
AdfInputSearchScrollManager.prototype._getNotionalDataIndexFromScrollTop = function(scrollTop) {
  var dataIndex = Math.round(scrollTop / this._getPerItemHeight());
  if (dataIndex > this._collection.inclusiveHeaderLength || this._scroller && scrollTop + this._scroller.offsetHeight >= this._scroller.scrollHeight) {
    dataIndex = this._collection.inclusiveHeaderLength - 1;
  }
  return dataIndex;
};
AdfInputSearchScrollManager.prototype._getNotionalElemCountFromScrollChange = function(deltaScroll) {
  return Math.round(deltaScroll / this._getPerItemHeight());
};
AdfInputSearchScrollManager.prototype._getElementFromDataIndex = function(index) {
  if (index < 0) {
    index = 0;
  } else {
    if (index > this._collection.inclusiveHeaderLength) {
      index = this._collection.inclusiveHeaderLength - 1;
    }
  }
  return document.getElementById(this._idPrefix + index);
};
AdfInputSearchScrollManager.prototype._getPerItemHeight = function() {
  var childCount = this._dataBody.children.length;
  childCount = this._headerHeight === 0 ? childCount : childCount - 1;
  return (this._dataBody.offsetHeight - this._headerHeight) / childCount;
};
AdfInputSearchScrollManager.prototype._getScrollerHeightInPx = function(perItemHeight) {
  perItemHeight = perItemHeight ? perItemHeight : this._getPerItemHeight();
  return perItemHeight * this._collection.inclusiveHeaderLength + this._headerHeight + "px";
};
AdfInputSearchScrollManager.prototype._infiniteScroll = function(event) {
  this._delayedCallback(this._infiniteScrollComplete);
};
AdfInputSearchScrollManager.prototype._infiniteScrollComplete = function() {
  this._isScrolling = null;
  var oldScrollTop = this._container.getAttribute(AdfInputSearchScrollManager._SCROLL_TOP_EXPANDO);
  oldScrollTop = oldScrollTop ? oldScrollTop : 0;
  var newScrollTop = this._container.scrollTop;
  this._container.setAttribute(AdfInputSearchScrollManager._SCROLL_TOP_EXPANDO, newScrollTop);
  var deltaScroll = newScrollTop - oldScrollTop;
  if (deltaScroll > 0) {
    this._addMoreElements(this._getNotionalElemCountFromScrollChange(deltaScroll));
  }
};
AdfInputSearchScrollManager.prototype._longJump = function() {
  this._isScrolling = null;
  this._scrollMessage.style.display = "none";
  if (this._dataBody.offsetHeight == 0) {
    return;
  }
  var scrollTop = this._scroller.scrollTop;
  var newNotionalItemIndex = this._getNotionalDataIndexFromScrollTop(scrollTop);
  AdfLogger.LOGGER.fine("Long Jump, the item index is ", newNotionalItemIndex, ", derived from the scroll top ", scrollTop);
  var startIndex = newNotionalItemIndex - AdfSuggestionsPanel.__SUGGESTIONS_RENDERING_CHUNK_SIZE / 2;
  var itemsFragment = this._domFragmentGeneratorFunc(this._collection, this._options, true, startIndex);
  var newDataBody = this._dataBody.cloneNode(false);
  newDataBody.appendChild(itemsFragment);
  this._container.replaceChild(newDataBody, this._dataBody);
  this._dataBody.removeEventListener("wheel", this._mouseWheelHandle);
  this._dataBody = newDataBody;
  this._dataBody.addEventListener("wheel", this._mouseWheelHandle);
  var element = this._getElementFromDataIndex(newNotionalItemIndex);
  if (element) {
    this._preventContainerScrollEvent = {};
    this._preventContainerScrollEvent.notionalTopDisplayedItemIndex = newNotionalItemIndex;
    this.scrollIntoView(element, true);
    this._preventContainerScrollEvent.containerScrollTop = this._container.scrollTop;
  }
};
AdfInputSearchScrollManager.prototype._mouseWheel = function(event) {
  AdfAgent.AGENT.eatEvent(event);
  AdfLogger.LOGGER.fine("Mouse wheel triggered with deltaY ", event.deltaY);
  this._scroller.scrollTop += event.deltaY;
};
AdfInputSearchScrollManager.prototype._panning = function(event) {
  var deltaY = event.deltaY;
  deltaY *= -1;
  this._scroller.scrollTop += deltaY;
};
AdfInputSearchScrollManager.prototype._swipe = function(event) {
  var deltaY = event.deltaY;
  deltaY *= -1;
  var count = 20;
  var chunkedDelta = deltaY * event.velocity / count;
  var self = this;
  function velocityScroll() {
    if (count-- > 0 && self._scroller) {
      self._scroller.scrollTop += chunkedDelta;
      requestAnimationFrame(velocityScroll);
    }
  }
  requestAnimationFrame(velocityScroll);
};
AdfInputSearchScrollManager.prototype._scroll = function(event) {
  var newScrollTop = this._scroller.scrollTop;
  if (newScrollTop == this._preventScrollerScrollEvent) {
    return;
  }
  var newNotionalItemIndex = this._getNotionalDataIndexFromScrollTop(newScrollTop);
  var topDisplayedElement = this._getElementFromDataIndex(newNotionalItemIndex);
  if (topDisplayedElement) {
    AdfLogger.LOGGER.fine("Small scroll, the item index is ", newNotionalItemIndex, ", derived from the scroll top ", newScrollTop, ". The corresponding element is ", topDisplayedElement.id);
    this._preventContainerScrollEvent = {};
    this._preventContainerScrollEvent.notionalTopDisplayedItemIndex = newNotionalItemIndex;
    this.scrollIntoView(topDisplayedElement, true);
    this._preventContainerScrollEvent.containerScrollTop = this._container.scrollTop;
  } else {
    this._scrollMessage.style.display = "block";
    this._delayedCallback(this._longJump);
  }
};
AdfInputSearchScrollManager.prototype._isDefaultScroller = function() {
  return this._scroller == null;
};
AdfInputSearchScrollManager.prototype._setupScroller = function() {
  var isTouchOnly = AdfAgent.AGENT.isTouchFirstDevice();
  if (isTouchOnly) {
    this._infiniteScrollHandle = this.createCallback(this._infiniteScroll);
    this._container.addEventListener("scroll", this._infiniteScrollHandle);
    return;
  }
  var needScroller = this._container.clientHeight < this._dataBody.offsetHeight && this._collection.length > AdfSuggestionsPanel.__SUGGESTIONS_RENDERING_CHUNK_SIZE;
  if (needScroller) {
    this._container.scrollTop = 0;
    var page = AdfPage.PAGE;
    var laf = page.getLookAndFeel();
    this._scroller = document.createElement("div");
    this._scroller.setAttribute("id", AdfRichUIPeer.createSubId(this._clientId, AdfInputSearchScrollManager._SCROLLER_SUB_ID));
    AdfDomUtils.addCSSClassName(this._scroller, laf.getStyleClass(AdfInputSearchScrollManager._SUGGESTIONS_SCROLLER_STYLE_CLASS));
    var fakeContent = document.createElement("div");
    AdfDomUtils.addInlineStyle(fakeContent, "visibility: hidden");
    fakeContent.style.height = this._getScrollerHeightInPx();
    this._scrollMessage = document.createElement("div");
    AdfDomUtils.addCSSClassName(this._scrollMessage, laf.getStyleClass(AdfInputSearchScrollManager._SUGGESTIONS_STATUS_MESSAGE_STYLE_CLASS));
    this._scrollMessage.textContent = laf.getTranslatedString(AdfInputSearchScrollManager._LABEL_FETCHING);
    this._scroller.appendChild(fakeContent);
    this._container.appendChild(this._scroller);
    this._container.appendChild(this._scrollMessage);
    var paddingEnd = page.getLocaleContext().isRightToLeft() ? "padding-left" : "padding-right";
    var containerStyle = this._container.style;
    containerStyle.setProperty(paddingEnd, this._scroller.offsetWidth - this._scroller.clientWidth + "px");
    containerStyle.setProperty("overflow", "hidden");
    this._arrowKeyNavigationHandle = this.createCallback(this._arrowKeyNavigation);
    this._mouseWheelHandle = this.createCallback(this._mouseWheel);
    this._scrollHandle = this.createCallback(this._scroll);
    this._container.addEventListener("scroll", this._arrowKeyNavigationHandle);
    this._dataBody.addEventListener("wheel", this._mouseWheelHandle);
    this._scroller.addEventListener("scroll", this._scrollHandle);
    var callbacks = {};
    callbacks[AdfSwipeSupport.PANNING_CALLBACK] = this.createCallback(this._panning);
    callbacks[AdfSwipeSupport.SWIPE_CALLBACK] = this.createCallback(this._swipe);
    var options = {};
    options[AdfSwipeSupport.MODE] = AdfSwipeSupport.MODE_VERTICAL;
    this._swipeMgr = new AdfSwipeSupport(this._container, callbacks, options);
  }
};

var AdfInputSearchUtils = {};
AdfInputSearchUtils.UNIQUE_MARKER = "\u19e6\u1391";
AdfInputSearchUtils._CONTENT_CONTAINER_SUB_ID = "cntnr";
AdfInputSearchUtils._SELECTIONS_BUTTON_SUBID = "selBtn";
AdfInputSearchUtils._SEARCH_SECTION_CONTAINER_SUB_ID = "srchSecCntnr";
AdfInputSearchUtils.cloneSimpleObject = function(object) {
  var copyObject = {};
  var keys = Object.keys(object);
  for (var i = 0;i < keys.length;i++) {
    copyObject[keys[i]] = object[keys[i]];
  }
  return copyObject;
};
AdfInputSearchUtils.escapeRegexChars = function(regexStr) {
  var escapedStr = "";
  for (var i = 0, len = regexStr.length;i < len;i++) {
    switch(regexStr[i]) {
      case "\\":
        escapedStr += "\\\\";
        break;
      case "[":
        escapedStr += "\\[";
        break;
      case "]":
        escapedStr += "\\]";
        break;
      case ".":
        escapedStr += "\\.";
        break;
      case "(":
        escapedStr += "\\(";
        break;
      case ")":
        escapedStr += "\\)";
        break;
      case "|":
        escapedStr += "\\|";
        break;
      case "?":
        escapedStr += "\\?";
        break;
      case "*":
        escapedStr += "\\*";
        break;
      case "+":
        escapedStr += "\\+";
        break;
      case "{":
        escapedStr += "\\{";
        break;
      case "}":
        escapedStr += "\\}";
        break;
      case "$":
        escapedStr += "\\$";
        break;
      case "^":
        escapedStr += "\\^";
        break;
      default:
        escapedStr += regexStr[i];
    }
  }
  return escapedStr;
};
AdfInputSearchUtils.getFunction = function(functionName) {
  var context = window;
  var namespaces = functionName.split(".");
  var func = namespaces.pop();
  for (var i = 0;i < namespaces.length;i++) {
    context = context[namespaces[i]];
  }
  return context[func];
};
AdfInputSearchUtils.getLabelId = function(component) {
  return AdfRichUIPeer.createSubId(component.getClientId(), "label");
};
AdfInputSearchUtils.getDefaultSearchSection = function(component) {
  return component.getSearchSections()[AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT];
};
AdfInputSearchUtils.getSuggestionsSection = function(component) {
  var suggestionsSection = AdfInputSearchUtils.getChildrenSection(component, AdfRichSuggestionsSection);
  return suggestionsSection.length == 0 ? null : suggestionsSection[0];
};
AdfInputSearchUtils.isReadOnlyOrDisabled = function(component) {
  return component.getReadOnly() || component.getDisabled();
};
AdfInputSearchUtils.mapKeys = function(map) {
  var keys = [];
  var forEachFunc = function(value, key, map) {
    keys.push(key);
  };
  if (map) {
    map.forEach(forEachFunc);
  }
  return keys;
};
AdfInputSearchUtils.mapValues = function(map) {
  var values = [];
  var forEachFunc = function(value, key, map) {
    if (value) {
      values.push(value);
    }
  };
  if (map) {
    map.forEach(forEachFunc);
  }
  return values;
};
AdfInputSearchUtils.parseTemplate = function(sanitizedDomStr) {
  var markerTagRe = /<nested_script type="text\/plain" id=.*?><\/nested_script>/g;
  sanitizedDomStr = sanitizedDomStr.replace(markerTagRe, "");
  return sanitizedDomStr;
};
AdfInputSearchUtils.showFacesMessage = function(component, messageType, summaryKey, detailKey) {
  var page = AdfPage.PAGE;
  var clientId = component.getClientId();
  page.clearMessages(clientId);
  var laf = page.getLookAndFeel();
  var summary = laf.getTranslatedString(summaryKey);
  var detail = laf.getTranslatedString(detailKey);
  var message = new AdfFacesMessage(messageType, summary, detail);
  page.addMessage(clientId, message);
  component.setProperty("valid", false);
  component.focus();
};
AdfInputSearchUtils.splitAndSort = function(str) {
  var list = str.split(" ");
  list.sort(function(a, b) {
    return b.length - a.length;
  });
  return list;
};
AdfInputSearchUtils.getChildrenSection = function(component, clazz) {
  var page = AdfPage.PAGE;
  var searchSectionContainerId = AdfRichUIPeer.createSubId(component.getClientId(), AdfInputSearchUtils._SEARCH_SECTION_CONTAINER_SUB_ID);
  var childElement = AdfAgent.AGENT.getElementById(searchSectionContainerId).firstElementChild;
  var sections = [];
  var defaultSection;
  while (childElement) {
    var childComponent = page.findComponent(childElement.id);
    if (childComponent instanceof clazz) {
      var type = childComponent.getType && childComponent.getType();
      if (type == AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT) {
        defaultSection = childComponent;
      } else {
        sections.push(childComponent);
      }
    }
    childElement = childElement.nextElementSibling;
  }
  if (defaultSection) {
    sections.push(defaultSection);
  }
  return sections;
};
AdfInputSearchUtils.getContentContainer = function(component) {
  var contentContainerId = AdfRichUIPeer.createSubId(component.getClientId(), AdfInputSearchUtils._CONTENT_CONTAINER_SUB_ID);
  return document.getElementById(contentContainerId);
};
AdfInputSearchUtils.getSelectionsButton = function(component) {
  var selectionsToggleId = AdfRichUIPeer.createSubId(component.getClientId(), AdfInputSearchUtils._SELECTIONS_BUTTON_SUBID);
  return document.getElementById(selectionsToggleId);
};

function AdfToolbarPanel(peer) {
  this.Init(peer);
}
AdfObject.createSubclass(AdfToolbarPanel);
AdfToolbarPanel.InitClass = function() {
  this._TOOLBAR_CONTAINER_SUB_ID = "tbr";
  this._TOOLBAR_CONTAINER_PLACEHOLDER_SUB_ID = "tbrph";
};
AdfToolbarPanel.prototype.Init = function(peer) {
  AdfToolbarPanel.superclass.Init.call(this);
  this._peer = peer;
};
AdfToolbarPanel.prototype.attach = function(component, suggestionsPopup) {
  var toolbarContainer = AdfToolbarPanel._getToolbarContainer(component);
  if (!toolbarContainer) {
    return;
  }
  suggestionsPopup.appendChild(toolbarContainer);
  this._manageFocusCallback = this.createCallback(this._manageFocusInToolbarFacet);
  AdfAgent.AGENT.addBubbleEventListener(toolbarContainer, "keydown", this._manageFocusCallback);
};
AdfToolbarPanel.prototype.detach = function(component) {
  var toolbarPlaceholder = document.getElementById(AdfRichUIPeer.createSubId(component.getClientId(), AdfToolbarPanel._TOOLBAR_CONTAINER_PLACEHOLDER_SUB_ID));
  if (toolbarPlaceholder) {
    var toolbarContainer = AdfToolbarPanel._getToolbarContainer(component);
    toolbarPlaceholder.appendChild(toolbarContainer);
    var agent = AdfAgent.AGENT;
    agent.removeBubbleEventListener(toolbarContainer, "keydown", this._manageFocusCallback);
  }
};
AdfToolbarPanel.prototype.handleKeyDown = function(componentEvent, contentNode) {
  this._moveFocusToToolbarFacet(this._peer.getComponent(), componentEvent, contentNode);
};
AdfToolbarPanel._getToolbarContainer = function(component) {
  var clientId = component.getClientId();
  return document.getElementById(AdfRichUIPeer.createSubId(clientId, AdfToolbarPanel._TOOLBAR_CONTAINER_SUB_ID));
};
AdfToolbarPanel.prototype._manageFocusInToolbarFacet = function(event) {
  var peer = this._peer;
  var component = peer.getComponent();
  var keyCode = AdfAgent.AGENT.getKeyCode(event);
  var toolbarContainer = AdfToolbarPanel._getToolbarContainer(component);
  if (!toolbarContainer) {
    return;
  }
  if (keyCode == AdfKeyStroke.TAB_KEY) {
    var firstTabStop = AdfFocusUtils.getFirstTabStop(toolbarContainer);
    var nextTabStop = AdfFocusUtils.getNextTabStop(document.activeElement);
    var isLastStop = event.shiftKey ? firstTabStop == document.activeElement : nextTabStop == null || nextTabStop == document.body;
    if (isLastStop) {
      var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, peer.getDomElement());
      if (event.shiftKey) {
        AdfFocusUtils.focusElement(contentNode);
      } else {
        AdfFocusUtils.focusNextTabStop(contentNode);
        peer.RunValidation(component, contentNode, true);
      }
      AdfAgent.AGENT.eatEvent(event);
    }
    return;
  }
  if (keyCode == AdfKeyStroke.ARROWLEFT_KEY) {
    var firstTabStop = AdfFocusUtils.getFirstFocusableDescendant(toolbarContainer);
    if (document.activeElement == firstTabStop) {
      AdfAgent.AGENT.eatEvent(event);
    }
  }
};
AdfToolbarPanel.prototype._moveFocusToToolbarFacet = function(component, componentEvent, contentNode) {
  var keyCode = componentEvent.getKeyCode();
  var toolbarContainer = AdfToolbarPanel._getToolbarContainer(component);
  if (keyCode == AdfKeyStroke.TAB_KEY && toolbarContainer) {
    var eventTarget = componentEvent.getNativeEventTarget();
    if (eventTarget == contentNode) {
      if (!componentEvent.getNativeEvent().shiftKey) {
        var firstTabStop = AdfFocusUtils.getFirstTabStop(toolbarContainer);
        if (firstTabStop) {
          componentEvent.cancel();
          AdfFocusUtils.focusElement(firstTabStop);
        }
      }
    }
  }
};

function AdfSuggestionsContainer(peer) {
  this.Init(peer);
}
AdfObject.createSubclass(AdfSuggestionsContainer);
AdfSuggestionsContainer.InitClass = function() {
  this._LOADING_INDICATOR_SUB_ID = "loadingIndicator";
  this._SUGGESTIONS_CONTAINER_SUB_ID = "sgstnCntnr";
  this._SUGGESTIONS_CONTAINER_PLACEHOLDER_SUB_ID = "scph";
  this._LOADING_INDICATOR_STYLE_CLASS = "af|inputSearch::loading-indicator";
};
AdfSuggestionsContainer.prototype.Init = function(peer) {
  AdfSuggestionsContainer.superclass.Init.call(this);
  this._peer = peer;
};
AdfSuggestionsContainer.getElement = function(component) {
  var clientId = component.getClientId();
  var suggestionsContainerId = AdfRichUIPeer.createSubId(clientId, AdfSuggestionsContainer._SUGGESTIONS_CONTAINER_SUB_ID);
  var suggestionsContainer = document.getElementById(suggestionsContainerId);
  AdfAssert.assertDomElement(suggestionsContainer);
  return suggestionsContainer;
};
AdfSuggestionsContainer.setHeight = function(component, height) {
  if (height < 62) {
    height = 62;
  }
  var suggestionsContainer = AdfSuggestionsContainer.getElement(component);
  suggestionsContainer.style.maxHeight = height;
};
AdfSuggestionsContainer.showSuggestions = function(component, suggestionsPanel, suggestionsContainer) {
  if (!suggestionsContainer) {
    suggestionsContainer = AdfSuggestionsContainer.getElement(component);
  }
  suggestionsContainer.replaceChild(suggestionsPanel, suggestionsContainer.firstElementChild);
};
AdfSuggestionsContainer.needsUpdate = function(component) {
  return AdfSuggestionsContainer._getLoadingIndicator(component) != null || AdfSuggestionsPanel.hasPartialDisplayedList(component);
};
AdfSuggestionsContainer.prototype.attach = function(component, suggestionsPopup) {
  var suggestionsContainer = AdfSuggestionsContainer.getElement(component);
  AdfSuggestionsContainer._initWidth(component, suggestionsContainer);
  AdfSuggestionsContainer._renderLoadingIndicator(component, suggestionsContainer);
  var suggestionsScrollContent = document.createElement("div");
  suggestionsScrollContent.setAttribute("style", "position: relative");
  suggestionsScrollContent.appendChild(suggestionsContainer);
  suggestionsPopup.appendChild(suggestionsScrollContent);
};
AdfSuggestionsContainer.prototype.detach = function(component, contentNode, suggestionsPanel, underAutocompletion) {
  var suggestionsContainer = AdfSuggestionsContainer.getElement(component);
  var suggestionsContainerPlaceholder = document.getElementById(AdfRichUIPeer.createSubId(component.getClientId(), AdfSuggestionsContainer._SUGGESTIONS_CONTAINER_PLACEHOLDER_SUB_ID));
  suggestionsContainerPlaceholder.appendChild(suggestionsContainer);
  AdfSuggestionsContainer._clear(contentNode, suggestionsContainer, suggestionsPanel, underAutocompletion);
};
AdfSuggestionsContainer.prototype.reset = function(component, contentNode, suggestionsPanel) {
  var suggestionsContainer = AdfSuggestionsContainer.getElement(component);
  var containerWidth = suggestionsContainer.offsetWidth;
  var containerHeight = suggestionsContainer.offsetHeight;
  AdfSuggestionsContainer._clear(contentNode, suggestionsContainer, suggestionsPanel);
  AdfSuggestionsContainer._renderLoadingIndicator(component, suggestionsContainer, containerWidth, containerHeight);
};
AdfSuggestionsContainer._clear = function(contentNode, suggestionsContainer, suggestionsPanel, underAutocompletion) {
  suggestionsPanel.clear(contentNode, underAutocompletion);
  suggestionsContainer.innerHTML = "";
};
AdfSuggestionsContainer._initWidth = function(component, suggestionsContainer) {
  var contentContainer = AdfInputSearchUtils.getContentContainer(component);
  AdfDomUtils.addInlineStyle(suggestionsContainer, "min-width:" + contentContainer.offsetWidth + "px;");
};
AdfSuggestionsContainer._getLoadingIndicator = function(component) {
  var clientId = component.getClientId();
  var busyDivClientId = AdfRichUIPeer.createSubId(clientId, AdfSuggestionsContainer._LOADING_INDICATOR_SUB_ID);
  return document.getElementById(busyDivClientId);
};
AdfSuggestionsContainer._renderLoadingIndicator = function(component, container, width, height) {
  var clientId = component.getClientId();
  var laf = AdfPage.PAGE.getLookAndFeel();
  var busyDiv = document.createElement("div");
  var busyDivClientId = AdfRichUIPeer.createSubId(clientId, AdfSuggestionsContainer._LOADING_INDICATOR_SUB_ID);
  busyDiv.setAttribute("id", busyDivClientId);
  var busySelector = laf.getStyleClass(AdfSuggestionsContainer._LOADING_INDICATOR_STYLE_CLASS);
  AdfDomUtils.addCSSClassName(busyDiv, busySelector);
  var busyStyle = busyDiv.style;
  if (width) {
    busyStyle.minWidth = width - 1 + "px";
  }
  if (height) {
    busyStyle.minHeight = height - 1 + "px";
  }
  container.appendChild(busyDiv);
};

function AdfSuggestionsPanel(peer) {
  AdfAssert.failedInAbstractFunction();
}
AdfObject.createSubclass(AdfSuggestionsPanel);
AdfSuggestionsPanel.InitClass = function() {
  this._VALUE_ATTRIBUTE_EXPANDO = "data-afr-value";
  this._NO_SUGGESTIONS_MESSAGE_STYLE_CLASS = "af|inputSearch::no-suggestions-message";
  this._SERVER_FILTERING_STYLE_CLASS = "af|inputSearch::server-filtering-indicator";
  this._LIST_ITEMS_CONTAINER_STYLE_CLASS = "af|inputSearch::list-items-container";
  this._ROW_ITEMS_CONTAINER_STYLE_CLASS = "af|inputSearch::row-items-container";
  this._SUGGESTION_LIST_ITEM_STYLE_CLASS = "af|inputSearch::suggestion-list-item";
  this._SUGGESTION_ROW_HEADER_STYLE_CLASS = "af|inputSearch::suggestion-row-header";
  this._SUGGESTION_ROW_ITEM_STYLE_CLASS = "af|inputSearch::suggestion-row-item";
  this._SUGGESTION_ITEM_MATCHING_TEXT_STYLE_CLASS = "af|inputSearch::suggestion-item-matching-text";
  this._ACTIVE_CELL_ID = "afr-active";
  this._CONTENT_STAMP_SUB_ID = "cntStmp";
  this._CONTENT_HEADER_SUB_ID = "cntHdr";
  this._CONTENT_HEADER_ROW_SUB_ID = "cntHdrRow";
  this._SERVER_FILTERING_INDICATOR_SUB_ID = "serverFilteringIndicator";
  this._SUGGEST_ITEM_SUB_ID = "item";
  this._SUGGESTIONS_BODY_SUB_ID = "sgstnBdy";
  this._LABEL_FETCHING = "af_inputSearch.LABEL_FETCHING";
  this._LABEL_NO_DATA = "af_inputSearch.LABEL_NO_DATA";
  this._LABEL_NO_MATCHES = "af_inputSearch.LABEL_NO_MATCHES";
  this._SUGGESTIONS_COUNT_MSG = "af_inputSearch.SUGGESTIONS_COUNT_MSG";
  this._SUGGESTIONS_MERGED_MSG = "af_inputSearch.SUGGESTIONS_MERGED_MSG";
  this._POPUP_RESIZE_TIME = 151;
  this.__SUGGESTIONS_RENDERING_CHUNK_SIZE = 300;
};
AdfSuggestionsPanel.prototype.Init = function(peer) {
  AdfSuggestionsPanel.superclass.Init.call(this);
  this._peer = peer;
  var component = peer.getComponent();
  if (AdfInputSearchUtils.isReadOnlyOrDisabled(component)) {
    return;
  }
  this._prepareTemplates(component);
};
AdfSuggestionsPanel.appendHeader = function(isTableMode, headerHtml, suggestionsDomFragment, styleClass, id) {
  var listElementName = isTableMode ? "tr" : "li";
  var headerItem = document.createElement(listElementName);
  if (id) {
    headerItem.setAttribute("id", id);
  }
  AdfDomUtils.addCSSClassName(headerItem, AdfPage.PAGE.getLookAndFeel().getStyleClass(styleClass));
  if (!isTableMode) {
    headerItem.setAttribute("role", "presentation");
  } else {
    headerItem.setAttribute("role", "row");
  }
  headerItem.innerHTML = headerHtml;
  suggestionsDomFragment.appendChild(headerItem);
};
AdfSuggestionsPanel.getSuggestItemIdPrefix = function(clientId) {
  return AdfRichUIPeer.createSubId(clientId, AdfSuggestionsPanel._SUGGEST_ITEM_SUB_ID);
};
AdfSuggestionsPanel.getSuggestionElement = function(element, rootElement) {
  while (element != document.body && !AdfSuggestionsPanel.IsSuggestItem(element) && element != rootElement) {
    element = element.parentNode;
  }
  if (AdfSuggestionsPanel.IsSuggestItem(element)) {
    return element;
  } else {
    return null;
  }
};
AdfSuggestionsPanel.hasPartialDisplayedList = function(component) {
  return AdfSuggestionsPanel._getPartialSuggestionsLoadingIndicator(component) != null;
};
AdfSuggestionsPanel.prototype.clear = function(contentNode, underAutocompletion) {
  if (contentNode) {
    contentNode.removeAttribute("aria-activedescendant");
  }
  if (!underAutocompletion) {
    this._setDisplayedSuggestions(null);
  }
  if (this._scrollManager) {
    this._scrollManager.release();
    this._scrollManager = null;
  }
};
AdfSuggestionsPanel.getSuggestionsBodyId = function(component) {
  return AdfRichUIPeer.createSubId(component.getClientId(), AdfSuggestionsPanel._SUGGESTIONS_BODY_SUB_ID);
};
AdfSuggestionsPanel.removePartialSuggestionsLoadingIndicator = function(component, dontRemove) {
  var busyDiv = AdfSuggestionsPanel._getPartialSuggestionsLoadingIndicator(component);
  if (!busyDiv) {
    return false;
  }
  if (dontRemove) {
    return true;
  }
  var suggestionsBody = AdfSuggestionsPanel._getSuggestionsBody(component);
  suggestionsBody.removeChild(busyDiv);
  return true;
};
AdfSuggestionsPanel.prototype.getDisplayedSuggestions = function() {
  return this._displayedSuggestions;
};
AdfSuggestionsPanel.prototype._setDisplayedSuggestions = function(suggestions) {
  this._displayedSuggestions = suggestions;
};
AdfSuggestionsPanel.prototype.render = function(component, suggestions, renderingContext) {
  if (!renderingContext) {
    renderingContext = {};
  }
  if (this._renderPartialSuggestionsList(component, suggestions, renderingContext)) {
    AdfPage.PAGE.__perfTimings(false, false, true, "inputSearch: suggestions popup update done: id\x3d", component.getClientId());
    return;
  }
  var shouldHighlight = !!renderingContext.shouldHighlight;
  var isPreferredList = !!renderingContext.isPreferredList;
  var isPartialList = !!renderingContext.isPartialList;
  var chainedSuggestionsMap = new AdfChainSuggestionsMap;
  chainedSuggestionsMap.addSuggestionMap(suggestions, renderingContext.source);
  this._setDisplayedSuggestions(chainedSuggestionsMap);
  if (chainedSuggestionsMap.length === 0) {
    if (!isPartialList) {
      AdfSuggestionsPanel._renderNoSuggestionsMessage(component, shouldHighlight);
    }
    AdfPage.PAGE.__perfTimings(false, false, true, "inputSearch: suggestions popup update done: id\x3d", component.getClientId());
    return;
  }
  var page = AdfPage.PAGE;
  page.announceToAssistiveTechnology(page.getLookAndFeel().getTranslatedString(AdfSuggestionsPanel._SUGGESTIONS_COUNT_MSG, chainedSuggestionsMap.length));
  var options = {};
  options.suggestions = chainedSuggestionsMap;
  options.shouldHighlight = shouldHighlight;
  var suggestionsDomFragment = this._createSuggestionsDomFragment(chainedSuggestionsMap, options, true, 0);
  var suggestionsBody = AdfSuggestionsPanel._getSuggestionsBody(component);
  if (component.getContentMode() == AdfDhtmlInputSearchPeer.__CONTENT_MODE_TABLE) {
    suggestionsBody.setAttribute("aria-rowcount", chainedSuggestionsMap.length);
  }
  suggestionsBody.appendChild(suggestionsDomFragment);
  if (isPartialList) {
    AdfSuggestionsPanel._renderServerLoadingIndicator(component, suggestionsBody);
  }
  var suggestionsContainer = AdfSuggestionsContainer.getElement(component);
  AdfSuggestionsContainer.showSuggestions(component, suggestionsBody, suggestionsContainer);
  page.scheduleTimer(this, this._adjustPopupDimensions, chainedSuggestionsMap, AdfSuggestionsPanel._POPUP_RESIZE_TIME, {"isSynchronized":true});
  page.__perfTimings(false, false, true, "inputSearch: suggestions popup update done: id\x3d", component.getClientId());
  if (this._scrollManager) {
    this._scrollManager.release();
  }
  options.headerHeight = AdfSuggestionsPanel._getContentHeaderHeight(component, suggestionsBody);
  this._scrollManager = new AdfInputSearchScrollManager(component.getClientId(), chainedSuggestionsMap, suggestionsContainer, suggestionsBody, this.createCallback(this._createSuggestionsDomFragment), options);
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, component.getPeer().getDomElement());
  this._selectNewItem(component, contentNode, true);
};
AdfSuggestionsPanel.prototype.update = function(component, suggestions, isMasterList) {
  var templateAttributes = this._getTemplateAttributes();
  var template = this._getContentStampTemplate();
  var selectedTemplate = this.GetSelectedItemTemplate(template);
  var suggestionsBody = AdfSuggestionsPanel._getSuggestionsBody(component);
  var suggestionElem = suggestionsBody.firstElementChild;
  while (!AdfSuggestionsPanel.IsSuggestItem(suggestionElem)) {
    suggestionElem = suggestionElem.nextElementSibling;
  }
  var positionAttr = component.getContentMode() == AdfDhtmlInputSearchPeer.__CONTENT_MODE_TABLE ? "aria-rowindex" : "aria-posinset";
  var idPrefix = AdfSuggestionsPanel.getSuggestItemIdPrefix(component.getClientId());
  var displayedSuggestions = this._displayedSuggestions.getSuggestionMap(0).getArray();
  for (var i = 0, index = 0, indexMismatch = false, len = displayedSuggestions.length;i < len && suggestionElem;i++) {
    var value = AdfSuggestionsPanel.GetValueFromItem(component, suggestionElem);
    var suggestion = suggestions.get(value);
    if (!suggestion && isMasterList) {
      suggestionsBody.removeChild(suggestionElem);
      displayedSuggestions.splice(index, 1);
      indexMismatch = true;
    } else {
      if (suggestion) {
        var isSelected = this.IsSelected(value);
        var templateToUse = isSelected ? selectedTemplate : template;
        if (AdfAgent.AGENT.getPlatform() != AdfAgent.IE_PLATFORM) {
          while (templateToUse.includes("{\x3c!-- --\x3e{")) {
            templateToUse = templateToUse.replace("{\x3c!-- --\x3e{", "{{");
          }
        }
        displayedSuggestions[index] = suggestion;
        var listItemContent = AdfSuggestionsPanel._getListItemContent(suggestion.data, null, null, templateToUse, templateAttributes);
        if (suggestionElem.innerHTML != listItemContent) {
          suggestionElem.innerHTML = listItemContent;
        }
      }
      if (indexMismatch) {
        suggestionElem.setAttribute("id", idPrefix + this._displayedSuggestions.getInclusiveHeaderIndex(index));
        suggestionElem.setAttribute(positionAttr, index + 1);
      }
      index++;
    }
    suggestionElem = suggestionElem.nextElementSibling;
  }
  var displayedSuggestionMap = new AdfSuggestionMap(displayedSuggestions);
  this._displayedSuggestions.updateSuggestionMap(0, displayedSuggestionMap);
  this._adjustPopupDimensions(this._displayedSuggestions);
};
AdfSuggestionsPanel.prototype.handleClick = function(eventTarget) {
  var component = this._peer.getComponent();
  var rootElement = this._peer.getDomElement();
  var suggestionElem = AdfSuggestionsPanel.getSuggestionElement(eventTarget, rootElement);
  if (suggestionElem) {
    var newValue = AdfSuggestionsPanel.GetValueFromItem(component, suggestionElem);
    this.SelectSuggestItem(component, newValue, suggestionElem);
    component.focus();
  }
};
AdfSuggestionsPanel.prototype.handleKeyDown = function(componentEvent, contentNode) {
  var component = this._peer.getComponent();
  var clientId = component.getClientId();
  var eventTarget = componentEvent.getNativeEventTarget();
  var keyCode = componentEvent.getKeyCode();
  if (eventTarget == contentNode) {
    switch(keyCode) {
      case AdfKeyStroke.ARROWRIGHT_KEY:
        AdfSuggestionsPanel._speakUpNewCell(component, contentNode, true);
        break;
      case AdfKeyStroke.ARROWLEFT_KEY:
        AdfSuggestionsPanel._speakUpNewCell(component, contentNode, false);
        break;
      case AdfKeyStroke.ARROWUP_KEY:
        this._selectNewItem(component, contentNode, false);
        break;
      case AdfKeyStroke.ARROWDOWN_KEY:
        this._selectNewItem(component, contentNode, true);
        break;
      case AdfKeyStroke.ENTER_KEY:
        this._handleEnterKey(component, contentNode);
        break;
    }
  }
};
AdfSuggestionsPanel.prototype._handleEnterKey = function(component, contentNode) {
  var selectedItem = AdfSuggestionsPanel._getCurrentSelectedItem(contentNode);
  if (selectedItem) {
    var newValue = AdfSuggestionsPanel.GetValueFromItem(component, selectedItem);
    this.SelectSuggestItem(component, newValue, selectedItem);
  } else {
    this._peer.RunValidation(component, contentNode, true);
  }
};
AdfSuggestionsPanel.prototype._renderPartialSuggestionsList = function(component, suggestions, renderingContext) {
  if (!AdfSuggestionsPanel.removePartialSuggestionsLoadingIndicator(component, renderingContext.isPartialList)) {
    return false;
  }
  var hasChanges = AdfSuggestionsPanel._deDuplicateSuggestions(component, this._displayedSuggestions, suggestions, renderingContext.source);
  if (!hasChanges) {
    return true;
  }
  this._scrollManager.updateCollection(this._displayedSuggestions);
  this._adjustPopupDimensions(this._displayedSuggestions);
  var page = AdfPage.PAGE;
  page.announceToAssistiveTechnology(page.getLookAndFeel().getTranslatedString(AdfSuggestionsPanel._SUGGESTIONS_MERGED_MSG, this._displayedSuggestions.length));
  if (component.getContentMode() == AdfDhtmlInputSearchPeer.__CONTENT_MODE_TABLE) {
    var suggestionsBody = AdfSuggestionsPanel._getSuggestionsBody(component);
    suggestionsBody.setAttribute("aria-rowcount", this._displayedSuggestions.length);
  }
  return true;
};
AdfSuggestionsPanel._renderNoSuggestionsMessage = function(component, isFiltering) {
  var page = AdfPage.PAGE;
  var laf = page.getLookAndFeel();
  var translationKey = isFiltering ? AdfSuggestionsPanel._LABEL_NO_MATCHES : AdfSuggestionsPanel._LABEL_NO_DATA;
  var noSuggestionsMessage = laf.getTranslatedString(translationKey);
  var noSuggestionsElement = document.createElement("div");
  AdfDomUtils.addCSSClassName(noSuggestionsElement, laf.getStyleClass(AdfSuggestionsPanel._NO_SUGGESTIONS_MESSAGE_STYLE_CLASS));
  noSuggestionsElement.textContent = noSuggestionsMessage;
  AdfSuggestionsContainer.showSuggestions(component, noSuggestionsElement);
  page.announceToAssistiveTechnology(noSuggestionsMessage);
};
AdfSuggestionsPanel._renderServerLoadingIndicator = function(component, container) {
  var clientId = component.getClientId();
  var laf = AdfPage.PAGE.getLookAndFeel();
  var busyDiv = document.createElement("div");
  var busyDivClientId = AdfRichUIPeer.createSubId(clientId, AdfSuggestionsPanel._SERVER_FILTERING_INDICATOR_SUB_ID);
  busyDiv.setAttribute("id", busyDivClientId);
  busyDiv.setAttribute("role", "presentation");
  busyDiv.setAttribute("title", laf.getTranslatedString(AdfSuggestionsPanel._LABEL_FETCHING));
  var busySelector = laf.getStyleClass(AdfSuggestionsPanel._SERVER_FILTERING_STYLE_CLASS);
  AdfDomUtils.addCSSClassName(busyDiv, busySelector);
  container.appendChild(busyDiv);
};
AdfSuggestionsPanel.prototype.CreateSampleListItem = function(isTableMode, listSize) {
  var laf = AdfPage.PAGE.getLookAndFeel();
  var sampleListItem;
  if (isTableMode) {
    sampleListItem = document.createElement("tr");
    AdfDomUtils.addCSSClassName(sampleListItem, laf.getStyleClass(AdfSuggestionsPanel._SUGGESTION_ROW_ITEM_STYLE_CLASS));
  } else {
    sampleListItem = document.createElement("li");
    AdfDomUtils.addCSSClassName(sampleListItem, laf.getStyleClass(AdfSuggestionsPanel._SUGGESTION_LIST_ITEM_STYLE_CLASS));
    sampleListItem.setAttribute("role", "option");
    sampleListItem.setAttribute("aria-setsize", listSize);
  }
  return sampleListItem;
};
AdfSuggestionsPanel.prototype.GetSelectedSampleListItem = function(sampleListItem) {
  AdfAssert.failedInAbstractFunction();
};
AdfSuggestionsPanel._getListItemContent = function(data, matchRegex, replaceStr, template, templateAttributes) {
  if (!matchRegex) {
    return Mustache.render(template, data);
  }
  var copyData = AdfInputSearchUtils.cloneSimpleObject(data);
  for (var i = 0, length = templateAttributes.length;i < length;i++) {
    var attrName = templateAttributes[i];
    var attrValue = copyData[attrName];
    if (attrValue != null) {
      attrValue = Mustache.escape(attrValue);
      copyData[attrName + AdfInputSearchUtils.UNIQUE_MARKER] = attrValue.replace(matchRegex, replaceStr);
    }
  }
  return Mustache.render(template, copyData);
};
AdfSuggestionsPanel.prototype._appendSuggestions = function(suggestions, shouldHighlight, renderHeader, startIndex, endIndex) {
  var component = this._peer.getComponent();
  var clientId = component.getClientId();
  var highlightRegex = shouldHighlight ? AdfSuggestionsPanel._getHighlightRegex(component) : null;
  var highlightWrapper = shouldHighlight ? AdfSuggestionsPanel._getHighlightTextWrapperHtml(component) : null;
  var template = this._getContentStampTemplate(shouldHighlight);
  var selectedTemplate = this.GetSelectedItemTemplate(template);
  var templateAttributes = this._getTemplateAttributes();
  var isTableMode = component.getContentMode() == AdfDhtmlInputSearchPeer.__CONTENT_MODE_TABLE;
  var sampleListItem = this.CreateSampleListItem(isTableMode, suggestions.length);
  var selectedSampleListItem = this.GetSelectedSampleListItem(sampleListItem);
  var idPrefix = AdfSuggestionsPanel.getSuggestItemIdPrefix(clientId);
  var positionAttr = isTableMode ? "aria-rowindex" : "aria-posinset";
  var suggestionsDomFragment = document.createDocumentFragment();
  if (renderHeader) {
    AdfSuggestionsPanel._appendContentHeader(component, suggestionsDomFragment);
  }
  var self = this;
  var forEachCallback = function(suggestItem, inclusiveHeaderIndex, index) {
    if (suggestItem instanceof AdfUIComponent) {
      AdfDhtmlSuggestionsSectionPeer.appendHeader(suggestItem, suggestionsDomFragment, idPrefix + inclusiveHeaderIndex);
    } else {
      var row = suggestItem.data;
      var rowIdValue = suggestItem.key;
      var isSelected = self.IsSelected(rowIdValue);
      var templateToUse = isSelected ? selectedTemplate : template;
      if (AdfAgent.AGENT.getPlatform() != AdfAgent.IE_PLATFORM) {
        while (templateToUse.includes("{\x3c!-- --\x3e{")) {
          templateToUse = templateToUse.replace("{\x3c!-- --\x3e{", "{{");
        }
      }
      var listItem = isSelected ? selectedSampleListItem.cloneNode(false) : sampleListItem.cloneNode(false);
      listItem.setAttribute("id", idPrefix + inclusiveHeaderIndex);
      listItem.setAttribute(positionAttr, index + 1);
      if (isTableMode) {
        listItem.setAttribute("role", "row");
      }
      listItem.setAttribute(AdfSuggestionsPanel._VALUE_ATTRIBUTE_EXPANDO, rowIdValue);
      listItem.innerHTML = AdfSuggestionsPanel._getListItemContent(row, highlightRegex, highlightWrapper, templateToUse, templateAttributes);
      suggestionsDomFragment.appendChild(listItem);
    }
  };
  suggestions.inclusiveHeaderForEach(startIndex, endIndex, forEachCallback);
  return suggestionsDomFragment;
};
AdfSuggestionsPanel.prototype._createSuggestionsDomFragment = function(suggestions, options, renderHeader, startIndex, size) {
  AdfAssert.assert(startIndex != null);
  if (startIndex < 0) {
    startIndex = 0;
  }
  if (size == null) {
    size = AdfSuggestionsPanel.__SUGGESTIONS_RENDERING_CHUNK_SIZE;
  }
  var endIndex = startIndex + size;
  endIndex = endIndex > suggestions.length ? suggestions.inclusiveHeaderLength : endIndex;
  return this._appendSuggestions(suggestions, options.shouldHighlight, renderHeader, startIndex, endIndex);
};
AdfSuggestionsPanel._appendContentHeader = function(component, suggestionsDomFragment) {
  var isTableMode = component.getContentMode() == AdfDhtmlInputSearchPeer.__CONTENT_MODE_TABLE;
  if (!isTableMode) {
    return;
  }
  var headerHtml = AdfSuggestionsPanel._getContentHeaderFacet(component);
  if (headerHtml) {
    var cntHdrRowId = AdfRichUIPeer.createSubId(component.getClientId(), AdfSuggestionsPanel._CONTENT_HEADER_ROW_SUB_ID);
    AdfSuggestionsPanel.appendHeader(isTableMode, headerHtml, suggestionsDomFragment, AdfSuggestionsPanel._SUGGESTION_ROW_HEADER_STYLE_CLASS, cntHdrRowId);
  }
};
AdfSuggestionsPanel._getContentHeaderHeight = function(component, suggestionsBody) {
  if (AdfSuggestionsPanel._getContentHeaderFacet(component)) {
    return suggestionsBody.firstElementChild.offsetHeight;
  }
};
AdfSuggestionsPanel._getContentHeaderFacet = function(component) {
  var templateElem = AdfSuggestionsPanel._getContentHeaderFacetElement(component);
  if (templateElem) {
    return templateElem.innerHTML;
  }
};
AdfSuggestionsPanel._getContentHeaderFacetElement = function(component) {
  var clientId = component.getClientId();
  var templateId = AdfRichUIPeer.createSubId(clientId, AdfSuggestionsPanel._CONTENT_HEADER_SUB_ID);
  return AdfAgent.AGENT.getElementById(templateId);
};
AdfSuggestionsPanel._getContentStampContainer = function(component) {
  var clientId = component.getClientId();
  var templateId = AdfRichUIPeer.createSubId(clientId, AdfSuggestionsPanel._CONTENT_STAMP_SUB_ID);
  return AdfAgent.AGENT.getElementById(templateId);
};
AdfSuggestionsPanel.prototype._getContentStampTemplate = function(isFilter) {
  return isFilter ? this._filterTemplate : this._contentStampTemplate;
};
AdfSuggestionsPanel.prototype._getTemplateAttributes = function() {
  return this._templateAttributes;
};
AdfSuggestionsPanel.prototype._initContentStampTemplate = function(component) {
  var templateElem = AdfSuggestionsPanel._getContentStampContainer(component);
  var template = this.WrapContentStampTemplate(component, AdfInputSearchUtils.parseTemplate(templateElem.innerHTML));
  this._contentStampTemplate = template;
  var templateAttributes = [];
  var filterAttributes = component.getFilterAttributes();
  var re = new RegExp(Mustache.tags[0] + "(\\s*\\w+\\s*)" + Mustache.tags[1] + "(?!" + Mustache.tags[1][0] + ")(?![^\x3c]*?\x3e)", "g");
  var replaceFunc = function(match, captureText, offset, string) {
    var isFilterAttribute = filterAttributes.indexOf(captureText) != -1;
    if (isFilterAttribute) {
      if (templateAttributes.indexOf(captureText) == -1) {
        templateAttributes.push(captureText);
      }
      captureText += AdfInputSearchUtils.UNIQUE_MARKER;
      return Mustache.tags[0] + "\x26" + captureText + Mustache.tags[1];
    }
    return match;
  };
  template = template.replace(re, replaceFunc);
  this._filterTemplate = template;
  this._templateAttributes = templateAttributes;
};
AdfSuggestionsPanel.prototype._prepareTemplates = function(component) {
  var headerFacet = AdfSuggestionsPanel._getContentHeaderFacetElement(component);
  if (headerFacet) {
    headerFacet.innerHTML = this.WrapContentHeaderTemplate(AdfInputSearchUtils.parseTemplate(headerFacet.innerHTML));
  }
  this._initContentStampTemplate(component);
};
AdfSuggestionsPanel._adjustHeightToRowCount = function(component, firstItem) {
  var lastElem = AdfSuggestionsPanel._getXthElement(firstItem, component.getRowCount());
  var height = lastElem.offsetTop + lastElem.offsetHeight + 2 + "px";
  AdfSuggestionsContainer.setHeight(component, height);
};
AdfSuggestionsPanel.prototype._manageSuggestionsPopupHeight = function(suggestions) {
  var peer = this._peer;
  var component = peer.getComponent();
  if (this._isSuggestionsPopupUpdated(suggestions)) {
    return;
  }
  var suggestionsBody = AdfSuggestionsPanel._getSuggestionsBody(component);
  var suggestionElems = suggestionsBody.children;
  if (!suggestionElems || suggestionElems.length == 0) {
    return;
  }
  AdfSuggestionsPanel._adjustHeightToRowCount(component, suggestionElems[0]);
  peer.__getSuggestionPopupWindow(component).autoSize();
};
AdfSuggestionsPanel.prototype._adjustPopupDimensions = function(suggestions) {
  if (this._isSuggestionsPopupUpdated(suggestions)) {
    return;
  }
  var peer = this._peer;
  var component = peer.getComponent();
  peer.__getSuggestionPopupWindow(component).autoSize();
  AdfPage.PAGE.scheduleTimer(this, this._manageSuggestionsPopupHeight, suggestions, 0, {"isSynchronized":true});
};
AdfSuggestionsPanel._deDuplicateSuggestions = function(component, displayedSuggestionsChain, suggestions, source) {
  var deDuplicatedSuggestions = [];
  for (var i = 0, len = suggestions.length;i < len;i++) {
    var suggestion = suggestions.at(i);
    if (!displayedSuggestionsChain.get(suggestion.key)) {
      deDuplicatedSuggestions.push(suggestion);
    }
  }
  if (deDuplicatedSuggestions.length === 0) {
    return false;
  }
  displayedSuggestionsChain.addSuggestionMap(new AdfSuggestionMap(deDuplicatedSuggestions), source);
  return true;
};
AdfSuggestionsPanel.prototype._isSuggestionsPopupUpdated = function(suggestions) {
  return this._displayedSuggestions != suggestions;
};
AdfSuggestionsPanel._getHighlightRegex = function(component) {
  var contentNodeValue = AdfDhtmlEditableValuePeer.getContentNode(component).value.trim();
  if (!contentNodeValue) {
    return;
  }
  contentNodeValue = Mustache.escape(contentNodeValue);
  contentNodeValue = AdfInputSearchUtils.escapeRegexChars(contentNodeValue);
  var highlightStrings = AdfInputSearchUtils.splitAndSort(contentNodeValue);
  var highlightRegexStr;
  switch(component.getCriteria()) {
    case AdfRichInputSearch.CRITERIA_ATTRIBUTE_STARTS_WITH:
      highlightRegexStr = "^(";
      highlightRegexStr += AdfSuggestionsPanel._getWhitespacePreservedMatcher(contentNodeValue);
      break;
    case AdfRichInputSearch.CRITERIA_STARTS_WITH:
      for (var i = 0, len = highlightStrings.length;i < len;i++) {
        var term = highlightStrings[i];
        if (term.match(/^\w/)) {
          highlightStrings[i] = "\\b" + term;
        } else {
          highlightStrings[i] = term;
        }
      }
    ;
    default:
      highlightRegexStr = "(";
  }
  for (var i = 0, leni = highlightStrings.length;true;) {
    highlightRegexStr += highlightStrings[i];
    if (++i == leni) {
      highlightRegexStr += ")";
      break;
    } else {
      highlightRegexStr += "|";
    }
  }
  return new RegExp(highlightRegexStr, "gi");
};
AdfSuggestionsPanel._getHighlightTextWrapperHtml = function(component) {
  var highlightStyleClass = AdfPage.PAGE.getLookAndFeel().getStyleClass(AdfSuggestionsPanel._SUGGESTION_ITEM_MATCHING_TEXT_STYLE_CLASS);
  return "\x3cspan class\x3d'" + highlightStyleClass + "'\x3e$1\x3c/span\x3e";
};
AdfSuggestionsPanel._getWhitespacePreservedMatcher = function(contentNodeValue) {
  var highlightStrings = contentNodeValue.split(" ");
  var option = "";
  for (var i = 0, len = highlightStrings.length;i < len - 1;i++) {
    option += highlightStrings[i] + " ";
    for (var j = i + 1;j < len;j++) {
      option += option.charAt(option.length - 1) == " " ? "(?:" : "(?: ";
      option += highlightStrings[j] + ")?";
    }
    option += "|";
  }
  return option;
};
AdfSuggestionsPanel.GetValueFromItem = function(component, suggestItem) {
  var value = suggestItem.getAttribute(AdfSuggestionsPanel._VALUE_ATTRIBUTE_EXPANDO);
  if (AdfDhtmlInputSearchPeer.getValueAttributeType(component) == "Number") {
    value = Number(value);
  }
  return value;
};
AdfSuggestionsPanel._getCurrentSelectedItem = function(contentNode) {
  var activeDescendantId = contentNode.getAttribute("aria-activedescendant");
  if (!activeDescendantId) {
    return;
  }
  var activeDescendant = document.getElementById(activeDescendantId);
  if (activeDescendantId == AdfSuggestionsPanel._ACTIVE_CELL_ID) {
    activeDescendant.removeAttribute("id");
    activeDescendant = AdfSuggestionsPanel.getSuggestionElement(activeDescendant);
    if (activeDescendant) {
      contentNode.setAttribute("aria-activedescendant", activeDescendant.getAttribute("id"));
    }
  }
  return activeDescendant;
};
AdfSuggestionsPanel._speakUpNewCell = function(component, contentNode, isNext) {
  if (component.getContentMode() !== AdfDhtmlInputSearchPeer.__CONTENT_MODE_TABLE) {
    return;
  }
  var activeDescendantId = contentNode.getAttribute("aria-activedescendant");
  if (!activeDescendantId) {
    return;
  }
  var activeDescendant = document.getElementById(activeDescendantId);
  if (activeDescendantId == AdfSuggestionsPanel._ACTIVE_CELL_ID) {
    var oldActiveDescendant = activeDescendant;
    activeDescendant = isNext ? activeDescendant.nextElementSibling : activeDescendant.previousElementSibling;
    if (activeDescendant && !activeDescendant.hasAttribute(AdfMultiSelectPanel.CHECKBOX_EXPANDO)) {
      oldActiveDescendant.removeAttribute("id");
      activeDescendant.setAttribute("id", AdfSuggestionsPanel._ACTIVE_CELL_ID);
    }
  } else {
    activeDescendant = activeDescendant.firstElementChild;
    if (activeDescendant.hasAttribute(AdfMultiSelectPanel.CHECKBOX_EXPANDO)) {
      activeDescendant = activeDescendant.nextElementSibling;
    }
    activeDescendant.setAttribute("id", AdfSuggestionsPanel._ACTIVE_CELL_ID);
    contentNode.setAttribute("aria-activedescendant", AdfSuggestionsPanel._ACTIVE_CELL_ID);
  }
};
AdfSuggestionsPanel._speakUpHeader = function(component, contentNode) {
  var suggestionBody = AdfSuggestionsPanel._getSuggestionsBody(component);
  var headerElem = suggestionBody.firstChild;
  contentNode.setAttribute("aria-activedescendant", headerElem.id);
};
AdfSuggestionsPanel.GetNextItem = function(component, isFindNextItem, currentItem) {
  if (currentItem) {
    var newItem = currentItem;
    do {
      newItem = isFindNextItem ? newItem.nextElementSibling : newItem.previousElementSibling;
    } while (newItem && !AdfSuggestionsPanel.IsSuggestItem(newItem));
    return newItem;
  } else {
    if (isFindNextItem) {
      var suggestionsBody = AdfSuggestionsPanel._getSuggestionsBody(component);
      return suggestionsBody.querySelector("[" + AdfSuggestionsPanel._VALUE_ATTRIBUTE_EXPANDO + "]");
    }
  }
};
AdfSuggestionsPanel._getXthElement = function(element, rowCount) {
  var prevElem;
  while (element && rowCount != 0) {
    prevElem = element;
    if (AdfSuggestionsPanel.IsSuggestItem(element)) {
      rowCount--;
    }
    element = element.nextElementSibling;
  }
  return prevElem;
};
AdfSuggestionsPanel.IsSuggestItem = function(element) {
  return element.hasAttribute(AdfSuggestionsPanel._VALUE_ATTRIBUTE_EXPANDO);
};
AdfSuggestionsPanel.prototype._selectNewItem = function(component, contentNode, isFindNextItem) {
  var oldItem = AdfSuggestionsPanel._getCurrentSelectedItem(contentNode);
  var newItem = AdfSuggestionsPanel.GetNextItem(component, isFindNextItem, oldItem);
  if (!newItem) {
    if (AdfSuggestionsPanel._getContentHeaderFacet(component)) {
      AdfSuggestionsPanel._speakUpHeader(component, contentNode);
    } else {
      return;
    }
  }
  if (oldItem) {
    AdfDomUtils.removeCSSClassName(oldItem, AdfRichUIPeer.SELECTED_STYLECLASS);
    oldItem.removeAttribute("aria-selected");
  }
  if (newItem) {
    AdfDomUtils.addCSSClassName(newItem, AdfRichUIPeer.SELECTED_STYLECLASS);
    contentNode.setAttribute("aria-activedescendant", newItem.id);
    newItem.setAttribute("aria-selected", "true");
    if (this._scrollManager.isElementHidden(newItem)) {
      this._scrollManager.scrollIntoView(newItem, !isFindNextItem);
    }
  }
};
AdfSuggestionsPanel._getPartialSuggestionsLoadingIndicator = function(component) {
  var clientId = component.getClientId();
  var busyDivClientId = AdfRichUIPeer.createSubId(clientId, AdfSuggestionsPanel._SERVER_FILTERING_INDICATOR_SUB_ID);
  return document.getElementById(busyDivClientId);
};
AdfSuggestionsPanel.prototype.GetPeer = function() {
  return this._peer;
};
AdfSuggestionsPanel.prototype.IsSelected = function(value) {
  AdfAssert.failedInAbstractFunction();
};
AdfSuggestionsPanel.prototype.SelectSuggestItem = function(component, newValue, suggestionElem) {
  AdfAssert.failedInAbstractFunction();
};
AdfSuggestionsPanel.prototype.GetSelectedItemTemplate = function(template) {
  AdfAssert.failedInAbstractFunction();
};
AdfSuggestionsPanel.prototype.WrapContentHeaderTemplate = function(template) {
  AdfAssert.failedInAbstractFunction();
};
AdfSuggestionsPanel.prototype.WrapContentStampTemplate = function(component, template) {
  AdfAssert.failedInAbstractFunction();
};
AdfSuggestionsPanel.prototype.WrapSectionHeaderTemplate = function(component, section, template) {
  AdfAssert.failedInAbstractFunction();
};
AdfSuggestionsPanel._getSuggestionsBody = function(component) {
  var suggestionsBodyId = AdfSuggestionsPanel.getSuggestionsBodyId(component);
  var suggestionsBody = document.getElementById(suggestionsBodyId);
  if (suggestionsBody) {
    return suggestionsBody;
  }
  var isTableMode = component.getContentMode() == AdfDhtmlInputSearchPeer.__CONTENT_MODE_TABLE;
  var laf = AdfPage.PAGE.getLookAndFeel();
  var elementName, roleName, className;
  if (isTableMode) {
    elementName = "table";
    roleName = "grid";
    className = laf.getStyleClass(AdfSuggestionsPanel._ROW_ITEMS_CONTAINER_STYLE_CLASS);
  } else {
    elementName = "ul";
    roleName = "listbox";
    className = laf.getStyleClass(AdfSuggestionsPanel._LIST_ITEMS_CONTAINER_STYLE_CLASS);
  }
  suggestionsBody = document.createElement(elementName);
  suggestionsBody.setAttribute("id", suggestionsBodyId);
  suggestionsBody.setAttribute("role", roleName);
  suggestionsBody.setAttribute("aria-labelledby", AdfInputSearchUtils.getLabelId(component));
  if (component.getSelectionMode() == AdfDhtmlInputSearchPeer.__SELECTION_MODE_SINGLE) {
    suggestionsBody.setAttribute("aria-multiselectable", "true");
  }
  AdfDomUtils.addCSSClassName(suggestionsBody, className);
  return suggestionsBody;
};

function AdfSingleSelectPanel(peer) {
  this.Init(peer);
}
AdfObject.createSubclass(AdfSingleSelectPanel, AdfSuggestionsPanel);
AdfSingleSelectPanel.InitClass = function() {
};
AdfSingleSelectPanel.prototype.Init = function(peer) {
  AdfSingleSelectPanel.superclass.Init.call(this, peer);
};
AdfSingleSelectPanel.prototype.GetSelectedSampleListItem = function(sampleListItem) {
  return;
};
AdfSingleSelectPanel.prototype.IsSelected = function(value) {
  return false;
};
AdfSingleSelectPanel.prototype.SelectSuggestItem = function(component, newValue, suggestionElem) {
  this.GetPeer().__setComponentValue(component, newValue);
};
AdfSingleSelectPanel.prototype.GetSelectedItemTemplate = function(template) {
  return template;
};
AdfSingleSelectPanel.prototype.WrapContentHeaderTemplate = function(template) {
  return template;
};
AdfSingleSelectPanel.prototype.WrapContentStampTemplate = function(component, template) {
  return template;
};
AdfSingleSelectPanel.prototype.WrapSectionHeaderTemplate = function(component, section, template) {
  return template;
};

function AdfMultiSelectPanel(peer) {
  this.Init(peer);
}
AdfObject.createSubclass(AdfMultiSelectPanel, AdfSuggestionsPanel);
AdfMultiSelectPanel.InitClass = function() {
  this.CHECKBOX_EXPANDO = "data-afr-cb";
  this._CHECKBOX_HTML = '\x3cinput role\x3d"presentation" class\x3d"AFTltCheckbox" type\x3d"checkbox"\x3e\x3c/input\x3e';
  this._SELECTED_CHECKBOX_HTML = '\x3cinput role\x3d"presentation" class\x3d"AFTltCheckbox" type\x3d"checkbox" checked\x3e\x3c/input\x3e';
  var checkboxWrapperHtml = '\x3cdiv class\x3d"AFTltCheckboxCntnr"\x3e' + this._CHECKBOX_HTML + '\x3cdiv class\x3d"AFTltVirtualCheckbox"\x3e\x3c/div\x3e' + "\x3c/div\x3e";
  var selectedCheckboxWrapperHtml = '\x3cdiv class\x3d"AFTltCheckboxCntnr"\x3e' + this._SELECTED_CHECKBOX_HTML + '\x3cdiv class\x3d"AFTltVirtualCheckbox"\x3e\x3c/div\x3e' + "\x3c/div\x3e";
  this._CONTENT_LIST_TEMPLATE_WRAPPER = "\x3cdiv class\x3d'AFTltWrapper'\x3e" + "\x3cdiv class\x3d'AFTltSideAlign'\x3e" + checkboxWrapperHtml + "\x3c/div\x3e" + "\x3cdiv class\x3d'AFTltSideAlign'\x3e$1\x3c/div\x3e" + "\x3c/div\x3e";
  this._CONTENT_TABLE_TEMPLATE_WRAPPER = "\x3ctd " + this.CHECKBOX_EXPANDO + "\x3e" + checkboxWrapperHtml + "\x3c/td\x3e$1";
  this._SECTION_HEADER_LIST_TEMPLATE_WRAPPER = "\x3cdiv class\x3d'AFTltWrapper'\x3e" + "\x3cdiv class\x3d'AFTltSideAlign'\x3e" + selectedCheckboxWrapperHtml + "\x3c/div\x3e" + "\x3cdiv class\x3d'AFTltSideAlign'\x3e$1\x3c/div\x3e" + "\x3c/div\x3e";
  this._SECTION_HEADER_TABLE_TEMPLATE_WRAPPER = "\x3cth\x3e" + selectedCheckboxWrapperHtml + "\x3c/th\x3e$1";
  this._CONTENT_HEADER_TEMPLATE_WRAPPER = "\x3cth\x3e\x3c/th\x3e$1";
};
AdfMultiSelectPanel.prototype.Init = function(peer) {
  AdfMultiSelectPanel.superclass.Init.call(this, peer);
};
AdfMultiSelectPanel.getSectionalHeader = function(component, element, rootElement) {
  var clientId = component.getClientId();
  while (element != document.body && !AdfMultiSelectPanel._isSectionalHeader(clientId, element) && element != rootElement) {
    element = element.parentNode;
  }
  if (AdfMultiSelectPanel._isSectionalHeader(clientId, element)) {
    return element;
  } else {
    return null;
  }
};
AdfMultiSelectPanel._isSectionalHeader = function(clientId, element) {
  var idPrefix = AdfSuggestionsPanel.getSuggestItemIdPrefix(clientId);
  return element.id.indexOf(idPrefix) === 0 && !AdfSuggestionsPanel.IsSuggestItem(element);
};
AdfMultiSelectPanel.prototype.handleClick = function(eventTarget) {
  var peer = this.GetPeer();
  var component = peer.getComponent();
  var rootElement = peer.getDomElement();
  if (peer.IsSelectionsShown(component)) {
    var headerElem = AdfMultiSelectPanel.getSectionalHeader(component, eventTarget, rootElement);
    if (headerElem) {
      this._selectOrUnselectAll(component, headerElem);
      component.focus();
      return;
    }
  }
  AdfMultiSelectPanel.superclass.handleClick.call(this, eventTarget);
};
AdfMultiSelectPanel.prototype.CreateSampleListItem = function(isTableMode, listSize) {
  var sampleListItem = AdfMultiSelectPanel.superclass.CreateSampleListItem.call(this, isTableMode, listSize);
  sampleListItem.setAttribute("aria-selected", "false");
  return sampleListItem;
};
AdfMultiSelectPanel.prototype.GetSelectedSampleListItem = function(sampleListItem) {
  var selectedSampleListItem = sampleListItem.cloneNode(false);
  selectedSampleListItem.setAttribute("aria-selected", "true");
  return selectedSampleListItem;
};
AdfMultiSelectPanel.prototype.IsSelected = function(value) {
  return this._getLocalSelections().has(value);
};
AdfMultiSelectPanel.prototype.SelectSuggestItem = function(component, newValue, suggestionElem) {
  var checkbox = AdfMultiSelectPanel._getCheckbox(suggestionElem);
  var localSelections = this._getLocalSelections();
  if (localSelections.has(newValue)) {
    localSelections["delete"](newValue);
    AdfMultiSelectPanel._toggleSelection(suggestionElem, checkbox, false);
    AdfMultiSelectPanel._updateSelectionsCount(component, -1);
  } else {
    var selection = this.getDisplayedSuggestions().get(newValue);
    localSelections.set(newValue, selection);
    AdfMultiSelectPanel._toggleSelection(suggestionElem, checkbox, true);
    AdfMultiSelectPanel._updateSelectionsCount(component, 1);
  }
};
AdfMultiSelectPanel.prototype.GetSelectedItemTemplate = function(template) {
  return template.replace(AdfMultiSelectPanel._CHECKBOX_HTML, AdfMultiSelectPanel._SELECTED_CHECKBOX_HTML);
};
AdfMultiSelectPanel.prototype.WrapContentHeaderTemplate = function(template) {
  return AdfMultiSelectPanel._CONTENT_HEADER_TEMPLATE_WRAPPER.replace("$1", template);
};
AdfMultiSelectPanel.prototype.WrapContentStampTemplate = function(component, template) {
  var isTableMode = component.getContentMode() == AdfDhtmlInputSearchPeer.__CONTENT_MODE_TABLE;
  if (isTableMode) {
    return AdfMultiSelectPanel._CONTENT_TABLE_TEMPLATE_WRAPPER.replace("$1", template);
  }
  return AdfMultiSelectPanel._CONTENT_LIST_TEMPLATE_WRAPPER.replace("$1", template);
};
AdfMultiSelectPanel.prototype.WrapSectionHeaderTemplate = function(component, section, template) {
  if (section.getType && section.getType() == AdfDhtmlInputSearchPeer.__SEARCH_SECTION_TYPE_DEFAULT) {
    var isTableMode = component.getContentMode() == AdfDhtmlInputSearchPeer.__CONTENT_MODE_TABLE;
    if (isTableMode) {
      return AdfMultiSelectPanel._SECTION_HEADER_TABLE_TEMPLATE_WRAPPER.replace("$1", template);
    }
    return AdfMultiSelectPanel._SECTION_HEADER_LIST_TEMPLATE_WRAPPER.replace("$1", template);
  }
  return template;
};
AdfMultiSelectPanel.prototype._getLocalSelections = function() {
  return this.GetPeer().__getLocalSelections();
};
AdfMultiSelectPanel._getCheckbox = function(suggestionElem) {
  return suggestionElem.getElementsByTagName("input")[0];
};
AdfMultiSelectPanel._toggleSelection = function(suggestItem, checkbox, state) {
  checkbox.checked = state;
  suggestItem.setAttribute("aria-selected", state);
};
AdfMultiSelectPanel._updateSelectionsCount = function(component, diff) {
  var selectionsButton = AdfInputSearchUtils.getSelectionsButton(component);
  var currValue = parseInt(selectionsButton.getAttribute(AdfMultiSelectInputSearchPeer.__SELECTIONS_LENGTH_EXPANDO));
  var newValue;
  if (isNaN(currValue)) {
    AdfAssert.assert(diff == 1);
    currValue = 0;
    newValue = 1;
  } else {
    newValue = currValue + diff;
  }
  AdfMultiSelectPanel._setSelectionsCount(component, newValue, currValue == 0, selectionsButton);
};
AdfMultiSelectPanel._setSelectionsCount = function(component, newLength, noSelectionsState, selectionsButton) {
  if (noSelectionsState) {
    var rootElement = component.getPeer().getDomElement();
    AdfDomUtils.addCSSClassName(rootElement, AdfMultiSelectInputSearchPeer.__HAS_SELECTIONS_STATE_STYLE_CLASS);
  }
  if (!selectionsButton) {
    selectionsButton = AdfInputSearchUtils.getSelectionsButton(component);
  }
  if (newLength === 0) {
    selectionsButton.removeAttribute(AdfMultiSelectInputSearchPeer.__SELECTIONS_LENGTH_EXPANDO);
    var rootElement = component.getPeer().getDomElement();
    AdfDomUtils.removeCSSClassName(rootElement, AdfMultiSelectInputSearchPeer.__HAS_SELECTIONS_STATE_STYLE_CLASS);
  } else {
    selectionsButton.setAttribute(AdfMultiSelectInputSearchPeer.__SELECTIONS_LENGTH_EXPANDO, newLength);
  }
};
AdfMultiSelectPanel.prototype._selectOrUnselectAll = function(component, headerElem) {
  var checkbox = AdfMultiSelectPanel._getCheckbox(headerElem);
  var state = !checkbox.checked;
  checkbox.checked = state;
  var displayedSuggestions = this.getDisplayedSuggestions();
  var localSelections = this._getLocalSelections();
  var currLength = localSelections.size;
  localSelections.clear();
  var suggestItem = AdfSuggestionsPanel.GetNextItem(component, true);
  while (suggestItem) {
    checkbox = AdfMultiSelectPanel._getCheckbox(suggestItem);
    AdfMultiSelectPanel._toggleSelection(suggestItem, checkbox, state);
    if (state) {
      var value = AdfSuggestionsPanel.GetValueFromItem(component, suggestItem);
      var suggestion = displayedSuggestions.get(value);
      localSelections.set(value, suggestion);
    }
    suggestItem = AdfSuggestionsPanel.GetNextItem(component, true, suggestItem);
  }
  AdfMultiSelectPanel._setSelectionsCount(component, state ? displayedSuggestions.length : 0, currLength == 0);
};
